//
// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// resolved_ast_comparator.cc GENERATED FROM resolved_ast_comparator.cc.template
#include "zetasql/resolved_ast/resolved_ast_comparator.h"

#include "zetasql/base/logging.h"
#include "google/protobuf/descriptor.h"
#include "zetasql/common/errors.h"
#include "zetasql/public/catalog.h"

namespace zetasql {

namespace {

// Overloads for Equals to compare two node fields of scalar type.
static bool Equals(const std::string& str1, const std::string& str2) {
  return zetasql_base::CaseEqual(str1, str2);
}

static bool Equals(const Type* type1, const Type* type2) {
  return type1->Equals(type2);
}

static bool Equals(const Constant* constant1, const Constant* constant2) {
  // FullName() identifies the full path name of the constant, including its
  // containing catalog names, so two constants in different (sub)catalogs with
  // the same name will have different full names and therefore compare not
  // equal.
  return zetasql_base::CaseEqual(constant1->FullName(), constant2->FullName());
}

static bool Equals(const FunctionSignature& sig1,
                   const FunctionSignature& sig2) {
  return zetasql_base::CaseEqual(sig1.DebugString(), sig2.DebugString());
}

static bool Equals(const std::shared_ptr<ResolvedFunctionCallInfo>& info1,
                   const std::shared_ptr<ResolvedFunctionCallInfo>& info2) {
  if (info1 == nullptr || info2 == nullptr) {
    return (info1 == nullptr) == (info2 == nullptr);
  }
  return zetasql_base::CaseEqual(info1->DebugString(), info2->DebugString());
}

static bool Equals(const Value& val1, const Value& val2) {
  return val1.Equals(val2);
}

static bool Equals(const Function* f1, const Function* f2) {
  // For now, we only compare function names.  If/when we have new use
  // cases, we may want to compare additional things.
  return zetasql_base::CaseEqual(f1->Name(), f2->Name());
}

static bool Equals(const Table* t1, const Table* t2) {
  // For now, we only compare table names.  If/when we have new use
  // cases, we may want to compare additional things.
  return zetasql_base::CaseEqual(t1->Name(), t2->Name());
}

static bool Equals(const google::protobuf::FieldDescriptor* f1,
                   const google::protobuf::FieldDescriptor* f2) {
  return f1->full_name() == f2->full_name() &&
      f1->type_name() == f2->type_name() &&
      f1->number() == f2->number() /* tag number */;
}

static bool Equals(const TypeParameters& tp1, const TypeParameters& tp2) {
  return tp1.Equals(tp2);
}

template <typename T>
static bool Equals(T arg1, T arg2) {
  return arg1 == arg2;
}

}  // namespace

absl::Status* ResolvedASTComparator::stack_overflow_status_ =
    new absl::Status(
        absl::StatusCode::kResourceExhausted,
        "Out of stack space due to deeply nested query expressions when"
        " comparing");

absl::StatusOr<bool> ResolvedASTComparator::CompareResolvedAST(
    const ResolvedNode* node1, const ResolvedNode* node2) {
  if (node1 == nullptr && node2 == nullptr) return true;
  if (node1 == nullptr || node2 == nullptr) return false;
  if (node1->node_kind() != node2->node_kind()) return false;

  switch (node1->node_kind()) {
# for node in nodes
 # if not node.is_abstract
    case {{node.enum_name}}:
      return Compare{{node.name}}(node1->GetAs<{{node.name}}>(),
                                   node2->GetAs<{{node.name}}>());
 # endif
# endfor
    default: return false;
  }
}

# for node in nodes
 # if not node.is_abstract
absl::StatusOr<bool> ResolvedASTComparator::Compare{{node.name}}(
    const {{node.name}}* node1, const {{node.name}}* node2) {

  absl::StatusOr<bool> result;
# for field in (node.inherited_fields + node.fields)
 # if field.is_node_ptr
  result = CompareResolvedAST(node1->{{field.name}}(),
                                node2->{{field.name}}());
  ZETASQL_RETURN_IF_ERROR(result.status());
  if (!*result) return false;
 # elif field.is_node_vector
  if (node1->{{field.name}}().size() != node2->{{field.name}}().size()) {
    return false;
  }
  for (int i = 0; i < node1->{{field.name}}().size(); ++i) {
    result = CompareResolvedAST(node1->{{field.name}}(i),
                                  node2->{{field.name}}(i));
    ZETASQL_RETURN_IF_ERROR(result.status());
    if (!*result) return false;
  }
 # else
  # if field.is_vector
  if (node1->{{field.name}}().size() != node2->{{field.name}}().size()) {
    return false;
  }
  for (int i = 0; i < node1->{{field.name}}().size(); ++i) {
    if (!Equals(node1->{{field.name}}(i), node2->{{field.name}}(i))) {
      return false;
    }
  }
  # else
  if (!Equals(node1->{{field.name}}(), node2->{{field.name}}())) {
    return false;
  }
  # endif
 # endif
# endfor

  return true;
}
 # endif
# endfor

}  // namespace zetasql
