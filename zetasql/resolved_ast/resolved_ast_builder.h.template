//
// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// resolved_ast_builder.h GENERATED FROM resolved_ast_builder.h.template
#ifndef ZETASQL_RESOLVED_AST_RESOLVED_AST_BUILDER_H_
#define ZETASQL_RESOLVED_AST_RESOLVED_AST_BUILDER_H_

#include <atomic>
#include <memory>
#include <vector>

#include "zetasql/base/logging.h"
#include "zetasql/common/status_payload_utils.h"
#include "zetasql/resolved_ast/resolved_ast.h"
#include "absl/status/statusor.h"
{{blank_line}}
{%- macro move_or_copy_value(field, variable_name) -%}
  {%- if field.is_node_ptr or field.is_node_vector -%}
    std::move({{variable_name}})
  {%- else -%}
    {{variable_name}}
  {%- endif -%}
{%- endmacro -%}

{# ref_qualifier must be either '&' or '&&' #}
{%- macro chained_return(ref_qualifier) -%}
  {%- if ref_qualifier == '&' -%}
    return *this;
  {%- elif ref_qualifier == '&&' -%}
    return std::move(*this);
  {%- else -%}
    {{ RaiseException("ref_qualifier must be either '&' or '&&'") }}
  {%- endif -%}
{%- endmacro -%}

{% set field_set_bitmap_name = 'field_is_set_' %}
{% macro set_field_bitmap(bitmap_name, field) %}
# if field['is_required_builder_arg']
{{field_set_bitmap_name}}.set({{field.builder_bitmap}}, true);
# endif
{% endmacro %}

{% macro chained_direct_setter(node, field, inner_node_member_name, ref_qualifier) %}
 # if field.is_node_ptr or field.is_node_vector
  template<typename T, typename = typename std::enable_if_t<std::is_convertible<T, {{field.setter_arg_type}}>::value>>
  {{node.builder_name}}{{ref_qualifier}} set_{{field.name}}(T v) {{ref_qualifier}} {
 # else
  {{node.builder_name}}{{ref_qualifier}} set_{{field.name}}({{field.setter_arg_type}} v) {{ref_qualifier}} {
 # endif
    {{inner_node_member_name}}->set_{{field.name}}({{move_or_copy_value(field, 'v')}});
    {{ set_field_bitmap(field_set_bitmap_name, field) }}
    {{ chained_return(ref_qualifier) }}
  }
{% endmacro %}

{% macro chained_builder_setter(node, field, inner_node_member_name, status_member_name, ref_qualifier) %}
  template<typename TBuilder, typename = typename std::enable_if_t<!std::is_convertible<TBuilder, {{field.setter_arg_type}}>::value>>
  {{node.builder_name}}{{ref_qualifier}} set_{{field.name}}(TBuilder&& b) {{ref_qualifier}} {
    auto status_or_node = std::move(b).Build();
    if (status_or_node.ok()) {
      set_{{field.name}}(std::move(*status_or_node));
    } else {
      zetasql::internal::UpdateStatus(&{{status_member_name}},
                                        status_or_node.status());
    }
    {{ set_field_bitmap(field_set_bitmap_name, field) }}
    {{ chained_return(ref_qualifier) }}
  }
{% endmacro %}

{% macro chained_direct_adder(node, field, inner_node_member_name, ref_qualifier) %}
 # if field.is_node_vector
  template<typename T, typename = typename std::enable_if_t<std::is_convertible<T, {{field.element_storage_type}}>::value>>
  {{node.builder_name}}{{ref_qualifier}} add_{{field.name}}(T v) {{ref_qualifier}} {
 # else
  {{node.builder_name}}{{ref_qualifier}} add_{{field.name}}({{field.element_storage_type}} v) {{ref_qualifier}} {
 # endif
    {{inner_node_member_name}}->add_{{field.name}}({{move_or_copy_value(field, 'v')}});
    {{ set_field_bitmap(field_set_bitmap_name, field) }}
    {{ chained_return(ref_qualifier) }}
  }
{% endmacro %}

{% macro chained_builder_adder(node, field, inner_node_member_name, status_member_name, ref_qualifier) %}
  template<typename TBuilder, typename = typename std::enable_if_t<!std::is_convertible<TBuilder, {{field.element_storage_type}}>::value>>
  {{node.builder_name}}{{ref_qualifier}} add_{{field.name}}(TBuilder&& b) {{ref_qualifier}} {
    auto status_or_node = std::move(b).Build();
    if (status_or_node.ok()) {
      add_{{field.name}}(std::move(*status_or_node));
    } else {
      zetasql::internal::UpdateStatus(&{{status_member_name}},
                                        status_or_node.status());
    }
    {{ set_field_bitmap(field_set_bitmap_name, field) }}
    {{ chained_return(ref_qualifier) }}
  }
{% endmacro %}

namespace zetasql {

// Forward declaration of builder classes to declare them as `friend` in node
// classes
# for node in nodes if not node.is_abstract
class {{node.builder_name}};
# endfor

{% set inner_node_member_name = 'node_' %}
{% set status_member_name = 'deferred_build_status_' %}
{{blank_line}}
# for node in nodes if not node.is_abstract
class {{node.builder_name}} final {
 public:
  # if node.extra_defs
  {{node.extra_defs}}
  {{blank_line}}
  # endif

  {{node.builder_name}}() : {{node.builder_name}}(absl::WrapUnique(new {{node.name}})) {}

  {{node.builder_name}}(const {{node.builder_name}}&) = delete;
  {{node.builder_name}}& operator=(const {{node.builder_name}}&) = delete;
  {{node.builder_name}}({{node.builder_name}}&& other)
      : {{node.builder_name}}(std::move(other.{{inner_node_member_name}})) {
    {{status_member_name}} = std::move(other.{{status_member_name}});
  # if ((node.fields + node.inherited_fields) | is_required_builder_arg)
    {{field_set_bitmap_name}} = std::move(other.{{field_set_bitmap_name}});
  # endif
  }

  {{node.builder_name}}& operator=({{node.builder_name}}&& other) {
    {{inner_node_member_name}} = std::move(other.{{inner_node_member_name}});
    {{status_member_name}} = std::move(other.{{status_member_name}});
   # if ((node.fields + node.inherited_fields) | is_required_builder_arg)
    {{field_set_bitmap_name}} = std::move(other.{{field_set_bitmap_name}});
   # endif
    return *this;
  };

  // Build() releases the current inner node, so it is callable only on an
  // r-value, where the builder is expected to be going away. Resets the
  // `accessed_` bits.
  absl::StatusOr<std::unique_ptr<const {{node.name}}>> Build() && {
  {# // The result of Build() is treated as a new node so
    // CheckFieldsAccessed() requires revisiting all fields again as their
    // values may have changed. Furthermore, accessed_ bits may have been set as
    // a side effect of accessing existing values through the builder to
    // incrementally create new values, rather than a client actually accessing
    // the value.
  #}
    {{inner_node_member_name}}->accessed_ = 0;

  # for field in (node.inherited_fields + node.fields) | is_required_builder_arg
    if (!{{field_set_bitmap_name}}.test({{field.builder_bitmap}})) {
      zetasql::internal::UpdateStatus(
          &{{status_member_name}},
          ::zetasql_base::InternalErrorBuilder(ZETASQL_LOC).LogError()
            << "{{node.name}}::{{field.name}} was not set on the builder");
    }
  # endfor

    if ({{status_member_name}}.ok()) {
      return std::move({{inner_node_member_name}});
    }

    return {{status_member_name}};
  }

  // Getters and chained setters
# for field in (node.fields + node.inherited_fields)
 # if field.comment
{{field.comment}}
 # endif
  {{field.getter_return_type}} {{field.name}}() const {
    ZETASQL_DCHECK({{inner_node_member_name}} != nullptr);
    return {{inner_node_member_name}}->{{field.name}}();
  }
  {{ blank_line }}
 # if field.is_vector
  int {{field.name}}_size() const {
    ZETASQL_DCHECK({{inner_node_member_name}} != nullptr);
    return {{inner_node_member_name}}->{{field.name}}_size();
  }

  {{field.element_getter_return_type}} {{field.name}}(int i) const {
    ZETASQL_DCHECK({{inner_node_member_name}} != nullptr);
    return {{inner_node_member_name}}->{{field.name}}(i);
  }
  {{ blank_line }}

  {% set element_storage_type = field.element_storage_type
      if field.is_node_vector else field.element_arg_type %}
  {{- chained_direct_adder(node, field, inner_node_member_name, '&&') -}}
  {{ blank_line }}
  {{- chained_direct_adder(node, field, inner_node_member_name, '&') -}}
  {{ blank_line }}
 # if field.is_node_vector
  {{- chained_builder_adder(
        node=node, field=field,inner_node_member_name=inner_node_member_name,
        status_member_name=status_member_name, ref_qualifier='&&') -}}
  {{ blank_line }}
  {{- chained_builder_adder(
        node=node, field=field,inner_node_member_name=inner_node_member_name,
        status_member_name=status_member_name, ref_qualifier='&') -}}
  {{ blank_line }}
 # endif
 # endif

 # if field.release_return_type
  {{field.member_type}} release_{{field.name}}() {
    return {{inner_node_member_name}}->release_{{field.name}}();
  }
  {{blank_line}}
 # endif

  {{- chained_direct_setter(node, field, inner_node_member_name, '&&') -}}
  {{ blank_line }}
  {{- chained_direct_setter(node, field, inner_node_member_name, '&') -}}
  {{ blank_line }}
 # if field.is_node_ptr or field.is_node_vector
  {{- chained_builder_setter(
        node=node, field=field,inner_node_member_name=inner_node_member_name,
        status_member_name=status_member_name, ref_qualifier='&&') -}}
  {{ blank_line }}
  {{- chained_builder_setter(
        node=node, field=field,inner_node_member_name=inner_node_member_name,
        status_member_name=status_member_name, ref_qualifier='&') -}}
  {{ blank_line }}
 # endif
# endfor

 private:
  std::unique_ptr<{{node.name}}> {{inner_node_member_name}};

  absl::Status {{status_member_name}};
 # if ((node.fields + node.inherited_fields) | is_required_builder_arg)
  std::bitset<{{len(node.fields + node.inherited_fields)}}> {{field_set_bitmap_name}} = {0};
 # endif

  friend {{node.builder_name}} ToBuilder(
      std::unique_ptr<const {{node.name}}> node);

{#// This constructor, which only cares about the node, should stay private as
  // it services both cases of building nodes from scratch and the modification
  // of an existing node:
  //   1. The build from scratch case has all bits cleared in field_set_bitmap
  //   2. ToBuilder() accepts an existing node, and sets all required bits
#}
  {{node.builder_name}}(std::unique_ptr<{{node.name}}> node)
      : {{inner_node_member_name}}(std::move(node)) {
    ZETASQL_DCHECK({{inner_node_member_name}} != nullptr);
  }
};

inline {{node.builder_name}} ToBuilder(
    std::unique_ptr<const {{node.name}}> node) {
  {{node.builder_name}} builder(absl::WrapUnique<{{node.name}}>(
      const_cast<{{node.name}}*>(node.release())));
  // All required nodes are evidently already set
 # for field in (node.inherited_fields + node.fields) | is_required_builder_arg
  builder.{{field_set_bitmap_name}}.set({{field.builder_bitmap}}, true);
 # endfor
  return builder;
}

# endfor
}  // namespace zetasql

#endif  // ZETASQL_RESOLVED_AST_RESOLVED_AST_BUILDER_H_
