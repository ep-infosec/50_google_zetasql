# Parsed as (1<<3) & (2>>1) | ((~2) ^ 2)
# TODO: Remove this after parse locations have been manually
# verified as correct.
[default no_show_parse_location_text]
select 1<<3&2>>1|~2^2
--
QueryStatement [0-21]
  Query [0-21]
    Select [0-21]
      SelectList [7-21]
        SelectColumn [7-21]
          BinaryExpression(|) [7-21]
            BinaryExpression(&) [7-16]
              BitwiseShiftExpression(<<) [7-11]
                IntLiteral(1) [7-8]
                Location [8-10]
                IntLiteral(3) [10-11]
              BitwiseShiftExpression(>>) [12-16]
                IntLiteral(2) [12-13]
                Location [13-15]
                IntLiteral(1) [15-16]
            BinaryExpression(^) [17-21]
              UnaryExpression(~) [17-19]
                IntLiteral(2) [18-19]
              IntLiteral(2) [20-21]
--
SELECT
  1 << 3 & 2 >> 1 | ~2 ^ 2
==

# Left shift and right shift operators are considered as two tokens in the
# JavaCC tokenizer. Not defining separate tokens for shift operators allows us
# to use two or more consecutive right angle brackets at the end during
# STRUCT<...> and ARRAY<...> safely. This is solved differently in the Bison
# parser, using a tokenizer mode for array/struct type constructors.
# We also test the other two-character operators with a space in between.
# The GetParseTokens() test is disabled because the reconstructed query puts
# the << together, which makes the reconstructed query succeed instead of fail.
[no_test_get_parse_tokens]
select 1 {{< <|> >|> =|< =|< >|! =}} 2
--
ALTERNATION GROUP: < <
--
ERROR: Syntax error: Unexpected "<" [at 1:12]
select 1 < < 2
           ^
--
ALTERNATION GROUP: > >
--
ERROR: Syntax error: Unexpected ">" [at 1:12]
select 1 > > 2
           ^
--
ALTERNATION GROUP: > =
--
ERROR: Syntax error: Unexpected "=" [at 1:12]
select 1 > = 2
           ^
--
ALTERNATION GROUP: < =
--
ERROR: Syntax error: Unexpected "=" [at 1:12]
select 1 < = 2
           ^
--
ALTERNATION GROUP: < >
--
ERROR: Syntax error: Unexpected ">" [at 1:12]
select 1 < > 2
           ^
--
ALTERNATION GROUP: ! =
--
ERROR: Syntax error: Expected end of input but got "!" [at 1:10]
select 1 ! = 2
         ^
==

# Parsed as a[1<<a[1 & (a * a[1])]]
select a[1<<a[1&a*a[1]]]
--
QueryStatement [0-24]
  Query [0-24]
    Select [0-24]
      SelectList [7-24]
        SelectColumn [7-24]
          ArrayElement [7-24]
            PathExpression [7-8]
              Identifier(a) [7-8]
            Location [8-9]
            BitwiseShiftExpression(<<) [9-23]
              IntLiteral(1) [9-10]
              Location [10-12]
              ArrayElement [12-23]
                PathExpression [12-13]
                  Identifier(a) [12-13]
                Location [13-14]
                BinaryExpression(&) [14-22]
                  IntLiteral(1) [14-15]
                  BinaryExpression(*) [16-22]
                    PathExpression [16-17]
                      Identifier(a) [16-17]
                    ArrayElement [18-22]
                      PathExpression [18-19]
                        Identifier(a) [18-19]
                      Location [19-20]
                      IntLiteral(1) [20-21]
--
SELECT
  a[1 << a[1 & a * a[1]]]
==

# Parsed as (~a) + b
select ~a+b
--
QueryStatement [0-11]
  Query [0-11]
    Select [0-11]
      SelectList [7-11]
        SelectColumn [7-11]
          BinaryExpression(+) [7-11]
            UnaryExpression(~) [7-9]
              PathExpression [8-9]
                Identifier(a) [8-9]
            PathExpression [10-11]
              Identifier(b) [10-11]
--
SELECT
  ~a + b
==

# Parsed as ((~a)>>b)<<c
select ~a>>b<<c
--
QueryStatement [0-15]
  Query [0-15]
    Select [0-15]
      SelectList [7-15]
        SelectColumn [7-15]
          BitwiseShiftExpression(<<) [7-15]
            BitwiseShiftExpression(>>) [7-12]
              UnaryExpression(~) [7-9]
                PathExpression [8-9]
                  Identifier(a) [8-9]
              Location [9-11]
              PathExpression [11-12]
                Identifier(b) [11-12]
            Location [12-14]
            PathExpression [14-15]
              Identifier(c) [14-15]
--
SELECT
  ~a >> b << c
==

# Parsed as (a|b) OR ((c) AND ((d&e)^f))
select a | b OR c AND d & e ^ f
--
QueryStatement [0-31]
  Query [0-31]
    Select [0-31]
      SelectList [7-31]
        SelectColumn [7-31]
          OrExpr [7-31]
            BinaryExpression(|) [7-12]
              PathExpression [7-8]
                Identifier(a) [7-8]
              PathExpression [11-12]
                Identifier(b) [11-12]
            AndExpr [16-31]
              PathExpression [16-17]
                Identifier(c) [16-17]
              BinaryExpression(^) [22-31]
                BinaryExpression(&) [22-27]
                  PathExpression [22-23]
                    Identifier(d) [22-23]
                  PathExpression [26-27]
                    Identifier(e) [26-27]
                PathExpression [30-31]
                  Identifier(f) [30-31]
--
SELECT
  a | b OR c AND d & e ^ f
==

# Parsed as  ((-(~a))>>(a[b].c))<<(2 + a)
select -~a>>(a[b]).c<<2 + a
--
QueryStatement [0-27]
  Query [0-27]
    Select [0-27]
      SelectList [7-27]
        SelectColumn [7-27]
          BitwiseShiftExpression(<<) [7-27]
            BitwiseShiftExpression(>>) [7-20]
              UnaryExpression(-) [7-10]
                UnaryExpression(~) [8-10]
                  PathExpression [9-10]
                    Identifier(a) [9-10]
              Location [10-12]
              DotIdentifier [12-20]
                ArrayElement [13-17]
                  PathExpression [13-14]
                    Identifier(a) [13-14]
                  Location [14-15]
                  PathExpression [15-16]
                    Identifier(b) [15-16]
                Identifier(c) [19-20]
            Location [20-22]
            BinaryExpression(+) [22-27]
              IntLiteral(2) [22-23]
              PathExpression [26-27]
                Identifier(a) [26-27]
--
SELECT
  -~a >> (a[b]).c << 2 + a
==

# Verifies that we do give parse errors for a malformed bitwise expression
# which would not fit any other expression tree.
# In Bison this gives a parse error on the second > because comparison
# operators are nonassociative according to the ZetaSQL spec. The JavaCC
# parser incorrectly implements comparisons as left associative. (b/29595599)
select 1>3>
--
ERROR: Syntax error: Unexpected ">" [at 1:11]
select 1>3>
          ^
==

# This is not allowed by the spec because > is nonassociative. Regression test
# for b/29595599.
select 1 > 3 > 5
--
ERROR: Syntax error: Unexpected ">" [at 1:14]
select 1 > 3 > 5
             ^
==

select 1>>>>3;
--
ERROR: Syntax error: Unexpected ">>" [at 1:11]
select 1>>>>3;
          ^
