# Tests for the Cloud Spanner DDL.

#######################################################
# CREATE TABLE... PRIMARY KEY... INTERLEAVE IN PARENT #
#######################################################
[language_features=SPANNER_LEGACY_DDL]
create table t1 (a int64) primary key (a) {{|, interleave in parent p}};
--
ALTERNATION GROUP: <empty>
--
CreateTableStatement [0-41] [create table...primary key (a)]
  PathExpression [13-15] [t1]
    Identifier(t1) [13-15] [t1]
  TableElementList [16-25] [(a int64)]
    ColumnDefinition [17-24] [a int64]
      Identifier(a) [17-18] [a]
      SimpleColumnSchema [19-24] [int64]
        PathExpression [19-24] [int64]
          Identifier(int64) [19-24] [int64]
  SpannerTableOptions [26-41] [primary key (a)]
    PrimaryKey(ENFORCED) [26-41] [primary key (a)]
      PrimaryKeyElementList [38-41] [(a)]
        PrimaryKeyElement(ASC) [39-40] [a]
          Identifier(a) [39-40] [a]
--
CREATE TABLE t1
(
  a int64
) PRIMARY KEY(a)
--
ALTERNATION GROUP: , interleave in parent p
--
CreateTableStatement [0-66] [create table...in parent p]
  PathExpression [13-15] [t1]
    Identifier(t1) [13-15] [t1]
  TableElementList [16-25] [(a int64)]
    ColumnDefinition [17-24] [a int64]
      Identifier(a) [17-18] [a]
      SimpleColumnSchema [19-24] [int64]
        PathExpression [19-24] [int64]
          Identifier(int64) [19-24] [int64]
  SpannerTableOptions [26-66] [primary key...in parent p]
    PrimaryKey(ENFORCED) [26-41] [primary key (a)]
      PrimaryKeyElementList [38-41] [(a)]
        PrimaryKeyElement(ASC) [39-40] [a]
          Identifier(a) [39-40] [a]
    SpannerInterleaveClause [42-66] [, interleave in parent p]
      PathExpression [65-66] [p]
        Identifier(p) [65-66] [p]
--
CREATE TABLE t1
(
  a int64
) PRIMARY KEY(a), INTERLEAVE IN PARENT p ON DELETE NO ACTION
==

[language_features=SPANNER_LEGACY_DDL]
create table t1 (a int64) primary key (a),
interleave in parent p on delete {{cascade|no action}};
--
ALTERNATION GROUP: cascade
--
CreateTableStatement [0-83] [create table...delete cascade]
  PathExpression [13-15] [t1]
    Identifier(t1) [13-15] [t1]
  TableElementList [16-25] [(a int64)]
    ColumnDefinition [17-24] [a int64]
      Identifier(a) [17-18] [a]
      SimpleColumnSchema [19-24] [int64]
        PathExpression [19-24] [int64]
          Identifier(int64) [19-24] [int64]
  SpannerTableOptions [26-83] [primary key...delete cascade]
    PrimaryKey(ENFORCED) [26-41] [primary key (a)]
      PrimaryKeyElementList [38-41] [(a)]
        PrimaryKeyElement(ASC) [39-40] [a]
          Identifier(a) [39-40] [a]
    SpannerInterleaveClause [41-83] [, interleave...delete cascade]
      PathExpression [64-65] [p]
        Identifier(p) [64-65] [p]
--
CREATE TABLE t1
(
  a int64
) PRIMARY KEY(a), INTERLEAVE IN PARENT p ON DELETE CASCADE
--
ALTERNATION GROUP: no action
--
CreateTableStatement [0-85] [create table...no action]
  PathExpression [13-15] [t1]
    Identifier(t1) [13-15] [t1]
  TableElementList [16-25] [(a int64)]
    ColumnDefinition [17-24] [a int64]
      Identifier(a) [17-18] [a]
      SimpleColumnSchema [19-24] [int64]
        PathExpression [19-24] [int64]
          Identifier(int64) [19-24] [int64]
  SpannerTableOptions [26-85] [primary key...no action]
    PrimaryKey(ENFORCED) [26-41] [primary key (a)]
      PrimaryKeyElementList [38-41] [(a)]
        PrimaryKeyElement(ASC) [39-40] [a]
          Identifier(a) [39-40] [a]
    SpannerInterleaveClause [41-85] [, interleave...no action]
      PathExpression [64-65] [p]
        Identifier(p) [64-65] [p]
--
CREATE TABLE t1
(
  a int64
) PRIMARY KEY(a), INTERLEAVE IN PARENT p ON DELETE NO ACTION
==

# Unparser output is in ZetaSQL format and is not a valid Spanner DDL due to
# explicit foreign key match/actions.
[language_features=SPANNER_LEGACY_DDL,V_1_3_COLUMN_DEFAULT_VALUE]
create table t1 (
  a int64,
  b string(123),
  c int64 default (a+2),
  d int64 as (a+3) stored,
  e timestamp not null options (allow_commit_timestamp = true),
  constraint con check (c > 1),
  check (d > 2),
  foreign key (c, d) references r (r_c, r_d)
) primary key (a), interleave in parent t2 on delete cascade;
--
CreateTableStatement [0-316] [create table...delete cascade]
  PathExpression [13-15] [t1]
    Identifier(t1) [13-15] [t1]
  TableElementList [16-257] [(   a int64...r_c, r_d) )]
    ColumnDefinition [20-27] [a int64]
      Identifier(a) [20-21] [a]
      SimpleColumnSchema [22-27] [int64]
        PathExpression [22-27] [int64]
          Identifier(int64) [22-27] [int64]
    ColumnDefinition [31-44] [b string(123)]
      Identifier(b) [31-32] [b]
      SimpleColumnSchema [33-44] [string(123)]
        PathExpression [33-39] [string]
          Identifier(string) [33-39] [string]
        TypeParameterList [39-43] [(123]
          IntLiteral(123) [40-43] [123]
    ColumnDefinition [48-69] [c int64 default (a+2)]
      Identifier(c) [48-49] [c]
      SimpleColumnSchema [50-69] [int64 default (a+2)]
        PathExpression [50-55] [int64]
          Identifier(int64) [50-55] [int64]
        BinaryExpression(+) [65-68] [a+2]
          PathExpression [65-66] [a]
            Identifier(a) [65-66] [a]
          IntLiteral(2) [67-68] [2]
    ColumnDefinition [73-96] [d int64 as (a+3) stored]
      Identifier(d) [73-74] [d]
      SimpleColumnSchema [75-96] [int64 as (a+3) stored]
        PathExpression [75-80] [int64]
          Identifier(int64) [75-80] [int64]
        GeneratedColumnInfo(stored_mode=STORED) [81-96] [as (a+3) stored]
          BinaryExpression(+) [85-88] [a+3]
            PathExpression [85-86] [a]
              Identifier(a) [85-86] [a]
            IntLiteral(3) [87-88] [3]
    ColumnDefinition [100-160] [e timestamp...imestamp = true)]
      Identifier(e) [100-101] [e]
      SimpleColumnSchema [102-160] [timestamp..._timestamp = true)]
        PathExpression [102-111] [timestamp]
          Identifier(timestamp) [102-111] [timestamp]
        ColumnAttributeList [112-120] [not null]
          NotNullColumnAttribute [112-120] [not null]
        OptionsList [129-160] [(allow_commit_tim...mp = true)]
          OptionsEntry [130-159] [allow_commit_timestamp = true]
            Identifier(allow_commit_timestamp) [130-152] [allow_commit_timestamp]
            BooleanLiteral(true) [155-159] [true]
    CheckConstraint(ENFORCED) [164-192] [constraint con check (c > 1)]
      BinaryExpression(>) [186-191] [c > 1]
        PathExpression [186-187] [c]
          Identifier(c) [186-187] [c]
        IntLiteral(1) [190-191] [1]
      Identifier(con) [175-178] [con]
    CheckConstraint(ENFORCED) [196-209] [check (d > 2)]
      BinaryExpression(>) [203-208] [d > 2]
        PathExpression [203-204] [d]
          Identifier(d) [203-204] [d]
        IntLiteral(2) [207-208] [2]
    ForeignKey [213-255] [foreign key...(r_c, r_d)]
      ColumnList [225-231] [(c, d)]
        Identifier(c) [226-227] [c]
        Identifier(d) [229-230] [d]
      ForeignKeyReference(MATCH SIMPLE ENFORCED) [232-255] [references r (r_c, r_d)]
        PathExpression [243-244] [r]
          Identifier(r) [243-244] [r]
        ColumnList [245-255] [(r_c, r_d)]
          Identifier(r_c) [246-249] [r_c]
          Identifier(r_d) [251-254] [r_d]
        ForeignKeyActions(ON UPDATE NO ACTION ON DELETE NO ACTION) [255-255] []
  SpannerTableOptions [258-316] [primary key...delete cascade]
    PrimaryKey(ENFORCED) [258-273] [primary key (a)]
      PrimaryKeyElementList [270-273] [(a)]
        PrimaryKeyElement(ASC) [271-272] [a]
          Identifier(a) [271-272] [a]
    SpannerInterleaveClause [273-316] [, interleave...delete cascade]
      PathExpression [296-298] [t2]
        Identifier(t2) [296-298] [t2]
--
CREATE TABLE t1
(
  a int64,
  b string(123),
  c int64 DEFAULT (a + 2),
  d int64 AS (a + 3) STORED,
  e timestamp NOT NULL OPTIONS(allow_commit_timestamp = true),
  CONSTRAINT con CHECK(c > 1) ENFORCED,
  CHECK(d > 2) ENFORCED,
  FOREIGN KEY(c, d) REFERENCES r(r_c, r_d) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION ENFORCED
) PRIMARY KEY(a), INTERLEAVE IN PARENT t2 ON DELETE CASCADE
==

# Spanner DDL parsing is disabled
create table t1 (a int64) primary key (a) {{|, interleave in parent p}};
--
ALTERNATION GROUP: <empty>
--
ERROR: PRIMARY KEY must be defined in the table element list as column attribute or constraint. [at 1:27]
create table t1 (a int64) primary key (a) ;
                          ^
--
ALTERNATION GROUP: , interleave in parent p
--
ERROR: PRIMARY KEY must be defined in the table element list as column attribute or constraint. [at 1:27]
create table t1 (a int64) primary key (a) , interleave in parent p;
                          ^
==

###############################################
# CREATE NULL_FILTERED INDEX... INTERLEAVE IN #
###############################################

[language_features=SPANNER_LEGACY_DDL]
create unique null_filtered index idx on t(c1, c2 asc, c3 desc)
storing (c4, c5), interleave in p
--
CreateIndexStatement(UNIQUE) [0-97] [create unique...nterleave in p]
  PathExpression [34-37] [idx]
    Identifier(idx) [34-37] [idx]
  PathExpression [41-42] [t]
    Identifier(t) [41-42] [t]
  IndexItemList [42-63] [(c1, c2 asc, c3 desc)]
    OrderingExpression(ASC) [43-45] [c1]
      PathExpression [43-45] [c1]
        Identifier(c1) [43-45] [c1]
    OrderingExpression(ASC EXPLICITLY) [47-53] [c2 asc]
      PathExpression [47-49] [c2]
        Identifier(c2) [47-49] [c2]
    OrderingExpression(DESC) [55-62] [c3 desc]
      PathExpression [55-57] [c3]
        Identifier(c3) [55-57] [c3]
  IndexStoringExpressionList [72-80] [(c4, c5)]
    PathExpression [73-75] [c4]
      Identifier(c4) [73-75] [c4]
    PathExpression [77-79] [c5]
      Identifier(c5) [77-79] [c5]
  SpannerInterleaveClause [80-97] [, interleave in p]
    PathExpression [96-97] [p]
      Identifier(p) [96-97] [p]
--
CREATE UNIQUE NULL_FILTERED INDEX idx ON t(c1, c2 ASC, c3 DESC)
STORING(c4, c5), INTERLEAVE IN p
==

[language_features=SPANNER_LEGACY_DDL]
create {{|unique}} {{|null_filtered}} index idx on t(c1)
--
ALTERNATION GROUP: <empty>
--
CreateIndexStatement [0-27] [create   index idx on t(c1)]
  PathExpression [15-18] [idx]
    Identifier(idx) [15-18] [idx]
  PathExpression [22-23] [t]
    Identifier(t) [22-23] [t]
  IndexItemList [23-27] [(c1)]
    OrderingExpression(ASC) [24-26] [c1]
      PathExpression [24-26] [c1]
        Identifier(c1) [24-26] [c1]
--
CREATE INDEX idx ON t(c1)
--
ALTERNATION GROUP: null_filtered
--
CreateIndexStatement [0-40] [create  null_filt...x on t(c1)]
  PathExpression [28-31] [idx]
    Identifier(idx) [28-31] [idx]
  PathExpression [35-36] [t]
    Identifier(t) [35-36] [t]
  IndexItemList [36-40] [(c1)]
    OrderingExpression(ASC) [37-39] [c1]
      PathExpression [37-39] [c1]
        Identifier(c1) [37-39] [c1]
--
CREATE NULL_FILTERED INDEX idx ON t(c1)
--
ALTERNATION GROUP: unique,
--
CreateIndexStatement(UNIQUE) [0-33] [create unique...idx on t(c1)]
  PathExpression [21-24] [idx]
    Identifier(idx) [21-24] [idx]
  PathExpression [28-29] [t]
    Identifier(t) [28-29] [t]
  IndexItemList [29-33] [(c1)]
    OrderingExpression(ASC) [30-32] [c1]
      PathExpression [30-32] [c1]
        Identifier(c1) [30-32] [c1]
--
CREATE UNIQUE INDEX idx ON t(c1)
--
ALTERNATION GROUP: unique,null_filtered
--
CreateIndexStatement(UNIQUE) [0-46] [create unique...idx on t(c1)]
  PathExpression [34-37] [idx]
    Identifier(idx) [34-37] [idx]
  PathExpression [41-42] [t]
    Identifier(t) [41-42] [t]
  IndexItemList [42-46] [(c1)]
    OrderingExpression(ASC) [43-45] [c1]
      PathExpression [43-45] [c1]
        Identifier(c1) [43-45] [c1]
--
CREATE UNIQUE NULL_FILTERED INDEX idx ON t(c1)
==

# Spanner DDL parsing is disabled
create index idx on t(c1), interleave in p
--
ERROR: Syntax error: Expected end of input but got "," [at 1:26]
create index idx on t(c1), interleave in p
                         ^
==

# Spanner DDL parsing is disabled
create {{|unique}} null_filtered index idx on t(c1)
--
ALTERNATION GROUP: <empty>
--
ERROR: null_filtered is not a supported object type [at 1:9]
create  null_filtered index idx on t(c1)
        ^
--
ALTERNATION GROUP: unique
--
ERROR: null_filtered is not a supported object type [at 1:15]
create unique null_filtered index idx on t(c1)
              ^
==

#################################
# CREATE TABLE with no elements #
#################################

[language_features=SPANNER_LEGACY_DDL]
create table t() primary key()
--
CreateTableStatement [0-30] [create table t() primary key()]
  PathExpression [13-14] [t]
    Identifier(t) [13-14] [t]
  TableElementList [14-16] [()]
  SpannerTableOptions [17-30] [primary key()]
    PrimaryKey(ENFORCED) [17-30] [primary key()]
--
CREATE TABLE t
(
) PRIMARY KEY()
==

# Spanner DDL parsing is disabled
create table t() primary key()
--
ERROR: A table must define at least one column. [at 1:16]
create table t() primary key()
               ^
==

###############
# ALTER TABLE #
###############

[language_features=SPANNER_LEGACY_DDL]
alter table tbl add column col int64;
--
AlterTableStatement [0-36] [alter table...col int64]
  PathExpression [12-15] [tbl]
    Identifier(tbl) [12-15] [tbl]
  AlterActionList [16-36] [add column col int64]
    AddColumnAction [16-36] [add column col int64]
      ColumnDefinition [27-36] [col int64]
        Identifier(col) [27-30] [col]
        SimpleColumnSchema [31-36] [int64]
          PathExpression [31-36] [int64]
            Identifier(int64) [31-36] [int64]
--
ALTER TABLE tbl ADD COLUMN col int64
==

[language_features=SPANNER_LEGACY_DDL][no_test_unparse]
alter table tbl add column
e timestamp not null options (allow_commit_timestamp = true);
--
AlterTableStatement [0-87] [alter table...imestamp = true)]
  PathExpression [12-15] [tbl]
    Identifier(tbl) [12-15] [tbl]
  AlterActionList [16-87] [add column...timestamp = true)]
    AddColumnAction [16-87] [add column...timestamp = true)]
      ColumnDefinition [27-87] [e timestamp...imestamp = true)]
        Identifier(e) [27-28] [e]
        SimpleColumnSchema [29-87] [timestamp..._timestamp = true)]
          PathExpression [29-38] [timestamp]
            Identifier(timestamp) [29-38] [timestamp]
          ColumnAttributeList [39-47] [not null]
            NotNullColumnAttribute [39-47] [not null]
          OptionsList [56-87] [(allow_commit_tim...mp = true)]
            OptionsEntry [57-86] [allow_commit_timestamp = true]
              Identifier(allow_commit_timestamp) [57-79] [allow_commit_timestamp]
              BooleanLiteral(true) [82-86] [true]
==

[language_features=SPANNER_LEGACY_DDL,V_1_3_COLUMN_DEFAULT_VALUE]
alter table tbl {{alter|add}} column col int64 default (x+2);
--
ALTERNATION GROUP: alter
--
AlterTableStatement [0-52] [alter table...default (x+2)]
  PathExpression [12-15] [tbl]
    Identifier(tbl) [12-15] [tbl]
  AlterActionList [16-52] [alter column...default (x+2)]
    SpannerAlterColumnAction [16-52] [alter column...default (x+2)]
      ColumnDefinition [29-52] [col int64 default (x+2)]
        Identifier(col) [29-32] [col]
        SimpleColumnSchema [33-52] [int64 default (x+2)]
          PathExpression [33-38] [int64]
            Identifier(int64) [33-38] [int64]
          BinaryExpression(+) [48-51] [x+2]
            PathExpression [48-49] [x]
              Identifier(x) [48-49] [x]
            IntLiteral(2) [50-51] [2]
--
ALTER TABLE tbl ALTER COLUMN col int64 DEFAULT (x + 2)
--
ALTERNATION GROUP: add
--
AlterTableStatement [0-50] [alter table...default (x+2)]
  PathExpression [12-15] [tbl]
    Identifier(tbl) [12-15] [tbl]
  AlterActionList [16-50] [add column...default (x+2)]
    AddColumnAction [16-50] [add column...default (x+2)]
      ColumnDefinition [27-50] [col int64 default (x+2)]
        Identifier(col) [27-30] [col]
        SimpleColumnSchema [31-50] [int64 default (x+2)]
          PathExpression [31-36] [int64]
            Identifier(int64) [31-36] [int64]
          BinaryExpression(+) [46-49] [x+2]
            PathExpression [46-47] [x]
              Identifier(x) [46-47] [x]
            IntLiteral(2) [48-49] [2]
--
ALTER TABLE tbl ADD COLUMN col int64 DEFAULT (x + 2)
==

[language_features=SPANNER_LEGACY_DDL]
alter table tbl drop column col;
--
AlterTableStatement [0-31] [alter table...column col]
  PathExpression [12-15] [tbl]
    Identifier(tbl) [12-15] [tbl]
  AlterActionList [16-31] [drop column col]
    DropColumnAction [16-31] [drop column col]
      Identifier(col) [28-31] [col]
--
ALTER TABLE tbl DROP COLUMN col
==

[language_features=SPANNER_LEGACY_DDL]
alter table t set on delete {{cascade|no action}};
--
ALTERNATION GROUP: cascade
--
AlterTableStatement [0-35] [alter table...delete cascade]
  PathExpression [12-13] [t]
    Identifier(t) [12-13] [t]
  AlterActionList [14-35] [set on delete cascade]
    SpannerSetOnDeleteAction [14-35] [set on delete cascade]
--
ALTER TABLE t SET ON DELETE CASCADE
--
ALTERNATION GROUP: no action
--
AlterTableStatement [0-37] [alter table...no action]
  PathExpression [12-13] [t]
    Identifier(t) [12-13] [t]
  AlterActionList [14-37] [set on delete no action]
    SpannerSetOnDeleteAction [14-37] [set on delete no action]
--
ALTER TABLE t SET ON DELETE NO ACTION
==

[language_features=SPANNER_LEGACY_DDL]
alter table t alter column col int64;
--
AlterTableStatement [0-36] [alter table...col int64]
  PathExpression [12-13] [t]
    Identifier(t) [12-13] [t]
  AlterActionList [14-36] [alter column col int64]
    SpannerAlterColumnAction [14-36] [alter column col int64]
      ColumnDefinition [27-36] [col int64]
        Identifier(col) [27-30] [col]
        SimpleColumnSchema [31-36] [int64]
          PathExpression [31-36] [int64]
            Identifier(int64) [31-36] [int64]
--
ALTER TABLE t ALTER COLUMN col int64
==

[language_features=SPANNER_LEGACY_DDL]
alter table t alter column if exists col int64;
--
ERROR: Syntax error: IF EXISTS is not supported [at 1:28]
alter table t alter column if exists col int64;
                           ^
==

# Spanner expects default expression parenthesized, so this DDL is invalid.
# This will be checked in translator.
[language_features=SPANNER_LEGACY_DDL,V_1_3_COLUMN_DEFAULT_VALUE]
alter table t {{add|alter}} column col int64 default x+2;
--
ALTERNATION GROUP: add
--
AlterTableStatement [0-46] [alter table...default x+2]
  PathExpression [12-13] [t]
    Identifier(t) [12-13] [t]
  AlterActionList [14-46] [add column...default x+2]
    AddColumnAction [14-46] [add column...default x+2]
      ColumnDefinition [25-46] [col int64 default x+2]
        Identifier(col) [25-28] [col]
        SimpleColumnSchema [29-46] [int64 default x+2]
          PathExpression [29-34] [int64]
            Identifier(int64) [29-34] [int64]
          BinaryExpression(+) [43-46] [x+2]
            PathExpression [43-44] [x]
              Identifier(x) [43-44] [x]
            IntLiteral(2) [45-46] [2]
--
ALTER TABLE t ADD COLUMN col int64 DEFAULT x + 2
--
ALTERNATION GROUP: alter
--
AlterTableStatement [0-48] [alter table...default x+2]
  PathExpression [12-13] [t]
    Identifier(t) [12-13] [t]
  AlterActionList [14-48] [alter column...default x+2]
    SpannerAlterColumnAction [14-48] [alter column...default x+2]
      ColumnDefinition [27-48] [col int64 default x+2]
        Identifier(col) [27-30] [col]
        SimpleColumnSchema [31-48] [int64 default x+2]
          PathExpression [31-36] [int64]
            Identifier(int64) [31-36] [int64]
          BinaryExpression(+) [45-48] [x+2]
            PathExpression [45-46] [x]
              Identifier(x) [45-46] [x]
            IntLiteral(2) [47-48] [2]
--
ALTER TABLE t ALTER COLUMN col int64 DEFAULT x + 2
==

# Unparsing is disabled because unparsed DDL is not a valid Spanner DDL due to
# reversed order of NOT NULL and DEFAULT/GENERATED.
[language_features=SPANNER_LEGACY_DDL,V_1_3_COLUMN_DEFAULT_VALUE][no_test_unparse]
alter table t
alter column col int64 {{|not null}} {{|default (x+2)|as (x+2) stored}};
--
ALTERNATION GROUP: <empty>
--
AlterTableStatement [0-36] [alter table...col int64]
  PathExpression [12-13] [t]
    Identifier(t) [12-13] [t]
  AlterActionList [14-36] [alter column col int64]
    SpannerAlterColumnAction [14-36] [alter column col int64]
      ColumnDefinition [27-36] [col int64]
        Identifier(col) [27-30] [col]
        SimpleColumnSchema [31-36] [int64]
          PathExpression [31-36] [int64]
            Identifier(int64) [31-36] [int64]
--
ALTERNATION GROUP: default (x+2)
--
AlterTableStatement [0-51] [alter table...default (x+2)]
  PathExpression [12-13] [t]
    Identifier(t) [12-13] [t]
  AlterActionList [14-51] [alter column...default (x+2)]
    SpannerAlterColumnAction [14-51] [alter column...default (x+2)]
      ColumnDefinition [27-51] [col int64  default (x+2)]
        Identifier(col) [27-30] [col]
        SimpleColumnSchema [31-51] [int64  default (x+2)]
          PathExpression [31-36] [int64]
            Identifier(int64) [31-36] [int64]
          BinaryExpression(+) [47-50] [x+2]
            PathExpression [47-48] [x]
              Identifier(x) [47-48] [x]
            IntLiteral(2) [49-50] [2]
--
ALTERNATION GROUP: as (x+2) stored
--
AlterTableStatement [0-53] [alter table...+2) stored]
  PathExpression [12-13] [t]
    Identifier(t) [12-13] [t]
  AlterActionList [14-53] [alter column...+2) stored]
    SpannerAlterColumnAction [14-53] [alter column...+2) stored]
      ColumnDefinition [27-53] [col int64  as (x+2) stored]
        Identifier(col) [27-30] [col]
        SimpleColumnSchema [31-53] [int64  as (x+2) stored]
          PathExpression [31-36] [int64]
            Identifier(int64) [31-36] [int64]
          GeneratedColumnInfo(stored_mode=STORED) [38-53] [as (x+2) stored]
            BinaryExpression(+) [42-45] [x+2]
              PathExpression [42-43] [x]
                Identifier(x) [42-43] [x]
              IntLiteral(2) [44-45] [2]
--
ALTERNATION GROUP: not null,
--
AlterTableStatement [0-45] [alter table...int64 not null]
  PathExpression [12-13] [t]
    Identifier(t) [12-13] [t]
  AlterActionList [14-45] [alter column...int64 not null]
    SpannerAlterColumnAction [14-45] [alter column...int64 not null]
      ColumnDefinition [27-45] [col int64 not null]
        Identifier(col) [27-30] [col]
        SimpleColumnSchema [31-45] [int64 not null]
          PathExpression [31-36] [int64]
            Identifier(int64) [31-36] [int64]
          ColumnAttributeList [37-45] [not null]
            NotNullColumnAttribute [37-45] [not null]
--
ALTERNATION GROUP: not null,default (x+2)
--
AlterTableStatement [0-59] [alter table...default (x+2)]
  PathExpression [12-13] [t]
    Identifier(t) [12-13] [t]
  AlterActionList [14-59] [alter column...default (x+2)]
    SpannerAlterColumnAction [14-59] [alter column...default (x+2)]
      ColumnDefinition [27-59] [col int64...default (x+2)]
        Identifier(col) [27-30] [col]
        SimpleColumnSchema [31-59] [int64 not null default (x+2)]
          PathExpression [31-36] [int64]
            Identifier(int64) [31-36] [int64]
          BinaryExpression(+) [55-58] [x+2]
            PathExpression [55-56] [x]
              Identifier(x) [55-56] [x]
            IntLiteral(2) [57-58] [2]
          ColumnAttributeList [37-45] [not null]
            NotNullColumnAttribute [37-45] [not null]
--
ALTERNATION GROUP: not null,as (x+2) stored
--
AlterTableStatement [0-61] [alter table...+2) stored]
  PathExpression [12-13] [t]
    Identifier(t) [12-13] [t]
  AlterActionList [14-61] [alter column...+2) stored]
    SpannerAlterColumnAction [14-61] [alter column...+2) stored]
      ColumnDefinition [27-61] [col int64...+2) stored]
        Identifier(col) [27-30] [col]
        SimpleColumnSchema [31-61] [int64 not null as (x+2) stored]
          PathExpression [31-36] [int64]
            Identifier(int64) [31-36] [int64]
          GeneratedColumnInfo(stored_mode=STORED) [46-61] [as (x+2) stored]
            BinaryExpression(+) [50-53] [x+2]
              PathExpression [50-51] [x]
                Identifier(x) [50-51] [x]
              IntLiteral(2) [52-53] [2]
          ColumnAttributeList [37-45] [not null]
            NotNullColumnAttribute [37-45] [not null]
==

[language_features=SPANNER_LEGACY_DDL]
alter table t alter column col
set options (allow_commit_timestamp={{null|true|false}});
--
ALTERNATION GROUP: null
--
AlterTableStatement [0-72] [alter table..._timestamp=null)]
  PathExpression [12-13] [t]
    Identifier(t) [12-13] [t]
  AlterActionList [14-72] [alter column...timestamp=null)]
    AlterColumnOptionsAction [14-72] [alter column...timestamp=null)]
      Identifier(col) [27-30] [col]
      OptionsList [43-72] [(allow_commit_timestamp=null)]
        OptionsEntry [44-71] [allow_commit_timestamp=null]
          Identifier(allow_commit_timestamp) [44-66] [allow_commit_timestamp]
          NullLiteral(null) [67-71] [null]
--
ALTER TABLE t ALTER COLUMN col SET OPTIONS(allow_commit_timestamp = null)
--
ALTERNATION GROUP: true
--
AlterTableStatement [0-72] [alter table..._timestamp=true)]
  PathExpression [12-13] [t]
    Identifier(t) [12-13] [t]
  AlterActionList [14-72] [alter column...timestamp=true)]
    AlterColumnOptionsAction [14-72] [alter column...timestamp=true)]
      Identifier(col) [27-30] [col]
      OptionsList [43-72] [(allow_commit_timestamp=true)]
        OptionsEntry [44-71] [allow_commit_timestamp=true]
          Identifier(allow_commit_timestamp) [44-66] [allow_commit_timestamp]
          BooleanLiteral(true) [67-71] [true]
--
ALTER TABLE t ALTER COLUMN col SET OPTIONS(allow_commit_timestamp = true)
--
ALTERNATION GROUP: false
--
AlterTableStatement [0-73] [alter table...timestamp=false)]
  PathExpression [12-13] [t]
    Identifier(t) [12-13] [t]
  AlterActionList [14-73] [alter column...imestamp=false)]
    AlterColumnOptionsAction [14-73] [alter column...imestamp=false)]
      Identifier(col) [27-30] [col]
      OptionsList [43-73] [(allow_commit_timestamp=false)]
        OptionsEntry [44-72] [allow_commit_timestamp=false]
          Identifier(allow_commit_timestamp) [44-66] [allow_commit_timestamp]
          BooleanLiteral(false) [67-72] [false]
--
ALTER TABLE t ALTER COLUMN col SET OPTIONS(allow_commit_timestamp = false)
==

[language_features=SPANNER_LEGACY_DDL]
alter table t alter column col set default (x+2);
--
AlterTableStatement [0-48] [alter table...default (x+2)]
  PathExpression [12-13] [t]
    Identifier(t) [12-13] [t]
  AlterActionList [14-48] [alter column...default (x+2)]
    AlterColumnSetDefaultAction [14-48] [alter column...default (x+2)]
      Identifier(col) [27-30] [col]
      BinaryExpression(+) [44-47] [x+2]
        PathExpression [44-45] [x]
          Identifier(x) [44-45] [x]
        IntLiteral(2) [46-47] [2]
--
ALTER TABLE t ALTER COLUMN col SET DEFAULT(x + 2)
==

[language_features=SPANNER_LEGACY_DDL]
alter table t alter column col drop default;
--
AlterTableStatement [0-43] [alter table...drop default]
  PathExpression [12-13] [t]
    Identifier(t) [12-13] [t]
  AlterActionList [14-43] [alter column col drop default]
    AlterColumnDropDefaultAction [14-43] [alter column col drop default]
      Identifier(col) [27-30] [col]
--
ALTER TABLE t ALTER COLUMN col DROP DEFAULT
==

[language_features=SPANNER_LEGACY_DDL,V_1_3_COLUMN_DEFAULT_VALUE][no_test_unparse]
alter table tbl alter column col int64 not null default (x+2), drop column col;
--
AlterTableStatement [0-78] [alter table...column col]
  PathExpression [12-15] [tbl]
    Identifier(tbl) [12-15] [tbl]
  AlterActionList [16-78] [alter column...column col]
    SpannerAlterColumnAction [16-61] [alter column...default (x+2)]
      ColumnDefinition [29-61] [col int64...default (x+2)]
        Identifier(col) [29-32] [col]
        SimpleColumnSchema [33-61] [int64 not null default (x+2)]
          PathExpression [33-38] [int64]
            Identifier(int64) [33-38] [int64]
          BinaryExpression(+) [57-60] [x+2]
            PathExpression [57-58] [x]
              Identifier(x) [57-58] [x]
            IntLiteral(2) [59-60] [2]
          ColumnAttributeList [39-47] [not null]
            NotNullColumnAttribute [39-47] [not null]
    DropColumnAction [63-78] [drop column col]
      Identifier(col) [75-78] [col]
==

# Spanner DDL parsing is disabled
alter table t set on delete cascade;
--
ERROR: Syntax error: Unexpected keyword ON [at 1:19]
alter table t set on delete cascade;
                  ^
==

# Spanner DDL parsing is disabled
# Added variability to make sure parser errors out in correct location.
[language_features=V_1_3_COLUMN_DEFAULT_VALUE]
alter table t
alter column col int64 {{|not null}} {{|default (x+2)|as (x+2) stored}};
--
ALTERNATION GROUP: <empty>
--
ERROR: Expected keyword DROP or keyword SET but got identifier [at 2:18]
alter column col int64  ;
                 ^
--
ALTERNATION GROUP: default (x+2)
--
ERROR: Expected keyword DROP or keyword SET but got identifier [at 2:18]
alter column col int64  default (x+2);
                 ^
--
ALTERNATION GROUP: as (x+2) stored
--
ERROR: Expected keyword DROP or keyword SET but got identifier [at 2:18]
alter column col int64  as (x+2) stored;
                 ^
--
ALTERNATION GROUP: not null,
--
ERROR: Expected keyword DROP or keyword SET but got identifier [at 2:18]
alter column col int64 not null ;
                 ^
--
ALTERNATION GROUP: not null,default (x+2)
--
ERROR: Expected keyword DROP or keyword SET but got identifier [at 2:18]
alter column col int64 not null default (x+2);
                 ^
--
ALTERNATION GROUP: not null,as (x+2) stored
--
ERROR: Expected keyword DROP or keyword SET but got identifier [at 2:18]
alter column col int64 not null as (x+2) stored;
                 ^
==
