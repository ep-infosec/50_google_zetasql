# Parenthesized query expressions need to be checked in multiple plases:
#  - as top-level queries
#  - as FROM-clause subqueries
#  - as expression subqueries
#  - for conflicts with parenthesized joins
#  - for conflicts with parenthesized expressions
#  - for conflicts with struct construction
# The lookahead may differ in these cases, affecting how the parser interprets
# leading ( characters.

(select 1)
--
QueryStatement [0-10] [(select 1)]
  Query [0-10] [(select 1)]
    Query [1-9] [select 1]
      Select [1-9] [select 1]
        SelectList [8-9] [1]
          SelectColumn [8-9] [1]
            IntLiteral(1) [8-9] [1]
--
(
SELECT
  1
)
==

((((select 1))))
--
QueryStatement [0-16] [((((select 1))))]
  Query [0-16] [((((select 1))))]
    Query [1-15] [(((select 1)))]
      Query [2-14] [((select 1))]
        Query [3-13] [(select 1)]
          Query [4-12] [select 1]
            Select [4-12] [select 1]
              SelectList [11-12] [1]
                SelectColumn [11-12] [1]
                  IntLiteral(1) [11-12] [1]
--
((((
SELECT
  1
))))
==

(select 1) limit 1
--
QueryStatement [0-18] [(select 1) limit 1]
  Query [0-18] [(select 1) limit 1]
    Query [1-9] [select 1]
      Select [1-9] [select 1]
        SelectList [8-9] [1]
          SelectColumn [8-9] [1]
            IntLiteral(1) [8-9] [1]
    LimitOffset [11-18] [limit 1]
      IntLiteral(1) [17-18] [1]
--
(
SELECT
  1
)
LIMIT 1
==

# Using parentheses to reverse the order of limit and order by.
(((select 1) limit 3) order by 1 desc)
--
QueryStatement [0-38] [(((select...by 1 desc)]
  Query [0-38] [(((select...by 1 desc)]
    Query [1-37] [((select 1...by 1 desc]
      Query [2-20] [(select 1) limit 3]
        Query [3-11] [select 1]
          Select [3-11] [select 1]
            SelectList [10-11] [1]
              SelectColumn [10-11] [1]
                IntLiteral(1) [10-11] [1]
        LimitOffset [13-20] [limit 3]
          IntLiteral(3) [19-20] [3]
      OrderBy [22-37] [order by 1 desc]
        OrderingExpression(DESC) [31-37] [1 desc]
          IntLiteral(1) [31-32] [1]
--
(((
SELECT
  1
)
LIMIT 3)
ORDER BY 1 DESC)
==

((select 1) union all (select 2 union all (select 3 union all select 4)))
--
QueryStatement [0-73] [((select 1...select 4)))]
  Query [0-73] [((select 1...select 4)))]
    Query [1-72] [(select 1)...select 4))]
      SetOperation(UNION ALL) [1-72] [(select 1)...select 4))]
        Query [2-10] [select 1]
          Select [2-10] [select 1]
            SelectList [9-10] [1]
              SelectColumn [9-10] [1]
                IntLiteral(1) [9-10] [1]
        Query [23-71] [select 2 union...select 4)]
          SetOperation(UNION ALL) [23-71] [select 2 union...select 4)]
            Select [23-31] [select 2]
              SelectList [30-31] [2]
                SelectColumn [30-31] [2]
                  IntLiteral(2) [30-31] [2]
            Query [43-70] [select 3 union all select 4]
              SetOperation(UNION ALL) [43-70] [select 3 union all select 4]
                Select [43-51] [select 3]
                  SelectList [50-51] [3]
                    SelectColumn [50-51] [3]
                      IntLiteral(3) [50-51] [3]
                Select [62-70] [select 4]
                  SelectList [69-70] [4]
                    SelectColumn [69-70] [4]
                      IntLiteral(4) [69-70] [4]
--
((
SELECT
  1
) UNION ALL(
SELECT
  2
UNION ALL(
SELECT
  3
UNION ALL
SELECT
  4
)))
==

(select 1 from x limit 1) union all (select 2 from y order by 1)
order by 1
limit 10
--
QueryStatement [0-84] [(select 1...1 limit 10]
  Query [0-84] [(select 1...1 limit 10]
    SetOperation(UNION ALL) [0-64] [(select 1...order by 1)]
      Query [1-24] [select 1 from x limit 1]
        Select [1-16] [select 1 from x]
          SelectList [8-9] [1]
            SelectColumn [8-9] [1]
              IntLiteral(1) [8-9] [1]
          FromClause [10-16] [from x]
            TablePathExpression [15-16] [x]
              PathExpression [15-16] [x]
                Identifier(x) [15-16] [x]
        LimitOffset [17-24] [limit 1]
          IntLiteral(1) [23-24] [1]
      Query [37-63] [select 2 from y order by 1]
        Select [37-52] [select 2 from y]
          SelectList [44-45] [2]
            SelectColumn [44-45] [2]
              IntLiteral(2) [44-45] [2]
          FromClause [46-52] [from y]
            TablePathExpression [51-52] [y]
              PathExpression [51-52] [y]
                Identifier(y) [51-52] [y]
        OrderBy [53-63] [order by 1]
          OrderingExpression(ASC) [62-63] [1]
            IntLiteral(1) [62-63] [1]
    OrderBy [65-75] [order by 1]
      OrderingExpression(ASC) [74-75] [1]
        IntLiteral(1) [74-75] [1]
    LimitOffset [76-84] [limit 10]
      IntLiteral(10) [82-84] [10]
--
(
SELECT
  1
FROM
  x
LIMIT 1) UNION ALL(
SELECT
  2
FROM
  y
ORDER BY 1)
ORDER BY 1
LIMIT 10
==

# The outer () here get interpreted as expression grouping.
select ((select 1)), ((((select 2))))
--
QueryStatement [0-37] [select ((select...select 2))))]
  Query [0-37] [select ((select...select 2))))]
    Select [0-37] [select ((select...select 2))))]
      SelectList [7-37] [((select 1)), ((((select 2))))]
        SelectColumn [7-19] [((select 1))]
          ExpressionSubquery [8-18] [(select 1)]
            Query [9-17] [select 1]
              Select [9-17] [select 1]
                SelectList [16-17] [1]
                  SelectColumn [16-17] [1]
                    IntLiteral(1) [16-17] [1]
        SelectColumn [21-37] [((((select 2))))]
          ExpressionSubquery [24-34] [(select 2)]
            Query [25-33] [select 2]
              Select [25-33] [select 2]
                SelectList [32-33] [2]
                  SelectColumn [32-33] [2]
                    IntLiteral(2) [32-33] [2]
--
SELECT
  (
    SELECT
      1
  ),
  (
    SELECT
      2
  )
==

select ((select 1) + (select 2))
--
QueryStatement [0-32] [select ((select...select 2))]
  Query [0-32] [select ((select...select 2))]
    Select [0-32] [select ((select...select 2))]
      SelectList [7-32] [((select 1) + (select 2))]
        SelectColumn [7-32] [((select 1) + (select 2))]
          BinaryExpression(+) [8-31] [(select 1) + (select 2)]
            ExpressionSubquery [8-18] [(select 1)]
              Query [9-17] [select 1]
                Select [9-17] [select 1]
                  SelectList [16-17] [1]
                    SelectColumn [16-17] [1]
                      IntLiteral(1) [16-17] [1]
            ExpressionSubquery [21-31] [(select 2)]
              Query [22-30] [select 2]
                Select [22-30] [select 2]
                  SelectList [29-30] [2]
                    SelectColumn [29-30] [2]
                      IntLiteral(2) [29-30] [2]
--
SELECT
  ((
    SELECT
      1
  ) + (
    SELECT
      2
  ))
==

select ((select 1), (select 2))
--
QueryStatement [0-31] [select ((select...select 2))]
  Query [0-31] [select ((select...select 2))]
    Select [0-31] [select ((select...select 2))]
      SelectList [7-31] [((select 1), (select 2))]
        SelectColumn [7-31] [((select 1), (select 2))]
          StructConstructorWithParens [7-31] [((select 1), (select 2))]
            ExpressionSubquery [8-18] [(select 1)]
              Query [9-17] [select 1]
                Select [9-17] [select 1]
                  SelectList [16-17] [1]
                    SelectColumn [16-17] [1]
                      IntLiteral(1) [16-17] [1]
            ExpressionSubquery [20-30] [(select 2)]
              Query [21-29] [select 2]
                Select [21-29] [select 2]
                  SelectList [28-29] [2]
                    SelectColumn [28-29] [2]
                      IntLiteral(2) [28-29] [2]
--
SELECT
  ((
      SELECT
        1
    ), (
      SELECT
        2
    ))
==

# This case requires the special lookahead in operand() to determine
# that the outer ( is a subquery, not expression grouping.
# With the ARRAY modifier, we know it must be a subquery.
select {{|ARRAY}} ((select 1) union all (select 2))
--
ALTERNATION GROUP: <empty>
--
QueryStatement [0-41] [select  ((...select 2))]
  Query [0-41] [select  ((...select 2))]
    Select [0-41] [select  ((...select 2))]
      SelectList [8-41] [((select 1...select 2))]
        SelectColumn [8-41] [((select 1...select 2))]
          ExpressionSubquery [8-41] [((select 1...select 2))]
            Query [9-40] [(select 1)...(select 2)]
              SetOperation(UNION ALL) [9-40] [(select 1)...(select 2)]
                Query [10-18] [select 1]
                  Select [10-18] [select 1]
                    SelectList [17-18] [1]
                      SelectColumn [17-18] [1]
                        IntLiteral(1) [17-18] [1]
                Query [31-39] [select 2]
                  Select [31-39] [select 2]
                    SelectList [38-39] [2]
                      SelectColumn [38-39] [2]
                        IntLiteral(2) [38-39] [2]
--
SELECT
  ((
    SELECT
      1
    ) UNION ALL(
    SELECT
      2
    ))
--
ALTERNATION GROUP: ARRAY
--
QueryStatement [0-46] [select ARRAY...select 2))]
  Query [0-46] [select ARRAY...select 2))]
    Select [0-46] [select ARRAY...select 2))]
      SelectList [7-46] [ARRAY ((select...select 2))]
        SelectColumn [7-46] [ARRAY ((select...select 2))]
          ExpressionSubquery(modifier=ARRAY) [7-46] [ARRAY ((select...select 2))]
            Query [14-45] [(select 1)...(select 2)]
              SetOperation(UNION ALL) [14-45] [(select 1)...(select 2)]
                Query [15-23] [select 1]
                  Select [15-23] [select 1]
                    SelectList [22-23] [1]
                      SelectColumn [22-23] [1]
                        IntLiteral(1) [22-23] [1]
                Query [36-44] [select 2]
                  Select [36-44] [select 2]
                    SelectList [43-44] [2]
                      SelectColumn [43-44] [2]
                        IntLiteral(2) [43-44] [2]
--
SELECT
  ARRAY((
    SELECT
      1
    ) UNION ALL(
    SELECT
      2
    ))
==

# The same case, but made extra tricky because the decision is after closing two
# parentheses instead of just one.
# For some reason the JavaCC parser produces an extra level of Query objects
# for the parenthesized ((select)). This is not needed, and the Bison parser
# doesn't produce it.
select {{|ARRAY}} (((select 1)) union all (select 2))
--
ALTERNATION GROUP: <empty>
--
QueryStatement [0-43] [select  ((...select 2))]
  Query [0-43] [select  ((...select 2))]
    Select [0-43] [select  ((...select 2))]
      SelectList [8-43] [(((select...select 2))]
        SelectColumn [8-43] [(((select...select 2))]
          ExpressionSubquery [8-43] [(((select...select 2))]
            Query [9-42] [((select 1...(select 2)]
              SetOperation(UNION ALL) [9-42] [((select 1...(select 2)]
                Query [11-19] [select 1]
                  Select [11-19] [select 1]
                    SelectList [18-19] [1]
                      SelectColumn [18-19] [1]
                        IntLiteral(1) [18-19] [1]
                Query [33-41] [select 2]
                  Select [33-41] [select 2]
                    SelectList [40-41] [2]
                      SelectColumn [40-41] [2]
                        IntLiteral(2) [40-41] [2]
--
SELECT
  ((
    SELECT
      1
    ) UNION ALL(
    SELECT
      2
    ))
--
ALTERNATION GROUP: ARRAY
--
QueryStatement [0-48] [select ARRAY...select 2))]
  Query [0-48] [select ARRAY...select 2))]
    Select [0-48] [select ARRAY...select 2))]
      SelectList [7-48] [ARRAY (((select...select 2))]
        SelectColumn [7-48] [ARRAY (((select...select 2))]
          ExpressionSubquery(modifier=ARRAY) [7-48] [ARRAY (((select...select 2))]
            Query [14-47] [((select 1...(select 2)]
              SetOperation(UNION ALL) [14-47] [((select 1...(select 2)]
                Query [15-25] [(select 1)]
                  Query [16-24] [select 1]
                    Select [16-24] [select 1]
                      SelectList [23-24] [1]
                        SelectColumn [23-24] [1]
                          IntLiteral(1) [23-24] [1]
                Query [38-46] [select 2]
                  Select [38-46] [select 2]
                    SelectList [45-46] [2]
                      SelectColumn [45-46] [2]
                        IntLiteral(2) [45-46] [2]
--
SELECT
  ARRAY(((
    SELECT
      1
    )) UNION ALL(
    SELECT
      2
    ))
==

# This is an inconsistent case. (1+1) can only be a parenthesized expression,
# but then it is UNION ALLed. The JavaCC parser tries all possible scenarios and
# only sees that the entire thing is inconsistent. The Bison parser sees the
# inconsistency at the point where it happens, because at that point it tries to
# force the left hand side of the UNION ALL into being a query. However, we
# don't give the error there because what follows may not at all look like a
# relational operator.
# TODO: Make this error message or location better.
select {{|ARRAY}} (((1+1)) union all (select 2))
--
ALTERNATION GROUP: <empty>
--
ERROR: Syntax error: Parenthesized expression cannot be parsed as an expression, struct constructor, or subquery [at 1:10]
select  (((1+1)) union all (select 2))
         ^
--
ALTERNATION GROUP: ARRAY
--
ERROR: Syntax error: Expected "(" or keyword SELECT or keyword WITH but got integer literal "1" [at 1:17]
select ARRAY (((1+1)) union all (select 2))
                ^
==

# This case has the same prefix, but it is consistent after the double
# parentheses.
select (((1+1)) + (1 + 1))
--
QueryStatement [0-26] [select (((1+1)) + (1 + 1))]
  Query [0-26] [select (((1+1)) + (1 + 1))]
    Select [0-26] [select (((1+1)) + (1 + 1))]
      SelectList [7-26] [(((1+1)) + (1 + 1))]
        SelectColumn [7-26] [(((1+1)) + (1 + 1))]
          BinaryExpression(+) [8-25] [((1+1)) + (1 + 1)]
            BinaryExpression(+) [10-13] [1+1]
              IntLiteral(1) [10-11] [1]
              IntLiteral(1) [12-13] [1]
            BinaryExpression(+) [19-24] [1 + 1]
              IntLiteral(1) [19-20] [1]
              IntLiteral(1) [23-24] [1]
--
SELECT
  ((1 + 1) + (1 + 1))
==

# This is the reverse of the previous inconsistency. The first parenthesized
# thing must be an expression subquery, but it is then followed by a +. This is
# actually not inconsistent: the first part is then treated as a scalar
# subquery.
select ((SELECT 1) + 1)
--
QueryStatement [0-23] [select ((SELECT 1) + 1)]
  Query [0-23] [select ((SELECT 1) + 1)]
    Select [0-23] [select ((SELECT 1) + 1)]
      SelectList [7-23] [((SELECT 1) + 1)]
        SelectColumn [7-23] [((SELECT 1) + 1)]
          BinaryExpression(+) [8-22] [(SELECT 1) + 1]
            ExpressionSubquery [8-18] [(SELECT 1)]
              Query [9-17] [SELECT 1]
                Select [9-17] [SELECT 1]
                  SelectList [16-17] [1]
                    SelectColumn [16-17] [1]
                      IntLiteral(1) [16-17] [1]
            IntLiteral(1) [21-22] [1]
--
SELECT
  ((
    SELECT
      1
  ) + 1)
==

# The same, but with two levels of parentheses.
select (((SELECT 1)) + 1)
--
QueryStatement [0-25] [select (((SELECT 1)) + 1)]
  Query [0-25] [select (((SELECT 1)) + 1)]
    Select [0-25] [select (((SELECT 1)) + 1)]
      SelectList [7-25] [(((SELECT 1)) + 1)]
        SelectColumn [7-25] [(((SELECT 1)) + 1)]
          BinaryExpression(+) [8-24] [((SELECT 1)) + 1]
            ExpressionSubquery [9-19] [(SELECT 1)]
              Query [10-18] [SELECT 1]
                Select [10-18] [SELECT 1]
                  SelectList [17-18] [1]
                    SelectColumn [17-18] [1]
                      IntLiteral(1) [17-18] [1]
            IntLiteral(1) [23-24] [1]
--
SELECT
  ((
    SELECT
      1
  ) + 1)
==

# This one has an error inside a double-parenthesized subuqery.
# In JavaCC, because it fails the unbounded lookahead for all cases, we get
# the error pointing at the (.
# With the ARRAY modifier, we know it must be a subquery.
# Bison recognizes the error inside the subquery with or without ARRAY.
select {{|ARRAY}}((select 1) union all select x y z)
--
ALTERNATION GROUP: <empty>
--
ERROR: Syntax error: Expected ")" but got identifier "z" [at 1:41]
select ((select 1) union all select x y z)
                                        ^
--
ALTERNATION GROUP: ARRAY
--
ERROR: Syntax error: Expected ")" but got identifier "z" [at 1:46]
select ARRAY((select 1) union all select x y z)
                                             ^
==

# This was failing because of bug 15826703.
SELECT ((SELECT count(distinct x)));
--
QueryStatement [0-35] [SELECT ((SELECT...istinct x)))]
  Query [0-35] [SELECT ((SELECT...istinct x)))]
    Select [0-35] [SELECT ((SELECT...istinct x)))]
      SelectList [7-35] [((SELECT count(distinct x)))]
        SelectColumn [7-35] [((SELECT count(distinct x)))]
          ExpressionSubquery [8-34] [(SELECT count(distinct x))]
            Query [9-33] [SELECT count(distinct x)]
              Select [9-33] [SELECT count(distinct x)]
                SelectList [16-33] [count(distinct x)]
                  SelectColumn [16-33] [count(distinct x)]
                    FunctionCall(distinct=true) [16-33] [count(distinct x)]
                      PathExpression [16-21] [count]
                        Identifier(count) [16-21] [count]
                      PathExpression [31-32] [x]
                        Identifier(x) [31-32] [x]
--
SELECT
  (
    SELECT
      count(DISTINCT x)
  )
==

# This was failing because of bug 15826703.
SELECT 1+((count(*)))
--
QueryStatement [0-21] [SELECT 1+((count(*)))]
  Query [0-21] [SELECT 1+((count(*)))]
    Select [0-21] [SELECT 1+((count(*)))]
      SelectList [7-21] [1+((count(*)))]
        SelectColumn [7-21] [1+((count(*)))]
          BinaryExpression(+) [7-21] [1+((count(*)))]
            IntLiteral(1) [7-8] [1]
            FunctionCall [11-19] [count(*)]
              PathExpression [11-16] [count]
                Identifier(count) [11-16] [count]
              Star(*) [17-18] [*]
--
SELECT
  1 + (count(*))
==

# This was crashing (bug 15885244) because we weren't setting hasError
# after calling handleOtherError manually after the parse error
# caused by bug 15826703.
SELECT a, 1+((count(*)))
--
QueryStatement [0-24] [SELECT a, 1+((count(*)))]
  Query [0-24] [SELECT a, 1+((count(*)))]
    Select [0-24] [SELECT a, 1+((count(*)))]
      SelectList [7-24] [a, 1+((count(*)))]
        SelectColumn [7-8] [a]
          PathExpression [7-8] [a]
            Identifier(a) [7-8] [a]
        SelectColumn [10-24] [1+((count(*)))]
          BinaryExpression(+) [10-24] [1+((count(*)))]
            IntLiteral(1) [10-11] [1]
            FunctionCall [14-22] [count(*)]
              PathExpression [14-19] [count]
                Identifier(count) [14-19] [count]
              Star(*) [20-21] [*]
--
SELECT
  a,
  1 + (count(*))
==

# This exposes the crash in bug 15885244 with an actual parse error that
# won't go away when we fix bug 15826703.
SELECT a, 1+((count(*) x x x))
--
ERROR: Syntax error: Parenthesized expression cannot be parsed as an expression, struct constructor, or subquery [at 1:15]
SELECT a, 1+((count(*) x x x))
              ^
==

# Another query that failed and crashed because of bugs 15885244 and 15826703.
SELECT a, count(*) AS foo, count(*) / ((count(*) * 1) * 1)
FROM (SELECT 1 AS a) GROUP BY 1;
--
QueryStatement [0-90] [SELECT a,...GROUP BY 1]
  Query [0-90] [SELECT a,...GROUP BY 1]
    Select [0-90] [SELECT a,...GROUP BY 1]
      SelectList [7-58] [a, count(*...* 1) * 1)]
        SelectColumn [7-8] [a]
          PathExpression [7-8] [a]
            Identifier(a) [7-8] [a]
        SelectColumn [10-25] [count(*) AS foo]
          FunctionCall [10-18] [count(*)]
            PathExpression [10-15] [count]
              Identifier(count) [10-15] [count]
            Star(*) [16-17] [*]
          Alias [19-25] [AS foo]
            Identifier(foo) [22-25] [foo]
        SelectColumn [27-58] [count(*) /...* 1) * 1)]
          BinaryExpression(/) [27-58] [count(*) /...* 1) * 1)]
            FunctionCall [27-35] [count(*)]
              PathExpression [27-32] [count]
                Identifier(count) [27-32] [count]
              Star(*) [33-34] [*]
            BinaryExpression(*) [39-57] [(count(*) * 1) * 1]
              BinaryExpression(*) [40-52] [count(*) * 1]
                FunctionCall [40-48] [count(*)]
                  PathExpression [40-45] [count]
                    Identifier(count) [40-45] [count]
                  Star(*) [46-47] [*]
                IntLiteral(1) [51-52] [1]
              IntLiteral(1) [56-57] [1]
      FromClause [59-79] [FROM (SELECT 1 AS a)]
        TableSubquery [64-79] [(SELECT 1 AS a)]
          Query [65-78] [SELECT 1 AS a]
            Select [65-78] [SELECT 1 AS a]
              SelectList [72-78] [1 AS a]
                SelectColumn [72-78] [1 AS a]
                  IntLiteral(1) [72-73] [1]
                  Alias [74-78] [AS a]
                    Identifier(a) [77-78] [a]
      GroupBy [80-90] [GROUP BY 1]
        GroupingItem [89-90] [1]
          IntLiteral(1) [89-90] [1]
--
SELECT
  a,
  count(*) AS foo,
  count(*) / ((count(*) * 1) * 1)
FROM
  (
    SELECT
      1 AS a
  )
GROUP BY 1
==

# In JavaCC all lookahead cases fail so we get a poor error. Bison does fine.
select (((select * from from from)))
--
ERROR: Syntax error: Unexpected keyword FROM [at 1:25]
select (((select * from from from)))
                        ^
==

select (((1 + 2 * * 3)))
--
ERROR: Syntax error: Unexpected "*" [at 1:19]
select (((1 + 2 * * 3)))
                  ^
==

select (((select 1) + 2))
--
QueryStatement [0-25] [select (((select 1) + 2))]
  Query [0-25] [select (((select 1) + 2))]
    Select [0-25] [select (((select 1) + 2))]
      SelectList [7-25] [(((select 1) + 2))]
        SelectColumn [7-25] [(((select 1) + 2))]
          BinaryExpression(+) [9-23] [(select 1) + 2]
            ExpressionSubquery [9-19] [(select 1)]
              Query [10-18] [select 1]
                Select [10-18] [select 1]
                  SelectList [17-18] [1]
                    SelectColumn [17-18] [1]
                      IntLiteral(1) [17-18] [1]
            IntLiteral(2) [22-23] [2]
--
SELECT
  ((
    SELECT
      1
  ) + 2)
==

select (((select 1) + 2 * * 3))
--
ERROR: Syntax error: Unexpected "*" [at 1:27]
select (((select 1) + 2 * * 3))
                          ^
==

select ARRAY(((select 1)))
--
QueryStatement [0-26] [select ARRAY(((select 1)))]
  Query [0-26] [select ARRAY(((select 1)))]
    Select [0-26] [select ARRAY(((select 1)))]
      SelectList [7-26] [ARRAY(((select 1)))]
        SelectColumn [7-26] [ARRAY(((select 1)))]
          ExpressionSubquery(modifier=ARRAY) [7-26] [ARRAY(((select 1)))]
            Query [13-25] [((select 1))]
              Query [14-24] [(select 1)]
                Query [15-23] [select 1]
                  Select [15-23] [select 1]
                    SelectList [22-23] [1]
                      SelectColumn [22-23] [1]
                        IntLiteral(1) [22-23] [1]
--
SELECT
  ARRAY(((
    SELECT
      1
    )))
==

select *
from (((select 1)))
--
QueryStatement [0-28] [select * from (((select 1)))]
  Query [0-28] [select * from (((select 1)))]
    Select [0-28] [select * from (((select 1)))]
      SelectList [7-8] [*]
        SelectColumn [7-8] [*]
          Star(*) [7-8] [*]
      FromClause [9-28] [from (((select 1)))]
        TableSubquery [14-28] [(((select 1)))]
          Query [15-27] [((select 1))]
            Query [16-26] [(select 1)]
              Query [17-25] [select 1]
                Select [17-25] [select 1]
                  SelectList [24-25] [1]
                    SelectColumn [24-25] [1]
                      IntLiteral(1) [24-25] [1]
--
SELECT
  *
FROM
  (((
    SELECT
      1
    ))
  )
==

select *
from (((select 1)) union all (select 2))
--
QueryStatement [0-49] [select * from...select 2))]
  Query [0-49] [select * from...select 2))]
    Select [0-49] [select * from...select 2))]
      SelectList [7-8] [*]
        SelectColumn [7-8] [*]
          Star(*) [7-8] [*]
      FromClause [9-49] [from (((select...select 2))]
        TableSubquery [14-49] [(((select...select 2))]
          Query [15-48] [((select 1...(select 2)]
            SetOperation(UNION ALL) [15-48] [((select 1...(select 2)]
              Query [16-26] [(select 1)]
                Query [17-25] [select 1]
                  Select [17-25] [select 1]
                    SelectList [24-25] [1]
                      SelectColumn [24-25] [1]
                        IntLiteral(1) [24-25] [1]
              Query [39-47] [select 2]
                Select [39-47] [select 2]
                  SelectList [46-47] [2]
                    SelectColumn [46-47] [2]
                      IntLiteral(2) [46-47] [2]
--
SELECT
  *
FROM
  (((
    SELECT
      1
    )) UNION ALL(
    SELECT
      2
    )
  )
==

select *
from (((select 1) limit 3) order by 1)
--
QueryStatement [0-47] [select * from...order by 1)]
  Query [0-47] [select * from...order by 1)]
    Select [0-47] [select * from...order by 1)]
      SelectList [7-8] [*]
        SelectColumn [7-8] [*]
          Star(*) [7-8] [*]
      FromClause [9-47] [from (((select...order by 1)]
        TableSubquery [14-47] [(((select...order by 1)]
          Query [15-46] [((select 1...order by 1]
            Query [16-34] [(select 1) limit 3]
              Query [17-25] [select 1]
                Select [17-25] [select 1]
                  SelectList [24-25] [1]
                    SelectColumn [24-25] [1]
                      IntLiteral(1) [24-25] [1]
              LimitOffset [27-34] [limit 3]
                IntLiteral(3) [33-34] [3]
            OrderBy [36-46] [order by 1]
              OrderingExpression(ASC) [45-46] [1]
                IntLiteral(1) [45-46] [1]
--
SELECT
  *
FROM
  (((
    SELECT
      1
    )
    LIMIT 3)
    ORDER BY 1
  )
==

# Mixing subquery parentheses with parenenthesized joins.
select *
from a join ((select 1 x) join (select 2 x) using (x))
--
QueryStatement [0-63] [select * from...using (x))]
  Query [0-63] [select * from...using (x))]
    Select [0-63] [select * from...using (x))]
      SelectList [7-8] [*]
        SelectColumn [7-8] [*]
          Star(*) [7-8] [*]
      FromClause [9-63] [from a join...using (x))]
        Join [14-63] [a join ((select...using (x))]
          TablePathExpression [14-15] [a]
            PathExpression [14-15] [a]
              Identifier(a) [14-15] [a]
          Location [16-20] [join]
          ParenthesizedJoin [21-63] [((select 1...using (x))]
            Join [22-62] [(select 1...using (x)]
              TableSubquery [22-34] [(select 1 x)]
                Query [23-33] [select 1 x]
                  Select [23-33] [select 1 x]
                    SelectList [30-33] [1 x]
                      SelectColumn [30-33] [1 x]
                        IntLiteral(1) [30-31] [1]
                        Alias [32-33] [x]
                          Identifier(x) [32-33] [x]
              Location [35-39] [join]
              TableSubquery [40-52] [(select 2 x)]
                Query [41-51] [select 2 x]
                  Select [41-51] [select 2 x]
                    SelectList [48-51] [2 x]
                      SelectColumn [48-51] [2 x]
                        IntLiteral(2) [48-49] [2]
                        Alias [50-51] [x]
                          Identifier(x) [50-51] [x]
              UsingClause [53-62] [using (x)]
                Identifier(x) [60-61] [x]
--
SELECT
  *
FROM
  a
  JOIN
  (
    (
      SELECT
        1 AS x
    )
    JOIN
    (
      SELECT
        2 AS x
    )
    USING(x)
  )
