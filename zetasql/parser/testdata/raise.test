# Simple raise
[default mode=script]
BEGIN EXCEPTION WHEN ERROR THEN
{{raise|RAISE}};
END;
--
ALTERNATION GROUP: raise
--
Script [0-44] [BEGIN EXCEPTION...raise; END;]
  StatementList [0-44] [BEGIN EXCEPTION...raise; END;]
    BeginEndBlock [0-42] [BEGIN EXCEPTION...raise; END]
      StatementList [5-5] []
      ExceptionHandlerList [6-39] [EXCEPTION...THEN raise;]
        ExceptionHandler [16-39] [WHEN ERROR THEN raise;]
          StatementList [32-39] [raise;]
            Raise [32-37] [raise]
--
BEGIN
EXCEPTION
WHEN ERROR THEN RAISE ;
END
;
--
ALTERNATION GROUP: RAISE
--
Script [0-44] [BEGIN EXCEPTION...RAISE; END;]
  StatementList [0-44] [BEGIN EXCEPTION...RAISE; END;]
    BeginEndBlock [0-42] [BEGIN EXCEPTION...RAISE; END]
      StatementList [5-5] []
      ExceptionHandlerList [6-39] [EXCEPTION...THEN RAISE;]
        ExceptionHandler [16-39] [WHEN ERROR THEN RAISE;]
          StatementList [32-39] [RAISE;]
            Raise [32-37] [RAISE]
--
BEGIN
EXCEPTION
WHEN ERROR THEN RAISE ;
END
;
==

# Invalid raise outside of error handler
RAISE{{;|}}
--
ALTERNATION GROUP: ;
--
Script [0-7] [RAISE;]
  StatementList [0-7] [RAISE;]
    Raise [0-5] [RAISE]
--
RAISE ;
--
ALTERNATION GROUP: <empty>
--
Script [0-5] [RAISE]
  StatementList [0-5] [RAISE]
    Raise [0-5] [RAISE]
--
RAISE ;
==

# Invalid raise after error handler terminates
BEGIN EXCEPTION WHEN ERROR THEN END;
RAISE;
--
Script [0-44] [BEGIN EXCEPTION...END; RAISE;]
  StatementList [0-44] [BEGIN EXCEPTION...END; RAISE;]
    BeginEndBlock [0-35] [BEGIN EXCEPTION...ROR THEN END]
      StatementList [5-5] []
      ExceptionHandlerList [6-31] [EXCEPTION WHEN ERROR THEN]
        ExceptionHandler [16-31] [WHEN ERROR THEN]
          StatementList [31-31] []
    Raise [37-42] [RAISE]
--
BEGIN
EXCEPTION
WHEN ERROR THEN
END
;
RAISE ;
==

# raises in nested exception handlers
BEGIN EXCEPTION WHEN ERROR THEN
  BEGIN EXCEPTION WHEN ERROR THEN
    RAISE;
  END;
  RAISE;
END;
--
Script [0-98] [BEGIN EXCEPTION...RAISE; END;]
  StatementList [0-98] [BEGIN EXCEPTION...RAISE; END;]
    BeginEndBlock [0-96] [BEGIN EXCEPTION...RAISE; END]
      StatementList [5-5] []
      ExceptionHandlerList [6-93] [EXCEPTION...;   RAISE;]
        ExceptionHandler [16-93] [WHEN ERROR...;   RAISE;]
          StatementList [34-93] [BEGIN EXCEPTION...;   RAISE;]
            BeginEndBlock [34-82] [BEGIN EXCEPTION...RAISE;   END]
              StatementList [39-39] []
              ExceptionHandlerList [40-79] [EXCEPTION...RAISE;]
                ExceptionHandler [50-79] [WHEN ERROR THEN     RAISE;]
                  StatementList [70-79] [RAISE;]
                    Raise [70-75] [RAISE]
            Raise [86-91] [RAISE]
--
BEGIN
EXCEPTION
WHEN ERROR THEN BEGIN
  EXCEPTION
  WHEN ERROR THEN RAISE ;
  END
  ;
  RAISE ;
END
;
==

# raise with literal message
{{raise|RAISE}} {{using|USING}} {{message|MESSAGE}} = 'test'{{;|}}
--
ALTERNATION GROUP: raise,using,message,;
--
Script [0-30] [raise using message = 'test';]
  StatementList [0-30] [raise using message = 'test';]
    Raise [0-28] [raise using message = 'test']
      StringLiteral('test') [22-28] ['test']
--
RAISE USING MESSAGE = 'test' ;
--
ALTERNATION GROUP: raise,using,message,
--
Script [0-28] [raise using message = 'test']
  StatementList [0-28] [raise using message = 'test']
    Raise [0-28] [raise using message = 'test']
      StringLiteral('test') [22-28] ['test']
--
RAISE USING MESSAGE = 'test' ;
--
ALTERNATION GROUP: raise,using,MESSAGE,;
--
Script [0-30] [raise using MESSAGE = 'test';]
  StatementList [0-30] [raise using MESSAGE = 'test';]
    Raise [0-28] [raise using MESSAGE = 'test']
      StringLiteral('test') [22-28] ['test']
--
RAISE USING MESSAGE = 'test' ;
--
ALTERNATION GROUP: raise,using,MESSAGE,
--
Script [0-28] [raise using MESSAGE = 'test']
  StatementList [0-28] [raise using MESSAGE = 'test']
    Raise [0-28] [raise using MESSAGE = 'test']
      StringLiteral('test') [22-28] ['test']
--
RAISE USING MESSAGE = 'test' ;
--
ALTERNATION GROUP: raise,USING,message,;
--
Script [0-30] [raise USING message = 'test';]
  StatementList [0-30] [raise USING message = 'test';]
    Raise [0-28] [raise USING message = 'test']
      StringLiteral('test') [22-28] ['test']
--
RAISE USING MESSAGE = 'test' ;
--
ALTERNATION GROUP: raise,USING,message,
--
Script [0-28] [raise USING message = 'test']
  StatementList [0-28] [raise USING message = 'test']
    Raise [0-28] [raise USING message = 'test']
      StringLiteral('test') [22-28] ['test']
--
RAISE USING MESSAGE = 'test' ;
--
ALTERNATION GROUP: raise,USING,MESSAGE,;
--
Script [0-30] [raise USING MESSAGE = 'test';]
  StatementList [0-30] [raise USING MESSAGE = 'test';]
    Raise [0-28] [raise USING MESSAGE = 'test']
      StringLiteral('test') [22-28] ['test']
--
RAISE USING MESSAGE = 'test' ;
--
ALTERNATION GROUP: raise,USING,MESSAGE,
--
Script [0-28] [raise USING MESSAGE = 'test']
  StatementList [0-28] [raise USING MESSAGE = 'test']
    Raise [0-28] [raise USING MESSAGE = 'test']
      StringLiteral('test') [22-28] ['test']
--
RAISE USING MESSAGE = 'test' ;
--
ALTERNATION GROUP: RAISE,using,message,;
--
Script [0-30] [RAISE using message = 'test';]
  StatementList [0-30] [RAISE using message = 'test';]
    Raise [0-28] [RAISE using message = 'test']
      StringLiteral('test') [22-28] ['test']
--
RAISE USING MESSAGE = 'test' ;
--
ALTERNATION GROUP: RAISE,using,message,
--
Script [0-28] [RAISE using message = 'test']
  StatementList [0-28] [RAISE using message = 'test']
    Raise [0-28] [RAISE using message = 'test']
      StringLiteral('test') [22-28] ['test']
--
RAISE USING MESSAGE = 'test' ;
--
ALTERNATION GROUP: RAISE,using,MESSAGE,;
--
Script [0-30] [RAISE using MESSAGE = 'test';]
  StatementList [0-30] [RAISE using MESSAGE = 'test';]
    Raise [0-28] [RAISE using MESSAGE = 'test']
      StringLiteral('test') [22-28] ['test']
--
RAISE USING MESSAGE = 'test' ;
--
ALTERNATION GROUP: RAISE,using,MESSAGE,
--
Script [0-28] [RAISE using MESSAGE = 'test']
  StatementList [0-28] [RAISE using MESSAGE = 'test']
    Raise [0-28] [RAISE using MESSAGE = 'test']
      StringLiteral('test') [22-28] ['test']
--
RAISE USING MESSAGE = 'test' ;
--
ALTERNATION GROUP: RAISE,USING,message,;
--
Script [0-30] [RAISE USING message = 'test';]
  StatementList [0-30] [RAISE USING message = 'test';]
    Raise [0-28] [RAISE USING message = 'test']
      StringLiteral('test') [22-28] ['test']
--
RAISE USING MESSAGE = 'test' ;
--
ALTERNATION GROUP: RAISE,USING,message,
--
Script [0-28] [RAISE USING message = 'test']
  StatementList [0-28] [RAISE USING message = 'test']
    Raise [0-28] [RAISE USING message = 'test']
      StringLiteral('test') [22-28] ['test']
--
RAISE USING MESSAGE = 'test' ;
--
ALTERNATION GROUP: RAISE,USING,MESSAGE,;
--
Script [0-30] [RAISE USING MESSAGE = 'test';]
  StatementList [0-30] [RAISE USING MESSAGE = 'test';]
    Raise [0-28] [RAISE USING MESSAGE = 'test']
      StringLiteral('test') [22-28] ['test']
--
RAISE USING MESSAGE = 'test' ;
--
ALTERNATION GROUP: RAISE,USING,MESSAGE,
--
Script [0-28] [RAISE USING MESSAGE = 'test']
  StatementList [0-28] [RAISE USING MESSAGE = 'test']
    Raise [0-28] [RAISE USING MESSAGE = 'test']
      StringLiteral('test') [22-28] ['test']
--
RAISE USING MESSAGE = 'test' ;
==

# raise with nonliteral message
raise using message = CONCAT('test', '_', 'foo');
--
Script [0-50] [raise using...', 'foo');]
  StatementList [0-50] [raise using...', 'foo');]
    Raise [0-48] [raise using..._', 'foo')]
      FunctionCall [22-48] [CONCAT('test', '_', 'foo')]
        PathExpression [22-28] [CONCAT]
          Identifier(CONCAT) [22-28] [CONCAT]
        StringLiteral('test') [29-35] ['test']
        StringLiteral('_') [37-40] ['_']
        StringLiteral('foo') [42-47] ['foo']
--
RAISE USING MESSAGE = CONCAT('test', '_', 'foo') ;
==

# raise with variable, system variable, and query param
raise using message = {{a|@a|@@a}};
--
ALTERNATION GROUP: a
--
Script [0-25] [raise using message = a;]
  StatementList [0-25] [raise using message = a;]
    Raise [0-23] [raise using message = a]
      PathExpression [22-23] [a]
        Identifier(a) [22-23] [a]
--
RAISE USING MESSAGE = a ;
--
ALTERNATION GROUP: @a
--
Script [0-26] [raise using message = @a;]
  StatementList [0-26] [raise using message = @a;]
    Raise [0-24] [raise using message = @a]
      ParameterExpr [22-24] [@a]
        Identifier(a) [23-24] [a]
--
RAISE USING MESSAGE = @a ;
--
ALTERNATION GROUP: @@a
--
Script [0-27] [raise using message = @@a;]
  StatementList [0-27] [raise using message = @@a;]
    Raise [0-25] [raise using message = @@a]
      SystemVariableExpr [22-25] [@@a]
        PathExpression [24-25] [a]
          Identifier(a) [24-25] [a]
--
RAISE USING MESSAGE = @@a ;
==

# Raise statement in a larger script
IF x < 0 THEN
  RAISE using message = 'x is negative';
END IF;
--
Script [0-63] [IF x < 0 THEN...'; END IF;]
  StatementList [0-63] [IF x < 0 THEN...'; END IF;]
    IfStatement [0-61] [IF x < 0 THEN...ative'; END IF]
      BinaryExpression(<) [3-8] [x < 0]
        PathExpression [3-4] [x]
          Identifier(x) [3-4] [x]
        IntLiteral(0) [7-8] [0]
      StatementList [16-55] [RAISE using...negative';]
        Raise [16-53] [RAISE using...negative']
          StringLiteral('x is negative') [38-53] ['x is negative']
--
IF x < 0 THEN
  RAISE USING MESSAGE = 'x is negative' ;
END IF ;
==

# raise keywords used as identifiers (except for USING, which is reserved).
SELECT RAISE, MESSAGE FROM t;
--
Script [0-30] [SELECT RAISE, MESSAGE FROM t;]
  StatementList [0-30] [SELECT RAISE, MESSAGE FROM t;]
    QueryStatement [0-28] [SELECT RAISE, MESSAGE FROM t]
      Query [0-28] [SELECT RAISE, MESSAGE FROM t]
        Select [0-28] [SELECT RAISE, MESSAGE FROM t]
          SelectList [7-21] [RAISE, MESSAGE]
            SelectColumn [7-12] [RAISE]
              PathExpression [7-12] [RAISE]
                Identifier(RAISE) [7-12] [RAISE]
            SelectColumn [14-21] [MESSAGE]
              PathExpression [14-21] [MESSAGE]
                Identifier(MESSAGE) [14-21] [MESSAGE]
          FromClause [22-28] [FROM t]
            TablePathExpression [27-28] [t]
              PathExpression [27-28] [t]
                Identifier(t) [27-28] [t]
--
SELECT
  RAISE,
  MESSAGE
FROM
  t
;
==

# ERROR: missing message
RAISE USING MESSAGE;
--
ERROR: Syntax error: Expected "=" but got ";" [at 1:20]
RAISE USING MESSAGE;
                   ^
==

# ERROR: missing USING keyword
RAISE MESSAGE = 'foo';
--
ERROR: Syntax error: Expected end of input but got keyword MESSAGE [at 1:7]
RAISE MESSAGE = 'foo';
      ^
==

# ERROR: missing "="
RAISE USING MESSAGE 'foo';
--
ERROR: Syntax error: Expected "=" but got string literal 'foo' [at 1:21]
RAISE USING MESSAGE 'foo';
                    ^
==

# ERROR: USING MESSAGE =
RAISE 'foo';
--
ERROR: Syntax error: Expected end of input but got string literal 'foo' [at 1:7]
RAISE 'foo';
      ^
==

# ERROR: Raise used as standalone statement, outside of a script
[mode=statement]
RAISE;
--
ERROR: Syntax error: Unexpected keyword RAISE [at 1:1]
RAISE;
^
