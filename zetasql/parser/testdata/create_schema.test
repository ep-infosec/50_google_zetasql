# CREATE SCHEMA
CREATE SCHEMA foo;
--
CreateSchemaStatement [0-17] [CREATE SCHEMA foo]
  PathExpression [14-17] [foo]
    Identifier(foo) [14-17] [foo]
--
CREATE SCHEMA foo
==

CREATE {{|or replace}} SCHEMA {{|if not exists}} foo.bar
options()
--
ALTERNATION GROUP: <empty>
--
CreateSchemaStatement [0-33] [CREATE  SCHEMA...options()]
  PathExpression [16-23] [foo.bar]
    Identifier(foo) [16-19] [foo]
    Identifier(bar) [20-23] [bar]
  OptionsList [31-33] [()]
--
CREATE SCHEMA foo.bar
OPTIONS()
--
ALTERNATION GROUP: if not exists
--
CreateSchemaStatement(is_if_not_exists) [0-46] [CREATE  SCHEMA...options()]
  PathExpression [29-36] [foo.bar]
    Identifier(foo) [29-32] [foo]
    Identifier(bar) [33-36] [bar]
  OptionsList [44-46] [()]
--
CREATE SCHEMA IF NOT EXISTS foo.bar
OPTIONS()
--
ALTERNATION GROUP: or replace,
--
CreateSchemaStatement(is_or_replace) [0-43] [CREATE or...options()]
  PathExpression [26-33] [foo.bar]
    Identifier(foo) [26-29] [foo]
    Identifier(bar) [30-33] [bar]
  OptionsList [41-43] [()]
--
CREATE OR REPLACE SCHEMA foo.bar
OPTIONS()
--
ALTERNATION GROUP: or replace,if not exists
--
CreateSchemaStatement(is_or_replace, is_if_not_exists) [0-56] [CREATE or...options()]
  PathExpression [39-46] [foo.bar]
    Identifier(foo) [39-42] [foo]
    Identifier(bar) [43-46] [bar]
  OptionsList [54-56] [()]
--
CREATE OR REPLACE SCHEMA IF NOT EXISTS foo.bar
OPTIONS()
==

CREATE SCHEMA foo options(x='a',y='b')

--
CreateSchemaStatement [0-38] [CREATE SCHEMA...'a',y='b')]
  PathExpression [14-17] [foo]
    Identifier(foo) [14-17] [foo]
  OptionsList [25-38] [(x='a',y='b')]
    OptionsEntry [26-31] [x='a']
      Identifier(x) [26-27] [x]
      StringLiteral('a') [28-31] ['a']
    OptionsEntry [32-37] [y='b']
      Identifier(y) [32-33] [y]
      StringLiteral('b') [34-37] ['b']
--
CREATE SCHEMA foo
OPTIONS(x = 'a', y = 'b')
==

CREATE {{|or replace}} SCHEMA {{|if not exists}} foo.bar DEFAULT COLLATE 'unicode:ci'
options()
--
ALTERNATION GROUP: <empty>
--
CreateSchemaStatement [0-62] [CREATE  SCHEMA...options()]
  PathExpression [16-23] [foo.bar]
    Identifier(foo) [16-19] [foo]
    Identifier(bar) [20-23] [bar]
  Collate [32-52] [COLLATE 'unicode:ci']
    StringLiteral('unicode:ci') [40-52] ['unicode:ci']
  OptionsList [60-62] [()]
--
CREATE SCHEMA foo.bar DEFAULT COLLATE 'unicode:ci'
OPTIONS()
--
ALTERNATION GROUP: if not exists
--
CreateSchemaStatement(is_if_not_exists) [0-75] [CREATE  SCHEMA...options()]
  PathExpression [29-36] [foo.bar]
    Identifier(foo) [29-32] [foo]
    Identifier(bar) [33-36] [bar]
  Collate [45-65] [COLLATE 'unicode:ci']
    StringLiteral('unicode:ci') [53-65] ['unicode:ci']
  OptionsList [73-75] [()]
--
CREATE SCHEMA IF NOT EXISTS foo.bar DEFAULT COLLATE 'unicode:ci'
OPTIONS()
--
ALTERNATION GROUP: or replace,
--
CreateSchemaStatement(is_or_replace) [0-72] [CREATE or...options()]
  PathExpression [26-33] [foo.bar]
    Identifier(foo) [26-29] [foo]
    Identifier(bar) [30-33] [bar]
  Collate [42-62] [COLLATE 'unicode:ci']
    StringLiteral('unicode:ci') [50-62] ['unicode:ci']
  OptionsList [70-72] [()]
--
CREATE OR REPLACE SCHEMA foo.bar DEFAULT COLLATE 'unicode:ci'
OPTIONS()
--
ALTERNATION GROUP: or replace,if not exists
--
CreateSchemaStatement(is_or_replace, is_if_not_exists) [0-85] [CREATE or...options()]
  PathExpression [39-46] [foo.bar]
    Identifier(foo) [39-42] [foo]
    Identifier(bar) [43-46] [bar]
  Collate [55-75] [COLLATE 'unicode:ci']
    StringLiteral('unicode:ci') [63-75] ['unicode:ci']
  OptionsList [83-85] [()]
--
CREATE OR REPLACE SCHEMA IF NOT EXISTS foo.bar DEFAULT COLLATE 'unicode:ci'
OPTIONS()

==

CREATE SCHEMA foo DEFAULT COLLATE 'unicode:ci' options(x='a',y='b')
--
CreateSchemaStatement [0-67] [CREATE SCHEMA...'a',y='b')]
  PathExpression [14-17] [foo]
    Identifier(foo) [14-17] [foo]
  Collate [26-46] [COLLATE 'unicode:ci']
    StringLiteral('unicode:ci') [34-46] ['unicode:ci']
  OptionsList [54-67] [(x='a',y='b')]
    OptionsEntry [55-60] [x='a']
      Identifier(x) [55-56] [x]
      StringLiteral('a') [57-60] ['a']
    OptionsEntry [61-66] [y='b']
      Identifier(y) [61-62] [y]
      StringLiteral('b') [63-66] ['b']
--
CREATE SCHEMA foo DEFAULT COLLATE 'unicode:ci'
OPTIONS(x = 'a', y = 'b')
==

CREATE SCHEMA foo COLLATE 'unicode:ci' options(x='a',y='b')
--
ERROR: Syntax error: Expected end of input but got keyword COLLATE [at 1:19]
CREATE SCHEMA foo COLLATE 'unicode:ci' options(x='a',y='b')
                  ^
==

CREATE SCHEMA
--
ERROR: Syntax error: Unexpected end of statement [at 1:14]
CREATE SCHEMA
             ^
==

CREATE SCHEMA foo DEFAULT COLLATE {{@|@@}}a options(x='a',y='b')
--
ALTERNATION GROUP: @
--
CreateSchemaStatement [0-57] [CREATE SCHEMA...'a',y='b')]
  PathExpression [14-17] [foo]
    Identifier(foo) [14-17] [foo]
  Collate [26-36] [COLLATE @a]
    ParameterExpr [34-36] [@a]
      Identifier(a) [35-36] [a]
  OptionsList [44-57] [(x='a',y='b')]
    OptionsEntry [45-50] [x='a']
      Identifier(x) [45-46] [x]
      StringLiteral('a') [47-50] ['a']
    OptionsEntry [51-56] [y='b']
      Identifier(y) [51-52] [y]
      StringLiteral('b') [53-56] ['b']
--
CREATE SCHEMA foo DEFAULT COLLATE @a
OPTIONS(x = 'a', y = 'b')
--
ALTERNATION GROUP: @@
--
CreateSchemaStatement [0-58] [CREATE SCHEMA...'a',y='b')]
  PathExpression [14-17] [foo]
    Identifier(foo) [14-17] [foo]
  Collate [26-37] [COLLATE @@a]
    SystemVariableExpr [34-37] [@@a]
      PathExpression [36-37] [a]
        Identifier(a) [36-37] [a]
  OptionsList [45-58] [(x='a',y='b')]
    OptionsEntry [46-51] [x='a']
      Identifier(x) [46-47] [x]
      StringLiteral('a') [48-51] ['a']
    OptionsEntry [52-57] [y='b']
      Identifier(y) [52-53] [y]
      StringLiteral('b') [54-57] ['b']
--
CREATE SCHEMA foo DEFAULT COLLATE @@a
OPTIONS(x = 'a', y = 'b')
==

CREATE SCHEMA foo DEFAULT COLLATE ? options(x='a',y='b')
--
CreateSchemaStatement [0-56] [CREATE SCHEMA...'a',y='b')]
  PathExpression [14-17] [foo]
    Identifier(foo) [14-17] [foo]
  Collate [26-35] [COLLATE ?]
    ParameterExpr(1) [34-35] [?]
  OptionsList [43-56] [(x='a',y='b')]
    OptionsEntry [44-49] [x='a']
      Identifier(x) [44-45] [x]
      StringLiteral('a') [46-49] ['a']
    OptionsEntry [50-55] [y='b']
      Identifier(y) [50-51] [y]
      StringLiteral('b') [52-55] ['b']
--
CREATE SCHEMA foo DEFAULT COLLATE ?
OPTIONS(x = 'a', y = 'b')
==

CREATE SCHEMA foo DEFAULT COLLATE CONCAT('unicode', ':', 'ci') options(x='a',y='b')
--
ERROR: Syntax error: Expected "@" or "@@" or string literal but got identifier "CONCAT" [at 1:35]
CREATE SCHEMA foo DEFAULT COLLATE CONCAT('unicode', ':', 'ci') options(x='a',...
                                  ^
==

CREATE SCHEMA foo OPTIONS(a="b", c="d") DEFAULT COLLATE 'unicode:ci';
--
ERROR: Syntax error: Expected end of input but got keyword DEFAULT [at 1:41]
CREATE SCHEMA foo OPTIONS(a="b", c="d") DEFAULT COLLATE 'unicode:ci';
                                        ^
==
