# Parser tests for the CREATE TABLE FUNCTION statement with alternation groups.
# These tests are in a separate file for easier reviewing.
#
# This is a parser test with all combinations of features for different
# optional parts of the CREATE TABLE FUNCTION statement. Each combination
# parses successfully. The analyzer later examines the parsed options and
# returns errors for those that are semantically invalid.
create
{{or replace|}}
{{temporary|}}
{{external|}}
table function
{{if not exists|}}
myfunction()
{{returns table<x int64>|}}
{{options(d=e)|}}
{{language testlang|}}
{{as select 1 as x|}};
--
ALTERNATION GROUPS:
    or replace,temporary,external,if not exists,returns table<x int64>,options(d=e),language testlang,as select 1 as x
    or replace,temporary,external,if not exists,returns table<x int64>,options(d=e),language testlang,
    or replace,temporary,external,if not exists,returns table<x int64>,options(d=e),,as select 1 as x
    or replace,temporary,external,if not exists,returns table<x int64>,options(d=e),,
    or replace,temporary,external,if not exists,returns table<x int64>,,language testlang,as select 1 as x
    or replace,temporary,external,if not exists,returns table<x int64>,,language testlang,
    or replace,temporary,external,if not exists,returns table<x int64>,,,as select 1 as x
    or replace,temporary,external,if not exists,returns table<x int64>,,,
    or replace,temporary,external,if not exists,,options(d=e),language testlang,as select 1 as x
    or replace,temporary,external,if not exists,,options(d=e),language testlang,
    or replace,temporary,external,if not exists,,options(d=e),,as select 1 as x
    or replace,temporary,external,if not exists,,options(d=e),,
    or replace,temporary,external,if not exists,,,language testlang,as select 1 as x
    or replace,temporary,external,if not exists,,,language testlang,
    or replace,temporary,external,if not exists,,,,as select 1 as x
    or replace,temporary,external,if not exists,,,,
    or replace,temporary,external,,returns table<x int64>,options(d=e),language testlang,as select 1 as x
    or replace,temporary,external,,returns table<x int64>,options(d=e),language testlang,
    or replace,temporary,external,,returns table<x int64>,options(d=e),,as select 1 as x
    or replace,temporary,external,,returns table<x int64>,options(d=e),,
    or replace,temporary,external,,returns table<x int64>,,language testlang,as select 1 as x
    or replace,temporary,external,,returns table<x int64>,,language testlang,
    or replace,temporary,external,,returns table<x int64>,,,as select 1 as x
    or replace,temporary,external,,returns table<x int64>,,,
    or replace,temporary,external,,,options(d=e),language testlang,as select 1 as x
    or replace,temporary,external,,,options(d=e),language testlang,
    or replace,temporary,external,,,options(d=e),,as select 1 as x
    or replace,temporary,external,,,options(d=e),,
    or replace,temporary,external,,,,language testlang,as select 1 as x
    or replace,temporary,external,,,,language testlang,
    or replace,temporary,external,,,,,as select 1 as x
    or replace,temporary,external,,,,,
    or replace,,external,if not exists,returns table<x int64>,options(d=e),language testlang,as select 1 as x
    or replace,,external,if not exists,returns table<x int64>,options(d=e),language testlang,
    or replace,,external,if not exists,returns table<x int64>,options(d=e),,as select 1 as x
    or replace,,external,if not exists,returns table<x int64>,options(d=e),,
    or replace,,external,if not exists,returns table<x int64>,,language testlang,as select 1 as x
    or replace,,external,if not exists,returns table<x int64>,,language testlang,
    or replace,,external,if not exists,returns table<x int64>,,,as select 1 as x
    or replace,,external,if not exists,returns table<x int64>,,,
    or replace,,external,if not exists,,options(d=e),language testlang,as select 1 as x
    or replace,,external,if not exists,,options(d=e),language testlang,
    or replace,,external,if not exists,,options(d=e),,as select 1 as x
    or replace,,external,if not exists,,options(d=e),,
    or replace,,external,if not exists,,,language testlang,as select 1 as x
    or replace,,external,if not exists,,,language testlang,
    or replace,,external,if not exists,,,,as select 1 as x
    or replace,,external,if not exists,,,,
    or replace,,external,,returns table<x int64>,options(d=e),language testlang,as select 1 as x
    or replace,,external,,returns table<x int64>,options(d=e),language testlang,
    or replace,,external,,returns table<x int64>,options(d=e),,as select 1 as x
    or replace,,external,,returns table<x int64>,options(d=e),,
    or replace,,external,,returns table<x int64>,,language testlang,as select 1 as x
    or replace,,external,,returns table<x int64>,,language testlang,
    or replace,,external,,returns table<x int64>,,,as select 1 as x
    or replace,,external,,returns table<x int64>,,,
    or replace,,external,,,options(d=e),language testlang,as select 1 as x
    or replace,,external,,,options(d=e),language testlang,
    or replace,,external,,,options(d=e),,as select 1 as x
    or replace,,external,,,options(d=e),,
    or replace,,external,,,,language testlang,as select 1 as x
    or replace,,external,,,,language testlang,
    or replace,,external,,,,,as select 1 as x
    or replace,,external,,,,,
    temporary,external,if not exists,returns table<x int64>,options(d=e),language testlang,as select 1 as x
    temporary,external,if not exists,returns table<x int64>,options(d=e),language testlang,
    temporary,external,if not exists,returns table<x int64>,options(d=e),,as select 1 as x
    temporary,external,if not exists,returns table<x int64>,options(d=e),,
    temporary,external,if not exists,returns table<x int64>,,language testlang,as select 1 as x
    temporary,external,if not exists,returns table<x int64>,,language testlang,
    temporary,external,if not exists,returns table<x int64>,,,as select 1 as x
    temporary,external,if not exists,returns table<x int64>,,,
    temporary,external,if not exists,,options(d=e),language testlang,as select 1 as x
    temporary,external,if not exists,,options(d=e),language testlang,
    temporary,external,if not exists,,options(d=e),,as select 1 as x
    temporary,external,if not exists,,options(d=e),,
    temporary,external,if not exists,,,language testlang,as select 1 as x
    temporary,external,if not exists,,,language testlang,
    temporary,external,if not exists,,,,as select 1 as x
    temporary,external,if not exists,,,,
    temporary,external,,returns table<x int64>,options(d=e),language testlang,as select 1 as x
    temporary,external,,returns table<x int64>,options(d=e),language testlang,
    temporary,external,,returns table<x int64>,options(d=e),,as select 1 as x
    temporary,external,,returns table<x int64>,options(d=e),,
    temporary,external,,returns table<x int64>,,language testlang,as select 1 as x
    temporary,external,,returns table<x int64>,,language testlang,
    temporary,external,,returns table<x int64>,,,as select 1 as x
    temporary,external,,returns table<x int64>,,,
    temporary,external,,,options(d=e),language testlang,as select 1 as x
    temporary,external,,,options(d=e),language testlang,
    temporary,external,,,options(d=e),,as select 1 as x
    temporary,external,,,options(d=e),,
    temporary,external,,,,language testlang,as select 1 as x
    temporary,external,,,,language testlang,
    temporary,external,,,,,as select 1 as x
    temporary,external,,,,,
    external,if not exists,returns table<x int64>,options(d=e),language testlang,as select 1 as x
    external,if not exists,returns table<x int64>,options(d=e),language testlang,
    external,if not exists,returns table<x int64>,options(d=e),,as select 1 as x
    external,if not exists,returns table<x int64>,options(d=e),,
    external,if not exists,returns table<x int64>,,language testlang,as select 1 as x
    external,if not exists,returns table<x int64>,,language testlang,
    external,if not exists,returns table<x int64>,,,as select 1 as x
    external,if not exists,returns table<x int64>,,,
    external,if not exists,,options(d=e),language testlang,as select 1 as x
    external,if not exists,,options(d=e),language testlang,
    external,if not exists,,options(d=e),,as select 1 as x
    external,if not exists,,options(d=e),,
    external,if not exists,,,language testlang,as select 1 as x
    external,if not exists,,,language testlang,
    external,if not exists,,,,as select 1 as x
    external,if not exists,,,,
    external,,returns table<x int64>,options(d=e),language testlang,as select 1 as x
    external,,returns table<x int64>,options(d=e),language testlang,
    external,,returns table<x int64>,options(d=e),,as select 1 as x
    external,,returns table<x int64>,options(d=e),,
    external,,returns table<x int64>,,language testlang,as select 1 as x
    external,,returns table<x int64>,,language testlang,
    external,,returns table<x int64>,,,as select 1 as x
    external,,returns table<x int64>,,,
    external,,,options(d=e),language testlang,as select 1 as x
    external,,,options(d=e),language testlang,
    external,,,options(d=e),,as select 1 as x
    external,,,options(d=e),,
    external,,,,language testlang,as select 1 as x
    external,,,,language testlang,
    external,,,,,as select 1 as x
    external,,,,,
--
ERROR: Syntax error: CREATE EXTERNAL TABLE FUNCTION is not supported [at 4:1]
external
^
--
ALTERNATION GROUP: or replace,temporary,,if not exists,returns table<x int64>,options(d=e),language testlang,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-141] [create or...select 1 as x]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  TVFSchema [79-93] [table<x int64>]
    TVFSchemaColumn [85-92] [x int64]
      Identifier(x) [85-86] [x]
      SimpleType [87-92] [int64]
        PathExpression [87-92] [int64]
          Identifier(int64) [87-92] [int64]
  OptionsList [101-106] [(d=e)]
    OptionsEntry [102-105] [d=e]
      Identifier(d) [102-103] [d]
      PathExpression [104-105] [e]
        Identifier(e) [104-105] [e]
  Identifier(testlang) [116-124] [testlang]
  Query [128-141] [select 1 as x]
    Select [128-141] [select 1 as x]
      SelectList [135-141] [1 as x]
        SelectColumn [135-141] [1 as x]
          IntLiteral(1) [135-136] [1]
          Alias [137-141] [as x]
            Identifier(x) [140-141] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e) LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,if not exists,returns table<x int64>,options(d=e),language testlang,
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-124] [create or...language testlang]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  TVFSchema [79-93] [table<x int64>]
    TVFSchemaColumn [85-92] [x int64]
      Identifier(x) [85-86] [x]
      SimpleType [87-92] [int64]
        PathExpression [87-92] [int64]
          Identifier(int64) [87-92] [int64]
  OptionsList [101-106] [(d=e)]
    OptionsEntry [102-105] [d=e]
      Identifier(d) [102-103] [d]
      PathExpression [104-105] [e]
        Identifier(e) [104-105] [e]
  Identifier(testlang) [116-124] [testlang]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e) LANGUAGE testlang
--
ALTERNATION GROUP: or replace,temporary,,if not exists,returns table<x int64>,options(d=e),,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-124] [create or...select 1 as x]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  TVFSchema [79-93] [table<x int64>]
    TVFSchemaColumn [85-92] [x int64]
      Identifier(x) [85-86] [x]
      SimpleType [87-92] [int64]
        PathExpression [87-92] [int64]
          Identifier(int64) [87-92] [int64]
  OptionsList [101-106] [(d=e)]
    OptionsEntry [102-105] [d=e]
      Identifier(d) [102-103] [d]
      PathExpression [104-105] [e]
        Identifier(e) [104-105] [e]
  Query [111-124] [select 1 as x]
    Select [111-124] [select 1 as x]
      SelectList [118-124] [1 as x]
        SelectColumn [118-124] [1 as x]
          IntLiteral(1) [118-119] [1]
          Alias [120-124] [as x]
            Identifier(x) [123-124] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,if not exists,returns table<x int64>,options(d=e),,
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-106] [create or...options(d=e)]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  TVFSchema [79-93] [table<x int64>]
    TVFSchemaColumn [85-92] [x int64]
      Identifier(x) [85-86] [x]
      SimpleType [87-92] [int64]
        PathExpression [87-92] [int64]
          Identifier(int64) [87-92] [int64]
  OptionsList [101-106] [(d=e)]
    OptionsEntry [102-105] [d=e]
      Identifier(d) [102-103] [d]
      PathExpression [104-105] [e]
        Identifier(e) [104-105] [e]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e)
--
ALTERNATION GROUP: or replace,temporary,,if not exists,returns table<x int64>,,language testlang,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-129] [create or...select 1 as x]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  TVFSchema [79-93] [table<x int64>]
    TVFSchemaColumn [85-92] [x int64]
      Identifier(x) [85-86] [x]
      SimpleType [87-92] [int64]
        PathExpression [87-92] [int64]
          Identifier(int64) [87-92] [int64]
  Identifier(testlang) [104-112] [testlang]
  Query [116-129] [select 1 as x]
    Select [116-129] [select 1 as x]
      SelectList [123-129] [1 as x]
        SelectColumn [123-129] [1 as x]
          IntLiteral(1) [123-124] [1]
          Alias [125-129] [as x]
            Identifier(x) [128-129] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,if not exists,returns table<x int64>,,language testlang,
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-112] [create or...language testlang]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  TVFSchema [79-93] [table<x int64>]
    TVFSchemaColumn [85-92] [x int64]
      Identifier(x) [85-86] [x]
      SimpleType [87-92] [int64]
        PathExpression [87-92] [int64]
          Identifier(int64) [87-92] [int64]
  Identifier(testlang) [104-112] [testlang]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang
--
ALTERNATION GROUP: or replace,temporary,,if not exists,returns table<x int64>,,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-112] [create or...select 1 as x]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  TVFSchema [79-93] [table<x int64>]
    TVFSchemaColumn [85-92] [x int64]
      Identifier(x) [85-86] [x]
      SimpleType [87-92] [int64]
        PathExpression [87-92] [int64]
          Identifier(int64) [87-92] [int64]
  Query [99-112] [select 1 as x]
    Select [99-112] [select 1 as x]
      SelectList [106-112] [1 as x]
        SelectColumn [106-112] [1 as x]
          IntLiteral(1) [106-107] [1]
          Alias [108-112] [as x]
            Identifier(x) [111-112] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,if not exists,returns table<x int64>,,,
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-93] [create or...table<x int64>]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  TVFSchema [79-93] [table<x int64>]
    TVFSchemaColumn [85-92] [x int64]
      Identifier(x) [85-86] [x]
      SimpleType [87-92] [int64]
        PathExpression [87-92] [int64]
          Identifier(int64) [87-92] [int64]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 >
--
ALTERNATION GROUP: or replace,temporary,,if not exists,,options(d=e),language testlang,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-119] [create or...select 1 as x]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  OptionsList [79-84] [(d=e)]
    OptionsEntry [80-83] [d=e]
      Identifier(d) [80-81] [d]
      PathExpression [82-83] [e]
        Identifier(e) [82-83] [e]
  Identifier(testlang) [94-102] [testlang]
  Query [106-119] [select 1 as x]
    Select [106-119] [select 1 as x]
      SelectList [113-119] [1 as x]
        SelectColumn [113-119] [1 as x]
          IntLiteral(1) [113-114] [1]
          Alias [115-119] [as x]
            Identifier(x) [118-119] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
OPTIONS
  (d = e) LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,if not exists,,options(d=e),language testlang,
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-102] [create or...language testlang]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  OptionsList [79-84] [(d=e)]
    OptionsEntry [80-83] [d=e]
      Identifier(d) [80-81] [d]
      PathExpression [82-83] [e]
        Identifier(e) [82-83] [e]
  Identifier(testlang) [94-102] [testlang]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
OPTIONS
  (d = e) LANGUAGE testlang
--
ALTERNATION GROUP: or replace,temporary,,if not exists,,options(d=e),,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-102] [create or...select 1 as x]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  OptionsList [79-84] [(d=e)]
    OptionsEntry [80-83] [d=e]
      Identifier(d) [80-81] [d]
      PathExpression [82-83] [e]
        Identifier(e) [82-83] [e]
  Query [89-102] [select 1 as x]
    Select [89-102] [select 1 as x]
      SelectList [96-102] [1 as x]
        SelectColumn [96-102] [1 as x]
          IntLiteral(1) [96-97] [1]
          Alias [98-102] [as x]
            Identifier(x) [101-102] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
OPTIONS
  (d = e) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,if not exists,,options(d=e),,
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-84] [create or...options(d=e)]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  OptionsList [79-84] [(d=e)]
    OptionsEntry [80-83] [d=e]
      Identifier(d) [80-81] [d]
      PathExpression [82-83] [e]
        Identifier(e) [82-83] [e]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
OPTIONS
  (d = e)
--
ALTERNATION GROUP: or replace,temporary,,if not exists,,,language testlang,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-107] [create or...select 1 as x]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  Identifier(testlang) [82-90] [testlang]
  Query [94-107] [select 1 as x]
    Select [94-107] [select 1 as x]
      SelectList [101-107] [1 as x]
        SelectColumn [101-107] [1 as x]
          IntLiteral(1) [101-102] [1]
          Alias [103-107] [as x]
            Identifier(x) [106-107] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,if not exists,,,language testlang,
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-90] [create or...language testlang]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  Identifier(testlang) [82-90] [testlang]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
LANGUAGE testlang
--
ALTERNATION GROUP: or replace,temporary,,if not exists,,,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-90] [create or...select 1 as x]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  Query [77-90] [select 1 as x]
    Select [77-90] [select 1 as x]
      SelectList [84-90] [1 as x]
        SelectColumn [84-90] [1 as x]
          IntLiteral(1) [84-85] [1]
          Alias [86-90] [as x]
            Identifier(x) [89-90] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,if not exists,,,,
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-70] [create or...myfunction()]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
--
ALTERNATION GROUP: or replace,temporary,,,returns table<x int64>,options(d=e),language testlang,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-128] [create or...select 1 as x]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  TVFSchema [66-80] [table<x int64>]
    TVFSchemaColumn [72-79] [x int64]
      Identifier(x) [72-73] [x]
      SimpleType [74-79] [int64]
        PathExpression [74-79] [int64]
          Identifier(int64) [74-79] [int64]
  OptionsList [88-93] [(d=e)]
    OptionsEntry [89-92] [d=e]
      Identifier(d) [89-90] [d]
      PathExpression [91-92] [e]
        Identifier(e) [91-92] [e]
  Identifier(testlang) [103-111] [testlang]
  Query [115-128] [select 1 as x]
    Select [115-128] [select 1 as x]
      SelectList [122-128] [1 as x]
        SelectColumn [122-128] [1 as x]
          IntLiteral(1) [122-123] [1]
          Alias [124-128] [as x]
            Identifier(x) [127-128] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e) LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,,returns table<x int64>,options(d=e),language testlang,
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-111] [create or...language testlang]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  TVFSchema [66-80] [table<x int64>]
    TVFSchemaColumn [72-79] [x int64]
      Identifier(x) [72-73] [x]
      SimpleType [74-79] [int64]
        PathExpression [74-79] [int64]
          Identifier(int64) [74-79] [int64]
  OptionsList [88-93] [(d=e)]
    OptionsEntry [89-92] [d=e]
      Identifier(d) [89-90] [d]
      PathExpression [91-92] [e]
        Identifier(e) [91-92] [e]
  Identifier(testlang) [103-111] [testlang]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e) LANGUAGE testlang
--
ALTERNATION GROUP: or replace,temporary,,,returns table<x int64>,options(d=e),,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-111] [create or...select 1 as x]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  TVFSchema [66-80] [table<x int64>]
    TVFSchemaColumn [72-79] [x int64]
      Identifier(x) [72-73] [x]
      SimpleType [74-79] [int64]
        PathExpression [74-79] [int64]
          Identifier(int64) [74-79] [int64]
  OptionsList [88-93] [(d=e)]
    OptionsEntry [89-92] [d=e]
      Identifier(d) [89-90] [d]
      PathExpression [91-92] [e]
        Identifier(e) [91-92] [e]
  Query [98-111] [select 1 as x]
    Select [98-111] [select 1 as x]
      SelectList [105-111] [1 as x]
        SelectColumn [105-111] [1 as x]
          IntLiteral(1) [105-106] [1]
          Alias [107-111] [as x]
            Identifier(x) [110-111] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,,returns table<x int64>,options(d=e),,
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-93] [create or...options(d=e)]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  TVFSchema [66-80] [table<x int64>]
    TVFSchemaColumn [72-79] [x int64]
      Identifier(x) [72-73] [x]
      SimpleType [74-79] [int64]
        PathExpression [74-79] [int64]
          Identifier(int64) [74-79] [int64]
  OptionsList [88-93] [(d=e)]
    OptionsEntry [89-92] [d=e]
      Identifier(d) [89-90] [d]
      PathExpression [91-92] [e]
        Identifier(e) [91-92] [e]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e)
--
ALTERNATION GROUP: or replace,temporary,,,returns table<x int64>,,language testlang,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-116] [create or...select 1 as x]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  TVFSchema [66-80] [table<x int64>]
    TVFSchemaColumn [72-79] [x int64]
      Identifier(x) [72-73] [x]
      SimpleType [74-79] [int64]
        PathExpression [74-79] [int64]
          Identifier(int64) [74-79] [int64]
  Identifier(testlang) [91-99] [testlang]
  Query [103-116] [select 1 as x]
    Select [103-116] [select 1 as x]
      SelectList [110-116] [1 as x]
        SelectColumn [110-116] [1 as x]
          IntLiteral(1) [110-111] [1]
          Alias [112-116] [as x]
            Identifier(x) [115-116] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,,returns table<x int64>,,language testlang,
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-99] [create or...language testlang]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  TVFSchema [66-80] [table<x int64>]
    TVFSchemaColumn [72-79] [x int64]
      Identifier(x) [72-73] [x]
      SimpleType [74-79] [int64]
        PathExpression [74-79] [int64]
          Identifier(int64) [74-79] [int64]
  Identifier(testlang) [91-99] [testlang]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang
--
ALTERNATION GROUP: or replace,temporary,,,returns table<x int64>,,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-99] [create or...select 1 as x]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  TVFSchema [66-80] [table<x int64>]
    TVFSchemaColumn [72-79] [x int64]
      Identifier(x) [72-73] [x]
      SimpleType [74-79] [int64]
        PathExpression [74-79] [int64]
          Identifier(int64) [74-79] [int64]
  Query [86-99] [select 1 as x]
    Select [86-99] [select 1 as x]
      SelectList [93-99] [1 as x]
        SelectColumn [93-99] [1 as x]
          IntLiteral(1) [93-94] [1]
          Alias [95-99] [as x]
            Identifier(x) [98-99] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,,returns table<x int64>,,,
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-80] [create or...table<x int64>]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  TVFSchema [66-80] [table<x int64>]
    TVFSchemaColumn [72-79] [x int64]
      Identifier(x) [72-73] [x]
      SimpleType [74-79] [int64]
        PathExpression [74-79] [int64]
          Identifier(int64) [74-79] [int64]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 >
--
ALTERNATION GROUP: or replace,temporary,,,,options(d=e),language testlang,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-106] [create or...select 1 as x]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  OptionsList [66-71] [(d=e)]
    OptionsEntry [67-70] [d=e]
      Identifier(d) [67-68] [d]
      PathExpression [69-70] [e]
        Identifier(e) [69-70] [e]
  Identifier(testlang) [81-89] [testlang]
  Query [93-106] [select 1 as x]
    Select [93-106] [select 1 as x]
      SelectList [100-106] [1 as x]
        SelectColumn [100-106] [1 as x]
          IntLiteral(1) [100-101] [1]
          Alias [102-106] [as x]
            Identifier(x) [105-106] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
OPTIONS
  (d = e) LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,,,options(d=e),language testlang,
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-89] [create or...language testlang]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  OptionsList [66-71] [(d=e)]
    OptionsEntry [67-70] [d=e]
      Identifier(d) [67-68] [d]
      PathExpression [69-70] [e]
        Identifier(e) [69-70] [e]
  Identifier(testlang) [81-89] [testlang]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
OPTIONS
  (d = e) LANGUAGE testlang
--
ALTERNATION GROUP: or replace,temporary,,,,options(d=e),,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-89] [create or...select 1 as x]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  OptionsList [66-71] [(d=e)]
    OptionsEntry [67-70] [d=e]
      Identifier(d) [67-68] [d]
      PathExpression [69-70] [e]
        Identifier(e) [69-70] [e]
  Query [76-89] [select 1 as x]
    Select [76-89] [select 1 as x]
      SelectList [83-89] [1 as x]
        SelectColumn [83-89] [1 as x]
          IntLiteral(1) [83-84] [1]
          Alias [85-89] [as x]
            Identifier(x) [88-89] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
OPTIONS
  (d = e) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,,,options(d=e),,
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-71] [create or...options(d=e)]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  OptionsList [66-71] [(d=e)]
    OptionsEntry [67-70] [d=e]
      Identifier(d) [67-68] [d]
      PathExpression [69-70] [e]
        Identifier(e) [69-70] [e]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
OPTIONS
  (d = e)
--
ALTERNATION GROUP: or replace,temporary,,,,,language testlang,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-94] [create or...select 1 as x]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  Identifier(testlang) [69-77] [testlang]
  Query [81-94] [select 1 as x]
    Select [81-94] [select 1 as x]
      SelectList [88-94] [1 as x]
        SelectColumn [88-94] [1 as x]
          IntLiteral(1) [88-89] [1]
          Alias [90-94] [as x]
            Identifier(x) [93-94] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,,,,language testlang,
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-77] [create or...language testlang]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  Identifier(testlang) [69-77] [testlang]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
LANGUAGE testlang
--
ALTERNATION GROUP: or replace,temporary,,,,,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-77] [create or...select 1 as x]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  Query [64-77] [select 1 as x]
    Select [64-77] [select 1 as x]
      SelectList [71-77] [1 as x]
        SelectColumn [71-77] [1 as x]
          IntLiteral(1) [71-72] [1]
          Alias [73-77] [as x]
            Identifier(x) [76-77] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,,,,,
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-57] [create or...myfunction()]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
--
ALTERNATION GROUP: or replace,,,if not exists,returns table<x int64>,options(d=e),language testlang,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-132] [create or...select 1 as x]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  TVFSchema [70-84] [table<x int64>]
    TVFSchemaColumn [76-83] [x int64]
      Identifier(x) [76-77] [x]
      SimpleType [78-83] [int64]
        PathExpression [78-83] [int64]
          Identifier(int64) [78-83] [int64]
  OptionsList [92-97] [(d=e)]
    OptionsEntry [93-96] [d=e]
      Identifier(d) [93-94] [d]
      PathExpression [95-96] [e]
        Identifier(e) [95-96] [e]
  Identifier(testlang) [107-115] [testlang]
  Query [119-132] [select 1 as x]
    Select [119-132] [select 1 as x]
      SelectList [126-132] [1 as x]
        SelectColumn [126-132] [1 as x]
          IntLiteral(1) [126-127] [1]
          Alias [128-132] [as x]
            Identifier(x) [131-132] [x]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e) LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,if not exists,returns table<x int64>,options(d=e),language testlang,
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-115] [create or...language testlang]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  TVFSchema [70-84] [table<x int64>]
    TVFSchemaColumn [76-83] [x int64]
      Identifier(x) [76-77] [x]
      SimpleType [78-83] [int64]
        PathExpression [78-83] [int64]
          Identifier(int64) [78-83] [int64]
  OptionsList [92-97] [(d=e)]
    OptionsEntry [93-96] [d=e]
      Identifier(d) [93-94] [d]
      PathExpression [95-96] [e]
        Identifier(e) [95-96] [e]
  Identifier(testlang) [107-115] [testlang]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e) LANGUAGE testlang
--
ALTERNATION GROUP: or replace,,,if not exists,returns table<x int64>,options(d=e),,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-115] [create or...select 1 as x]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  TVFSchema [70-84] [table<x int64>]
    TVFSchemaColumn [76-83] [x int64]
      Identifier(x) [76-77] [x]
      SimpleType [78-83] [int64]
        PathExpression [78-83] [int64]
          Identifier(int64) [78-83] [int64]
  OptionsList [92-97] [(d=e)]
    OptionsEntry [93-96] [d=e]
      Identifier(d) [93-94] [d]
      PathExpression [95-96] [e]
        Identifier(e) [95-96] [e]
  Query [102-115] [select 1 as x]
    Select [102-115] [select 1 as x]
      SelectList [109-115] [1 as x]
        SelectColumn [109-115] [1 as x]
          IntLiteral(1) [109-110] [1]
          Alias [111-115] [as x]
            Identifier(x) [114-115] [x]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,if not exists,returns table<x int64>,options(d=e),,
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-97] [create or...options(d=e)]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  TVFSchema [70-84] [table<x int64>]
    TVFSchemaColumn [76-83] [x int64]
      Identifier(x) [76-77] [x]
      SimpleType [78-83] [int64]
        PathExpression [78-83] [int64]
          Identifier(int64) [78-83] [int64]
  OptionsList [92-97] [(d=e)]
    OptionsEntry [93-96] [d=e]
      Identifier(d) [93-94] [d]
      PathExpression [95-96] [e]
        Identifier(e) [95-96] [e]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e)
--
ALTERNATION GROUP: or replace,,,if not exists,returns table<x int64>,,language testlang,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-120] [create or...select 1 as x]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  TVFSchema [70-84] [table<x int64>]
    TVFSchemaColumn [76-83] [x int64]
      Identifier(x) [76-77] [x]
      SimpleType [78-83] [int64]
        PathExpression [78-83] [int64]
          Identifier(int64) [78-83] [int64]
  Identifier(testlang) [95-103] [testlang]
  Query [107-120] [select 1 as x]
    Select [107-120] [select 1 as x]
      SelectList [114-120] [1 as x]
        SelectColumn [114-120] [1 as x]
          IntLiteral(1) [114-115] [1]
          Alias [116-120] [as x]
            Identifier(x) [119-120] [x]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,if not exists,returns table<x int64>,,language testlang,
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-103] [create or...language testlang]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  TVFSchema [70-84] [table<x int64>]
    TVFSchemaColumn [76-83] [x int64]
      Identifier(x) [76-77] [x]
      SimpleType [78-83] [int64]
        PathExpression [78-83] [int64]
          Identifier(int64) [78-83] [int64]
  Identifier(testlang) [95-103] [testlang]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang
--
ALTERNATION GROUP: or replace,,,if not exists,returns table<x int64>,,,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-103] [create or...select 1 as x]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  TVFSchema [70-84] [table<x int64>]
    TVFSchemaColumn [76-83] [x int64]
      Identifier(x) [76-77] [x]
      SimpleType [78-83] [int64]
        PathExpression [78-83] [int64]
          Identifier(int64) [78-83] [int64]
  Query [90-103] [select 1 as x]
    Select [90-103] [select 1 as x]
      SelectList [97-103] [1 as x]
        SelectColumn [97-103] [1 as x]
          IntLiteral(1) [97-98] [1]
          Alias [99-103] [as x]
            Identifier(x) [102-103] [x]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,if not exists,returns table<x int64>,,,
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-84] [create or...table<x int64>]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  TVFSchema [70-84] [table<x int64>]
    TVFSchemaColumn [76-83] [x int64]
      Identifier(x) [76-77] [x]
      SimpleType [78-83] [int64]
        PathExpression [78-83] [int64]
          Identifier(int64) [78-83] [int64]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 >
--
ALTERNATION GROUP: or replace,,,if not exists,,options(d=e),language testlang,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-110] [create or...select 1 as x]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  OptionsList [70-75] [(d=e)]
    OptionsEntry [71-74] [d=e]
      Identifier(d) [71-72] [d]
      PathExpression [73-74] [e]
        Identifier(e) [73-74] [e]
  Identifier(testlang) [85-93] [testlang]
  Query [97-110] [select 1 as x]
    Select [97-110] [select 1 as x]
      SelectList [104-110] [1 as x]
        SelectColumn [104-110] [1 as x]
          IntLiteral(1) [104-105] [1]
          Alias [106-110] [as x]
            Identifier(x) [109-110] [x]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
OPTIONS
  (d = e) LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,if not exists,,options(d=e),language testlang,
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-93] [create or...language testlang]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  OptionsList [70-75] [(d=e)]
    OptionsEntry [71-74] [d=e]
      Identifier(d) [71-72] [d]
      PathExpression [73-74] [e]
        Identifier(e) [73-74] [e]
  Identifier(testlang) [85-93] [testlang]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
OPTIONS
  (d = e) LANGUAGE testlang
--
ALTERNATION GROUP: or replace,,,if not exists,,options(d=e),,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-93] [create or...select 1 as x]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  OptionsList [70-75] [(d=e)]
    OptionsEntry [71-74] [d=e]
      Identifier(d) [71-72] [d]
      PathExpression [73-74] [e]
        Identifier(e) [73-74] [e]
  Query [80-93] [select 1 as x]
    Select [80-93] [select 1 as x]
      SelectList [87-93] [1 as x]
        SelectColumn [87-93] [1 as x]
          IntLiteral(1) [87-88] [1]
          Alias [89-93] [as x]
            Identifier(x) [92-93] [x]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
OPTIONS
  (d = e) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,if not exists,,options(d=e),,
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-75] [create or...options(d=e)]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  OptionsList [70-75] [(d=e)]
    OptionsEntry [71-74] [d=e]
      Identifier(d) [71-72] [d]
      PathExpression [73-74] [e]
        Identifier(e) [73-74] [e]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
OPTIONS
  (d = e)
--
ALTERNATION GROUP: or replace,,,if not exists,,,language testlang,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-98] [create or...select 1 as x]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  Identifier(testlang) [73-81] [testlang]
  Query [85-98] [select 1 as x]
    Select [85-98] [select 1 as x]
      SelectList [92-98] [1 as x]
        SelectColumn [92-98] [1 as x]
          IntLiteral(1) [92-93] [1]
          Alias [94-98] [as x]
            Identifier(x) [97-98] [x]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,if not exists,,,language testlang,
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-81] [create or...language testlang]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  Identifier(testlang) [73-81] [testlang]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
LANGUAGE testlang
--
ALTERNATION GROUP: or replace,,,if not exists,,,,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-81] [create or...select 1 as x]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  Query [68-81] [select 1 as x]
    Select [68-81] [select 1 as x]
      SelectList [75-81] [1 as x]
        SelectColumn [75-81] [1 as x]
          IntLiteral(1) [75-76] [1]
          Alias [77-81] [as x]
            Identifier(x) [80-81] [x]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,if not exists,,,,
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-61] [create or...myfunction()]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
--
ALTERNATION GROUP: or replace,,,,returns table<x int64>,options(d=e),language testlang,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace) [0-119] [create or...select 1 as x]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  TVFSchema [57-71] [table<x int64>]
    TVFSchemaColumn [63-70] [x int64]
      Identifier(x) [63-64] [x]
      SimpleType [65-70] [int64]
        PathExpression [65-70] [int64]
          Identifier(int64) [65-70] [int64]
  OptionsList [79-84] [(d=e)]
    OptionsEntry [80-83] [d=e]
      Identifier(d) [80-81] [d]
      PathExpression [82-83] [e]
        Identifier(e) [82-83] [e]
  Identifier(testlang) [94-102] [testlang]
  Query [106-119] [select 1 as x]
    Select [106-119] [select 1 as x]
      SelectList [113-119] [1 as x]
        SelectColumn [113-119] [1 as x]
          IntLiteral(1) [113-114] [1]
          Alias [115-119] [as x]
            Identifier(x) [118-119] [x]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e) LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,,returns table<x int64>,options(d=e),language testlang,
--
CreateTableFunctionStatement(is_or_replace) [0-102] [create or...language testlang]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  TVFSchema [57-71] [table<x int64>]
    TVFSchemaColumn [63-70] [x int64]
      Identifier(x) [63-64] [x]
      SimpleType [65-70] [int64]
        PathExpression [65-70] [int64]
          Identifier(int64) [65-70] [int64]
  OptionsList [79-84] [(d=e)]
    OptionsEntry [80-83] [d=e]
      Identifier(d) [80-81] [d]
      PathExpression [82-83] [e]
        Identifier(e) [82-83] [e]
  Identifier(testlang) [94-102] [testlang]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e) LANGUAGE testlang
--
ALTERNATION GROUP: or replace,,,,returns table<x int64>,options(d=e),,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace) [0-102] [create or...select 1 as x]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  TVFSchema [57-71] [table<x int64>]
    TVFSchemaColumn [63-70] [x int64]
      Identifier(x) [63-64] [x]
      SimpleType [65-70] [int64]
        PathExpression [65-70] [int64]
          Identifier(int64) [65-70] [int64]
  OptionsList [79-84] [(d=e)]
    OptionsEntry [80-83] [d=e]
      Identifier(d) [80-81] [d]
      PathExpression [82-83] [e]
        Identifier(e) [82-83] [e]
  Query [89-102] [select 1 as x]
    Select [89-102] [select 1 as x]
      SelectList [96-102] [1 as x]
        SelectColumn [96-102] [1 as x]
          IntLiteral(1) [96-97] [1]
          Alias [98-102] [as x]
            Identifier(x) [101-102] [x]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,,returns table<x int64>,options(d=e),,
--
CreateTableFunctionStatement(is_or_replace) [0-84] [create or...options(d=e)]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  TVFSchema [57-71] [table<x int64>]
    TVFSchemaColumn [63-70] [x int64]
      Identifier(x) [63-64] [x]
      SimpleType [65-70] [int64]
        PathExpression [65-70] [int64]
          Identifier(int64) [65-70] [int64]
  OptionsList [79-84] [(d=e)]
    OptionsEntry [80-83] [d=e]
      Identifier(d) [80-81] [d]
      PathExpression [82-83] [e]
        Identifier(e) [82-83] [e]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e)
--
ALTERNATION GROUP: or replace,,,,returns table<x int64>,,language testlang,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace) [0-107] [create or...select 1 as x]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  TVFSchema [57-71] [table<x int64>]
    TVFSchemaColumn [63-70] [x int64]
      Identifier(x) [63-64] [x]
      SimpleType [65-70] [int64]
        PathExpression [65-70] [int64]
          Identifier(int64) [65-70] [int64]
  Identifier(testlang) [82-90] [testlang]
  Query [94-107] [select 1 as x]
    Select [94-107] [select 1 as x]
      SelectList [101-107] [1 as x]
        SelectColumn [101-107] [1 as x]
          IntLiteral(1) [101-102] [1]
          Alias [103-107] [as x]
            Identifier(x) [106-107] [x]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,,returns table<x int64>,,language testlang,
--
CreateTableFunctionStatement(is_or_replace) [0-90] [create or...language testlang]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  TVFSchema [57-71] [table<x int64>]
    TVFSchemaColumn [63-70] [x int64]
      Identifier(x) [63-64] [x]
      SimpleType [65-70] [int64]
        PathExpression [65-70] [int64]
          Identifier(int64) [65-70] [int64]
  Identifier(testlang) [82-90] [testlang]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang
--
ALTERNATION GROUP: or replace,,,,returns table<x int64>,,,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace) [0-90] [create or...select 1 as x]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  TVFSchema [57-71] [table<x int64>]
    TVFSchemaColumn [63-70] [x int64]
      Identifier(x) [63-64] [x]
      SimpleType [65-70] [int64]
        PathExpression [65-70] [int64]
          Identifier(int64) [65-70] [int64]
  Query [77-90] [select 1 as x]
    Select [77-90] [select 1 as x]
      SelectList [84-90] [1 as x]
        SelectColumn [84-90] [1 as x]
          IntLiteral(1) [84-85] [1]
          Alias [86-90] [as x]
            Identifier(x) [89-90] [x]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,,returns table<x int64>,,,
--
CreateTableFunctionStatement(is_or_replace) [0-71] [create or...table<x int64>]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  TVFSchema [57-71] [table<x int64>]
    TVFSchemaColumn [63-70] [x int64]
      Identifier(x) [63-64] [x]
      SimpleType [65-70] [int64]
        PathExpression [65-70] [int64]
          Identifier(int64) [65-70] [int64]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 >
--
ALTERNATION GROUP: or replace,,,,,options(d=e),language testlang,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace) [0-97] [create or...select 1 as x]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  OptionsList [57-62] [(d=e)]
    OptionsEntry [58-61] [d=e]
      Identifier(d) [58-59] [d]
      PathExpression [60-61] [e]
        Identifier(e) [60-61] [e]
  Identifier(testlang) [72-80] [testlang]
  Query [84-97] [select 1 as x]
    Select [84-97] [select 1 as x]
      SelectList [91-97] [1 as x]
        SelectColumn [91-97] [1 as x]
          IntLiteral(1) [91-92] [1]
          Alias [93-97] [as x]
            Identifier(x) [96-97] [x]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
OPTIONS
  (d = e) LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,,,options(d=e),language testlang,
--
CreateTableFunctionStatement(is_or_replace) [0-80] [create or...language testlang]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  OptionsList [57-62] [(d=e)]
    OptionsEntry [58-61] [d=e]
      Identifier(d) [58-59] [d]
      PathExpression [60-61] [e]
        Identifier(e) [60-61] [e]
  Identifier(testlang) [72-80] [testlang]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
OPTIONS
  (d = e) LANGUAGE testlang
--
ALTERNATION GROUP: or replace,,,,,options(d=e),,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace) [0-80] [create or...select 1 as x]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  OptionsList [57-62] [(d=e)]
    OptionsEntry [58-61] [d=e]
      Identifier(d) [58-59] [d]
      PathExpression [60-61] [e]
        Identifier(e) [60-61] [e]
  Query [67-80] [select 1 as x]
    Select [67-80] [select 1 as x]
      SelectList [74-80] [1 as x]
        SelectColumn [74-80] [1 as x]
          IntLiteral(1) [74-75] [1]
          Alias [76-80] [as x]
            Identifier(x) [79-80] [x]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
OPTIONS
  (d = e) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,,,options(d=e),,
--
CreateTableFunctionStatement(is_or_replace) [0-62] [create or...options(d=e)]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  OptionsList [57-62] [(d=e)]
    OptionsEntry [58-61] [d=e]
      Identifier(d) [58-59] [d]
      PathExpression [60-61] [e]
        Identifier(e) [60-61] [e]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
OPTIONS
  (d = e)
--
ALTERNATION GROUP: or replace,,,,,,language testlang,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace) [0-85] [create or...select 1 as x]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  Identifier(testlang) [60-68] [testlang]
  Query [72-85] [select 1 as x]
    Select [72-85] [select 1 as x]
      SelectList [79-85] [1 as x]
        SelectColumn [79-85] [1 as x]
          IntLiteral(1) [79-80] [1]
          Alias [81-85] [as x]
            Identifier(x) [84-85] [x]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,,,,language testlang,
--
CreateTableFunctionStatement(is_or_replace) [0-68] [create or...language testlang]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  Identifier(testlang) [60-68] [testlang]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
LANGUAGE testlang
--
ALTERNATION GROUP: or replace,,,,,,,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace) [0-68] [create or...select 1 as x]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  Query [55-68] [select 1 as x]
    Select [55-68] [select 1 as x]
      SelectList [62-68] [1 as x]
        SelectColumn [62-68] [1 as x]
          IntLiteral(1) [62-63] [1]
          Alias [64-68] [as x]
            Identifier(x) [67-68] [x]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,,,,,
--
CreateTableFunctionStatement(is_or_replace) [0-48] [create or...myfunction()]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
--
ALTERNATION GROUP: temporary,,if not exists,returns table<x int64>,options(d=e),language testlang,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-131] [create  temporary...ect 1 as x]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  TVFSchema [69-83] [table<x int64>]
    TVFSchemaColumn [75-82] [x int64]
      Identifier(x) [75-76] [x]
      SimpleType [77-82] [int64]
        PathExpression [77-82] [int64]
          Identifier(int64) [77-82] [int64]
  OptionsList [91-96] [(d=e)]
    OptionsEntry [92-95] [d=e]
      Identifier(d) [92-93] [d]
      PathExpression [94-95] [e]
        Identifier(e) [94-95] [e]
  Identifier(testlang) [106-114] [testlang]
  Query [118-131] [select 1 as x]
    Select [118-131] [select 1 as x]
      SelectList [125-131] [1 as x]
        SelectColumn [125-131] [1 as x]
          IntLiteral(1) [125-126] [1]
          Alias [127-131] [as x]
            Identifier(x) [130-131] [x]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e) LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,if not exists,returns table<x int64>,options(d=e),language testlang,
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-114] [create  temporary...e testlang]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  TVFSchema [69-83] [table<x int64>]
    TVFSchemaColumn [75-82] [x int64]
      Identifier(x) [75-76] [x]
      SimpleType [77-82] [int64]
        PathExpression [77-82] [int64]
          Identifier(int64) [77-82] [int64]
  OptionsList [91-96] [(d=e)]
    OptionsEntry [92-95] [d=e]
      Identifier(d) [92-93] [d]
      PathExpression [94-95] [e]
        Identifier(e) [94-95] [e]
  Identifier(testlang) [106-114] [testlang]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e) LANGUAGE testlang
--
ALTERNATION GROUP: temporary,,if not exists,returns table<x int64>,options(d=e),,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-114] [create  temporary...ect 1 as x]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  TVFSchema [69-83] [table<x int64>]
    TVFSchemaColumn [75-82] [x int64]
      Identifier(x) [75-76] [x]
      SimpleType [77-82] [int64]
        PathExpression [77-82] [int64]
          Identifier(int64) [77-82] [int64]
  OptionsList [91-96] [(d=e)]
    OptionsEntry [92-95] [d=e]
      Identifier(d) [92-93] [d]
      PathExpression [94-95] [e]
        Identifier(e) [94-95] [e]
  Query [101-114] [select 1 as x]
    Select [101-114] [select 1 as x]
      SelectList [108-114] [1 as x]
        SelectColumn [108-114] [1 as x]
          IntLiteral(1) [108-109] [1]
          Alias [110-114] [as x]
            Identifier(x) [113-114] [x]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,if not exists,returns table<x int64>,options(d=e),,
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-96] [create  temporary...tions(d=e)]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  TVFSchema [69-83] [table<x int64>]
    TVFSchemaColumn [75-82] [x int64]
      Identifier(x) [75-76] [x]
      SimpleType [77-82] [int64]
        PathExpression [77-82] [int64]
          Identifier(int64) [77-82] [int64]
  OptionsList [91-96] [(d=e)]
    OptionsEntry [92-95] [d=e]
      Identifier(d) [92-93] [d]
      PathExpression [94-95] [e]
        Identifier(e) [94-95] [e]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e)
--
ALTERNATION GROUP: temporary,,if not exists,returns table<x int64>,,language testlang,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-119] [create  temporary...ect 1 as x]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  TVFSchema [69-83] [table<x int64>]
    TVFSchemaColumn [75-82] [x int64]
      Identifier(x) [75-76] [x]
      SimpleType [77-82] [int64]
        PathExpression [77-82] [int64]
          Identifier(int64) [77-82] [int64]
  Identifier(testlang) [94-102] [testlang]
  Query [106-119] [select 1 as x]
    Select [106-119] [select 1 as x]
      SelectList [113-119] [1 as x]
        SelectColumn [113-119] [1 as x]
          IntLiteral(1) [113-114] [1]
          Alias [115-119] [as x]
            Identifier(x) [118-119] [x]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,if not exists,returns table<x int64>,,language testlang,
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-102] [create  temporary...e testlang]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  TVFSchema [69-83] [table<x int64>]
    TVFSchemaColumn [75-82] [x int64]
      Identifier(x) [75-76] [x]
      SimpleType [77-82] [int64]
        PathExpression [77-82] [int64]
          Identifier(int64) [77-82] [int64]
  Identifier(testlang) [94-102] [testlang]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang
--
ALTERNATION GROUP: temporary,,if not exists,returns table<x int64>,,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-102] [create  temporary...ect 1 as x]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  TVFSchema [69-83] [table<x int64>]
    TVFSchemaColumn [75-82] [x int64]
      Identifier(x) [75-76] [x]
      SimpleType [77-82] [int64]
        PathExpression [77-82] [int64]
          Identifier(int64) [77-82] [int64]
  Query [89-102] [select 1 as x]
    Select [89-102] [select 1 as x]
      SelectList [96-102] [1 as x]
        SelectColumn [96-102] [1 as x]
          IntLiteral(1) [96-97] [1]
          Alias [98-102] [as x]
            Identifier(x) [101-102] [x]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,if not exists,returns table<x int64>,,,
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-83] [create  temporary...e<x int64>]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  TVFSchema [69-83] [table<x int64>]
    TVFSchemaColumn [75-82] [x int64]
      Identifier(x) [75-76] [x]
      SimpleType [77-82] [int64]
        PathExpression [77-82] [int64]
          Identifier(int64) [77-82] [int64]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 >
--
ALTERNATION GROUP: temporary,,if not exists,,options(d=e),language testlang,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-109] [create  temporary...ect 1 as x]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  OptionsList [69-74] [(d=e)]
    OptionsEntry [70-73] [d=e]
      Identifier(d) [70-71] [d]
      PathExpression [72-73] [e]
        Identifier(e) [72-73] [e]
  Identifier(testlang) [84-92] [testlang]
  Query [96-109] [select 1 as x]
    Select [96-109] [select 1 as x]
      SelectList [103-109] [1 as x]
        SelectColumn [103-109] [1 as x]
          IntLiteral(1) [103-104] [1]
          Alias [105-109] [as x]
            Identifier(x) [108-109] [x]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
OPTIONS
  (d = e) LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,if not exists,,options(d=e),language testlang,
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-92] [create  temporary...e testlang]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  OptionsList [69-74] [(d=e)]
    OptionsEntry [70-73] [d=e]
      Identifier(d) [70-71] [d]
      PathExpression [72-73] [e]
        Identifier(e) [72-73] [e]
  Identifier(testlang) [84-92] [testlang]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
OPTIONS
  (d = e) LANGUAGE testlang
--
ALTERNATION GROUP: temporary,,if not exists,,options(d=e),,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-92] [create  temporary...ect 1 as x]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  OptionsList [69-74] [(d=e)]
    OptionsEntry [70-73] [d=e]
      Identifier(d) [70-71] [d]
      PathExpression [72-73] [e]
        Identifier(e) [72-73] [e]
  Query [79-92] [select 1 as x]
    Select [79-92] [select 1 as x]
      SelectList [86-92] [1 as x]
        SelectColumn [86-92] [1 as x]
          IntLiteral(1) [86-87] [1]
          Alias [88-92] [as x]
            Identifier(x) [91-92] [x]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
OPTIONS
  (d = e) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,if not exists,,options(d=e),,
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-74] [create  temporary...tions(d=e)]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  OptionsList [69-74] [(d=e)]
    OptionsEntry [70-73] [d=e]
      Identifier(d) [70-71] [d]
      PathExpression [72-73] [e]
        Identifier(e) [72-73] [e]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
OPTIONS
  (d = e)
--
ALTERNATION GROUP: temporary,,if not exists,,,language testlang,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-97] [create  temporary...ect 1 as x]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  Identifier(testlang) [72-80] [testlang]
  Query [84-97] [select 1 as x]
    Select [84-97] [select 1 as x]
      SelectList [91-97] [1 as x]
        SelectColumn [91-97] [1 as x]
          IntLiteral(1) [91-92] [1]
          Alias [93-97] [as x]
            Identifier(x) [96-97] [x]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,if not exists,,,language testlang,
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-80] [create  temporary...e testlang]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  Identifier(testlang) [72-80] [testlang]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
LANGUAGE testlang
--
ALTERNATION GROUP: temporary,,if not exists,,,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-80] [create  temporary...ect 1 as x]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  Query [67-80] [select 1 as x]
    Select [67-80] [select 1 as x]
      SelectList [74-80] [1 as x]
        SelectColumn [74-80] [1 as x]
          IntLiteral(1) [74-75] [1]
          Alias [76-80] [as x]
            Identifier(x) [79-80] [x]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,if not exists,,,,
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-60] [create  temporary...function()]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
--
ALTERNATION GROUP: temporary,,,returns table<x int64>,options(d=e),language testlang,as select 1 as x
--
CreateTableFunctionStatement(is_temp) [0-118] [create  temporary...ect 1 as x]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  TVFSchema [56-70] [table<x int64>]
    TVFSchemaColumn [62-69] [x int64]
      Identifier(x) [62-63] [x]
      SimpleType [64-69] [int64]
        PathExpression [64-69] [int64]
          Identifier(int64) [64-69] [int64]
  OptionsList [78-83] [(d=e)]
    OptionsEntry [79-82] [d=e]
      Identifier(d) [79-80] [d]
      PathExpression [81-82] [e]
        Identifier(e) [81-82] [e]
  Identifier(testlang) [93-101] [testlang]
  Query [105-118] [select 1 as x]
    Select [105-118] [select 1 as x]
      SelectList [112-118] [1 as x]
        SelectColumn [112-118] [1 as x]
          IntLiteral(1) [112-113] [1]
          Alias [114-118] [as x]
            Identifier(x) [117-118] [x]
--
CREATE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e) LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,,returns table<x int64>,options(d=e),language testlang,
--
CreateTableFunctionStatement(is_temp) [0-101] [create  temporary...e testlang]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  TVFSchema [56-70] [table<x int64>]
    TVFSchemaColumn [62-69] [x int64]
      Identifier(x) [62-63] [x]
      SimpleType [64-69] [int64]
        PathExpression [64-69] [int64]
          Identifier(int64) [64-69] [int64]
  OptionsList [78-83] [(d=e)]
    OptionsEntry [79-82] [d=e]
      Identifier(d) [79-80] [d]
      PathExpression [81-82] [e]
        Identifier(e) [81-82] [e]
  Identifier(testlang) [93-101] [testlang]
--
CREATE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e) LANGUAGE testlang
--
ALTERNATION GROUP: temporary,,,returns table<x int64>,options(d=e),,as select 1 as x
--
CreateTableFunctionStatement(is_temp) [0-101] [create  temporary...ect 1 as x]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  TVFSchema [56-70] [table<x int64>]
    TVFSchemaColumn [62-69] [x int64]
      Identifier(x) [62-63] [x]
      SimpleType [64-69] [int64]
        PathExpression [64-69] [int64]
          Identifier(int64) [64-69] [int64]
  OptionsList [78-83] [(d=e)]
    OptionsEntry [79-82] [d=e]
      Identifier(d) [79-80] [d]
      PathExpression [81-82] [e]
        Identifier(e) [81-82] [e]
  Query [88-101] [select 1 as x]
    Select [88-101] [select 1 as x]
      SelectList [95-101] [1 as x]
        SelectColumn [95-101] [1 as x]
          IntLiteral(1) [95-96] [1]
          Alias [97-101] [as x]
            Identifier(x) [100-101] [x]
--
CREATE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,,returns table<x int64>,options(d=e),,
--
CreateTableFunctionStatement(is_temp) [0-83] [create  temporary...tions(d=e)]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  TVFSchema [56-70] [table<x int64>]
    TVFSchemaColumn [62-69] [x int64]
      Identifier(x) [62-63] [x]
      SimpleType [64-69] [int64]
        PathExpression [64-69] [int64]
          Identifier(int64) [64-69] [int64]
  OptionsList [78-83] [(d=e)]
    OptionsEntry [79-82] [d=e]
      Identifier(d) [79-80] [d]
      PathExpression [81-82] [e]
        Identifier(e) [81-82] [e]
--
CREATE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e)
--
ALTERNATION GROUP: temporary,,,returns table<x int64>,,language testlang,as select 1 as x
--
CreateTableFunctionStatement(is_temp) [0-106] [create  temporary...ect 1 as x]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  TVFSchema [56-70] [table<x int64>]
    TVFSchemaColumn [62-69] [x int64]
      Identifier(x) [62-63] [x]
      SimpleType [64-69] [int64]
        PathExpression [64-69] [int64]
          Identifier(int64) [64-69] [int64]
  Identifier(testlang) [81-89] [testlang]
  Query [93-106] [select 1 as x]
    Select [93-106] [select 1 as x]
      SelectList [100-106] [1 as x]
        SelectColumn [100-106] [1 as x]
          IntLiteral(1) [100-101] [1]
          Alias [102-106] [as x]
            Identifier(x) [105-106] [x]
--
CREATE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,,returns table<x int64>,,language testlang,
--
CreateTableFunctionStatement(is_temp) [0-89] [create  temporary...e testlang]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  TVFSchema [56-70] [table<x int64>]
    TVFSchemaColumn [62-69] [x int64]
      Identifier(x) [62-63] [x]
      SimpleType [64-69] [int64]
        PathExpression [64-69] [int64]
          Identifier(int64) [64-69] [int64]
  Identifier(testlang) [81-89] [testlang]
--
CREATE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang
--
ALTERNATION GROUP: temporary,,,returns table<x int64>,,,as select 1 as x
--
CreateTableFunctionStatement(is_temp) [0-89] [create  temporary...ect 1 as x]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  TVFSchema [56-70] [table<x int64>]
    TVFSchemaColumn [62-69] [x int64]
      Identifier(x) [62-63] [x]
      SimpleType [64-69] [int64]
        PathExpression [64-69] [int64]
          Identifier(int64) [64-69] [int64]
  Query [76-89] [select 1 as x]
    Select [76-89] [select 1 as x]
      SelectList [83-89] [1 as x]
        SelectColumn [83-89] [1 as x]
          IntLiteral(1) [83-84] [1]
          Alias [85-89] [as x]
            Identifier(x) [88-89] [x]
--
CREATE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,,returns table<x int64>,,,
--
CreateTableFunctionStatement(is_temp) [0-70] [create  temporary...e<x int64>]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  TVFSchema [56-70] [table<x int64>]
    TVFSchemaColumn [62-69] [x int64]
      Identifier(x) [62-63] [x]
      SimpleType [64-69] [int64]
        PathExpression [64-69] [int64]
          Identifier(int64) [64-69] [int64]
--
CREATE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 >
--
ALTERNATION GROUP: temporary,,,,options(d=e),language testlang,as select 1 as x
--
CreateTableFunctionStatement(is_temp) [0-96] [create  temporary...ect 1 as x]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  OptionsList [56-61] [(d=e)]
    OptionsEntry [57-60] [d=e]
      Identifier(d) [57-58] [d]
      PathExpression [59-60] [e]
        Identifier(e) [59-60] [e]
  Identifier(testlang) [71-79] [testlang]
  Query [83-96] [select 1 as x]
    Select [83-96] [select 1 as x]
      SelectList [90-96] [1 as x]
        SelectColumn [90-96] [1 as x]
          IntLiteral(1) [90-91] [1]
          Alias [92-96] [as x]
            Identifier(x) [95-96] [x]
--
CREATE TEMP TABLE FUNCTION myfunction()
OPTIONS
  (d = e) LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,,,options(d=e),language testlang,
--
CreateTableFunctionStatement(is_temp) [0-79] [create  temporary...e testlang]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  OptionsList [56-61] [(d=e)]
    OptionsEntry [57-60] [d=e]
      Identifier(d) [57-58] [d]
      PathExpression [59-60] [e]
        Identifier(e) [59-60] [e]
  Identifier(testlang) [71-79] [testlang]
--
CREATE TEMP TABLE FUNCTION myfunction()
OPTIONS
  (d = e) LANGUAGE testlang
--
ALTERNATION GROUP: temporary,,,,options(d=e),,as select 1 as x
--
CreateTableFunctionStatement(is_temp) [0-79] [create  temporary...ect 1 as x]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  OptionsList [56-61] [(d=e)]
    OptionsEntry [57-60] [d=e]
      Identifier(d) [57-58] [d]
      PathExpression [59-60] [e]
        Identifier(e) [59-60] [e]
  Query [66-79] [select 1 as x]
    Select [66-79] [select 1 as x]
      SelectList [73-79] [1 as x]
        SelectColumn [73-79] [1 as x]
          IntLiteral(1) [73-74] [1]
          Alias [75-79] [as x]
            Identifier(x) [78-79] [x]
--
CREATE TEMP TABLE FUNCTION myfunction()
OPTIONS
  (d = e) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,,,options(d=e),,
--
CreateTableFunctionStatement(is_temp) [0-61] [create  temporary...tions(d=e)]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  OptionsList [56-61] [(d=e)]
    OptionsEntry [57-60] [d=e]
      Identifier(d) [57-58] [d]
      PathExpression [59-60] [e]
        Identifier(e) [59-60] [e]
--
CREATE TEMP TABLE FUNCTION myfunction()
OPTIONS
  (d = e)
--
ALTERNATION GROUP: temporary,,,,,language testlang,as select 1 as x
--
CreateTableFunctionStatement(is_temp) [0-84] [create  temporary...ect 1 as x]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  Identifier(testlang) [59-67] [testlang]
  Query [71-84] [select 1 as x]
    Select [71-84] [select 1 as x]
      SelectList [78-84] [1 as x]
        SelectColumn [78-84] [1 as x]
          IntLiteral(1) [78-79] [1]
          Alias [80-84] [as x]
            Identifier(x) [83-84] [x]
--
CREATE TEMP TABLE FUNCTION myfunction()
LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,,,,language testlang,
--
CreateTableFunctionStatement(is_temp) [0-67] [create  temporary...e testlang]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  Identifier(testlang) [59-67] [testlang]
--
CREATE TEMP TABLE FUNCTION myfunction()
LANGUAGE testlang
--
ALTERNATION GROUP: temporary,,,,,,as select 1 as x
--
CreateTableFunctionStatement(is_temp) [0-67] [create  temporary...ect 1 as x]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  Query [54-67] [select 1 as x]
    Select [54-67] [select 1 as x]
      SelectList [61-67] [1 as x]
        SelectColumn [61-67] [1 as x]
          IntLiteral(1) [61-62] [1]
          Alias [63-67] [as x]
            Identifier(x) [66-67] [x]
--
CREATE TEMP TABLE FUNCTION myfunction()
AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,,,,,
--
CreateTableFunctionStatement(is_temp) [0-47] [create  temporary...function()]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
--
CREATE TEMP TABLE FUNCTION myfunction()
--
ALTERNATION GROUP: if not exists,returns table<x int64>,options(d=e),language testlang,as select 1 as x
--
CreateTableFunctionStatement(is_if_not_exists) [0-122] [create...select 1 as x]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  TVFSchema [60-74] [table<x int64>]
    TVFSchemaColumn [66-73] [x int64]
      Identifier(x) [66-67] [x]
      SimpleType [68-73] [int64]
        PathExpression [68-73] [int64]
          Identifier(int64) [68-73] [int64]
  OptionsList [82-87] [(d=e)]
    OptionsEntry [83-86] [d=e]
      Identifier(d) [83-84] [d]
      PathExpression [85-86] [e]
        Identifier(e) [85-86] [e]
  Identifier(testlang) [97-105] [testlang]
  Query [109-122] [select 1 as x]
    Select [109-122] [select 1 as x]
      SelectList [116-122] [1 as x]
        SelectColumn [116-122] [1 as x]
          IntLiteral(1) [116-117] [1]
          Alias [118-122] [as x]
            Identifier(x) [121-122] [x]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e) LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: if not exists,returns table<x int64>,options(d=e),language testlang,
--
CreateTableFunctionStatement(is_if_not_exists) [0-105] [create...language testlang]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  TVFSchema [60-74] [table<x int64>]
    TVFSchemaColumn [66-73] [x int64]
      Identifier(x) [66-67] [x]
      SimpleType [68-73] [int64]
        PathExpression [68-73] [int64]
          Identifier(int64) [68-73] [int64]
  OptionsList [82-87] [(d=e)]
    OptionsEntry [83-86] [d=e]
      Identifier(d) [83-84] [d]
      PathExpression [85-86] [e]
        Identifier(e) [85-86] [e]
  Identifier(testlang) [97-105] [testlang]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e) LANGUAGE testlang
--
ALTERNATION GROUP: if not exists,returns table<x int64>,options(d=e),,as select 1 as x
--
CreateTableFunctionStatement(is_if_not_exists) [0-105] [create...select 1 as x]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  TVFSchema [60-74] [table<x int64>]
    TVFSchemaColumn [66-73] [x int64]
      Identifier(x) [66-67] [x]
      SimpleType [68-73] [int64]
        PathExpression [68-73] [int64]
          Identifier(int64) [68-73] [int64]
  OptionsList [82-87] [(d=e)]
    OptionsEntry [83-86] [d=e]
      Identifier(d) [83-84] [d]
      PathExpression [85-86] [e]
        Identifier(e) [85-86] [e]
  Query [92-105] [select 1 as x]
    Select [92-105] [select 1 as x]
      SelectList [99-105] [1 as x]
        SelectColumn [99-105] [1 as x]
          IntLiteral(1) [99-100] [1]
          Alias [101-105] [as x]
            Identifier(x) [104-105] [x]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: if not exists,returns table<x int64>,options(d=e),,
--
CreateTableFunctionStatement(is_if_not_exists) [0-87] [create...options(d=e)]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  TVFSchema [60-74] [table<x int64>]
    TVFSchemaColumn [66-73] [x int64]
      Identifier(x) [66-67] [x]
      SimpleType [68-73] [int64]
        PathExpression [68-73] [int64]
          Identifier(int64) [68-73] [int64]
  OptionsList [82-87] [(d=e)]
    OptionsEntry [83-86] [d=e]
      Identifier(d) [83-84] [d]
      PathExpression [85-86] [e]
        Identifier(e) [85-86] [e]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e)
--
ALTERNATION GROUP: if not exists,returns table<x int64>,,language testlang,as select 1 as x
--
CreateTableFunctionStatement(is_if_not_exists) [0-110] [create...select 1 as x]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  TVFSchema [60-74] [table<x int64>]
    TVFSchemaColumn [66-73] [x int64]
      Identifier(x) [66-67] [x]
      SimpleType [68-73] [int64]
        PathExpression [68-73] [int64]
          Identifier(int64) [68-73] [int64]
  Identifier(testlang) [85-93] [testlang]
  Query [97-110] [select 1 as x]
    Select [97-110] [select 1 as x]
      SelectList [104-110] [1 as x]
        SelectColumn [104-110] [1 as x]
          IntLiteral(1) [104-105] [1]
          Alias [106-110] [as x]
            Identifier(x) [109-110] [x]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: if not exists,returns table<x int64>,,language testlang,
--
CreateTableFunctionStatement(is_if_not_exists) [0-93] [create...language testlang]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  TVFSchema [60-74] [table<x int64>]
    TVFSchemaColumn [66-73] [x int64]
      Identifier(x) [66-67] [x]
      SimpleType [68-73] [int64]
        PathExpression [68-73] [int64]
          Identifier(int64) [68-73] [int64]
  Identifier(testlang) [85-93] [testlang]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang
--
ALTERNATION GROUP: if not exists,returns table<x int64>,,,as select 1 as x
--
CreateTableFunctionStatement(is_if_not_exists) [0-93] [create...select 1 as x]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  TVFSchema [60-74] [table<x int64>]
    TVFSchemaColumn [66-73] [x int64]
      Identifier(x) [66-67] [x]
      SimpleType [68-73] [int64]
        PathExpression [68-73] [int64]
          Identifier(int64) [68-73] [int64]
  Query [80-93] [select 1 as x]
    Select [80-93] [select 1 as x]
      SelectList [87-93] [1 as x]
        SelectColumn [87-93] [1 as x]
          IntLiteral(1) [87-88] [1]
          Alias [89-93] [as x]
            Identifier(x) [92-93] [x]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: if not exists,returns table<x int64>,,,
--
CreateTableFunctionStatement(is_if_not_exists) [0-74] [create...table<x int64>]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  TVFSchema [60-74] [table<x int64>]
    TVFSchemaColumn [66-73] [x int64]
      Identifier(x) [66-67] [x]
      SimpleType [68-73] [int64]
        PathExpression [68-73] [int64]
          Identifier(int64) [68-73] [int64]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 >
--
ALTERNATION GROUP: if not exists,,options(d=e),language testlang,as select 1 as x
--
CreateTableFunctionStatement(is_if_not_exists) [0-100] [create...select 1 as x]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  OptionsList [60-65] [(d=e)]
    OptionsEntry [61-64] [d=e]
      Identifier(d) [61-62] [d]
      PathExpression [63-64] [e]
        Identifier(e) [63-64] [e]
  Identifier(testlang) [75-83] [testlang]
  Query [87-100] [select 1 as x]
    Select [87-100] [select 1 as x]
      SelectList [94-100] [1 as x]
        SelectColumn [94-100] [1 as x]
          IntLiteral(1) [94-95] [1]
          Alias [96-100] [as x]
            Identifier(x) [99-100] [x]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
OPTIONS
  (d = e) LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: if not exists,,options(d=e),language testlang,
--
CreateTableFunctionStatement(is_if_not_exists) [0-83] [create...language testlang]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  OptionsList [60-65] [(d=e)]
    OptionsEntry [61-64] [d=e]
      Identifier(d) [61-62] [d]
      PathExpression [63-64] [e]
        Identifier(e) [63-64] [e]
  Identifier(testlang) [75-83] [testlang]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
OPTIONS
  (d = e) LANGUAGE testlang
--
ALTERNATION GROUP: if not exists,,options(d=e),,as select 1 as x
--
CreateTableFunctionStatement(is_if_not_exists) [0-83] [create...select 1 as x]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  OptionsList [60-65] [(d=e)]
    OptionsEntry [61-64] [d=e]
      Identifier(d) [61-62] [d]
      PathExpression [63-64] [e]
        Identifier(e) [63-64] [e]
  Query [70-83] [select 1 as x]
    Select [70-83] [select 1 as x]
      SelectList [77-83] [1 as x]
        SelectColumn [77-83] [1 as x]
          IntLiteral(1) [77-78] [1]
          Alias [79-83] [as x]
            Identifier(x) [82-83] [x]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
OPTIONS
  (d = e) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: if not exists,,options(d=e),,
--
CreateTableFunctionStatement(is_if_not_exists) [0-65] [create...options(d=e)]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  OptionsList [60-65] [(d=e)]
    OptionsEntry [61-64] [d=e]
      Identifier(d) [61-62] [d]
      PathExpression [63-64] [e]
        Identifier(e) [63-64] [e]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
OPTIONS
  (d = e)
--
ALTERNATION GROUP: if not exists,,,language testlang,as select 1 as x
--
CreateTableFunctionStatement(is_if_not_exists) [0-88] [create...select 1 as x]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  Identifier(testlang) [63-71] [testlang]
  Query [75-88] [select 1 as x]
    Select [75-88] [select 1 as x]
      SelectList [82-88] [1 as x]
        SelectColumn [82-88] [1 as x]
          IntLiteral(1) [82-83] [1]
          Alias [84-88] [as x]
            Identifier(x) [87-88] [x]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: if not exists,,,language testlang,
--
CreateTableFunctionStatement(is_if_not_exists) [0-71] [create...language testlang]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  Identifier(testlang) [63-71] [testlang]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
LANGUAGE testlang
--
ALTERNATION GROUP: if not exists,,,,as select 1 as x
--
CreateTableFunctionStatement(is_if_not_exists) [0-71] [create...select 1 as x]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  Query [58-71] [select 1 as x]
    Select [58-71] [select 1 as x]
      SelectList [65-71] [1 as x]
        SelectColumn [65-71] [1 as x]
          IntLiteral(1) [65-66] [1]
          Alias [67-71] [as x]
            Identifier(x) [70-71] [x]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: if not exists,,,,
--
CreateTableFunctionStatement(is_if_not_exists) [0-51] [create...myfunction()]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
--
ALTERNATION GROUP: returns table<x int64>,options(d=e),language testlang,as select 1 as x
--
CreateTableFunctionStatement [0-109] [create...select 1 as x]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  TVFSchema [47-61] [table<x int64>]
    TVFSchemaColumn [53-60] [x int64]
      Identifier(x) [53-54] [x]
      SimpleType [55-60] [int64]
        PathExpression [55-60] [int64]
          Identifier(int64) [55-60] [int64]
  OptionsList [69-74] [(d=e)]
    OptionsEntry [70-73] [d=e]
      Identifier(d) [70-71] [d]
      PathExpression [72-73] [e]
        Identifier(e) [72-73] [e]
  Identifier(testlang) [84-92] [testlang]
  Query [96-109] [select 1 as x]
    Select [96-109] [select 1 as x]
      SelectList [103-109] [1 as x]
        SelectColumn [103-109] [1 as x]
          IntLiteral(1) [103-104] [1]
          Alias [105-109] [as x]
            Identifier(x) [108-109] [x]
--
CREATE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e) LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: returns table<x int64>,options(d=e),language testlang,
--
CreateTableFunctionStatement [0-92] [create...language testlang]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  TVFSchema [47-61] [table<x int64>]
    TVFSchemaColumn [53-60] [x int64]
      Identifier(x) [53-54] [x]
      SimpleType [55-60] [int64]
        PathExpression [55-60] [int64]
          Identifier(int64) [55-60] [int64]
  OptionsList [69-74] [(d=e)]
    OptionsEntry [70-73] [d=e]
      Identifier(d) [70-71] [d]
      PathExpression [72-73] [e]
        Identifier(e) [72-73] [e]
  Identifier(testlang) [84-92] [testlang]
--
CREATE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e) LANGUAGE testlang
--
ALTERNATION GROUP: returns table<x int64>,options(d=e),,as select 1 as x
--
CreateTableFunctionStatement [0-92] [create...select 1 as x]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  TVFSchema [47-61] [table<x int64>]
    TVFSchemaColumn [53-60] [x int64]
      Identifier(x) [53-54] [x]
      SimpleType [55-60] [int64]
        PathExpression [55-60] [int64]
          Identifier(int64) [55-60] [int64]
  OptionsList [69-74] [(d=e)]
    OptionsEntry [70-73] [d=e]
      Identifier(d) [70-71] [d]
      PathExpression [72-73] [e]
        Identifier(e) [72-73] [e]
  Query [79-92] [select 1 as x]
    Select [79-92] [select 1 as x]
      SelectList [86-92] [1 as x]
        SelectColumn [86-92] [1 as x]
          IntLiteral(1) [86-87] [1]
          Alias [88-92] [as x]
            Identifier(x) [91-92] [x]
--
CREATE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: returns table<x int64>,options(d=e),,
--
CreateTableFunctionStatement [0-74] [create...options(d=e)]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  TVFSchema [47-61] [table<x int64>]
    TVFSchemaColumn [53-60] [x int64]
      Identifier(x) [53-54] [x]
      SimpleType [55-60] [int64]
        PathExpression [55-60] [int64]
          Identifier(int64) [55-60] [int64]
  OptionsList [69-74] [(d=e)]
    OptionsEntry [70-73] [d=e]
      Identifier(d) [70-71] [d]
      PathExpression [72-73] [e]
        Identifier(e) [72-73] [e]
--
CREATE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e)
--
ALTERNATION GROUP: returns table<x int64>,,language testlang,as select 1 as x
--
CreateTableFunctionStatement [0-97] [create...select 1 as x]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  TVFSchema [47-61] [table<x int64>]
    TVFSchemaColumn [53-60] [x int64]
      Identifier(x) [53-54] [x]
      SimpleType [55-60] [int64]
        PathExpression [55-60] [int64]
          Identifier(int64) [55-60] [int64]
  Identifier(testlang) [72-80] [testlang]
  Query [84-97] [select 1 as x]
    Select [84-97] [select 1 as x]
      SelectList [91-97] [1 as x]
        SelectColumn [91-97] [1 as x]
          IntLiteral(1) [91-92] [1]
          Alias [93-97] [as x]
            Identifier(x) [96-97] [x]
--
CREATE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: returns table<x int64>,,language testlang,
--
CreateTableFunctionStatement [0-80] [create...language testlang]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  TVFSchema [47-61] [table<x int64>]
    TVFSchemaColumn [53-60] [x int64]
      Identifier(x) [53-54] [x]
      SimpleType [55-60] [int64]
        PathExpression [55-60] [int64]
          Identifier(int64) [55-60] [int64]
  Identifier(testlang) [72-80] [testlang]
--
CREATE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang
--
ALTERNATION GROUP: returns table<x int64>,,,as select 1 as x
--
CreateTableFunctionStatement [0-80] [create...select 1 as x]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  TVFSchema [47-61] [table<x int64>]
    TVFSchemaColumn [53-60] [x int64]
      Identifier(x) [53-54] [x]
      SimpleType [55-60] [int64]
        PathExpression [55-60] [int64]
          Identifier(int64) [55-60] [int64]
  Query [67-80] [select 1 as x]
    Select [67-80] [select 1 as x]
      SelectList [74-80] [1 as x]
        SelectColumn [74-80] [1 as x]
          IntLiteral(1) [74-75] [1]
          Alias [76-80] [as x]
            Identifier(x) [79-80] [x]
--
CREATE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: returns table<x int64>,,,
--
CreateTableFunctionStatement [0-61] [create...table<x int64>]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  TVFSchema [47-61] [table<x int64>]
    TVFSchemaColumn [53-60] [x int64]
      Identifier(x) [53-54] [x]
      SimpleType [55-60] [int64]
        PathExpression [55-60] [int64]
          Identifier(int64) [55-60] [int64]
--
CREATE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 >
--
ALTERNATION GROUP: options(d=e),language testlang,as select 1 as x
--
CreateTableFunctionStatement [0-87] [create...select 1 as x]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  OptionsList [47-52] [(d=e)]
    OptionsEntry [48-51] [d=e]
      Identifier(d) [48-49] [d]
      PathExpression [50-51] [e]
        Identifier(e) [50-51] [e]
  Identifier(testlang) [62-70] [testlang]
  Query [74-87] [select 1 as x]
    Select [74-87] [select 1 as x]
      SelectList [81-87] [1 as x]
        SelectColumn [81-87] [1 as x]
          IntLiteral(1) [81-82] [1]
          Alias [83-87] [as x]
            Identifier(x) [86-87] [x]
--
CREATE TABLE FUNCTION myfunction()
OPTIONS
  (d = e) LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: options(d=e),language testlang,
--
CreateTableFunctionStatement [0-70] [create...language testlang]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  OptionsList [47-52] [(d=e)]
    OptionsEntry [48-51] [d=e]
      Identifier(d) [48-49] [d]
      PathExpression [50-51] [e]
        Identifier(e) [50-51] [e]
  Identifier(testlang) [62-70] [testlang]
--
CREATE TABLE FUNCTION myfunction()
OPTIONS
  (d = e) LANGUAGE testlang
--
ALTERNATION GROUP: options(d=e),,as select 1 as x
--
CreateTableFunctionStatement [0-70] [create...select 1 as x]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  OptionsList [47-52] [(d=e)]
    OptionsEntry [48-51] [d=e]
      Identifier(d) [48-49] [d]
      PathExpression [50-51] [e]
        Identifier(e) [50-51] [e]
  Query [57-70] [select 1 as x]
    Select [57-70] [select 1 as x]
      SelectList [64-70] [1 as x]
        SelectColumn [64-70] [1 as x]
          IntLiteral(1) [64-65] [1]
          Alias [66-70] [as x]
            Identifier(x) [69-70] [x]
--
CREATE TABLE FUNCTION myfunction()
OPTIONS
  (d = e) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: options(d=e),,
--
CreateTableFunctionStatement [0-52] [create...options(d=e)]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  OptionsList [47-52] [(d=e)]
    OptionsEntry [48-51] [d=e]
      Identifier(d) [48-49] [d]
      PathExpression [50-51] [e]
        Identifier(e) [50-51] [e]
--
CREATE TABLE FUNCTION myfunction()
OPTIONS
  (d = e)
--
ALTERNATION GROUP: language testlang,as select 1 as x
--
CreateTableFunctionStatement [0-75] [create...select 1 as x]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  Identifier(testlang) [50-58] [testlang]
  Query [62-75] [select 1 as x]
    Select [62-75] [select 1 as x]
      SelectList [69-75] [1 as x]
        SelectColumn [69-75] [1 as x]
          IntLiteral(1) [69-70] [1]
          Alias [71-75] [as x]
            Identifier(x) [74-75] [x]
--
CREATE TABLE FUNCTION myfunction()
LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: language testlang,
--
CreateTableFunctionStatement [0-58] [create...language testlang]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  Identifier(testlang) [50-58] [testlang]
--
CREATE TABLE FUNCTION myfunction()
LANGUAGE testlang
--
ALTERNATION GROUP: as select 1 as x
--
CreateTableFunctionStatement [0-58] [create...select 1 as x]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  Query [45-58] [select 1 as x]
    Select [45-58] [select 1 as x]
      SelectList [52-58] [1 as x]
        SelectColumn [52-58] [1 as x]
          IntLiteral(1) [52-53] [1]
          Alias [54-58] [as x]
            Identifier(x) [57-58] [x]
--
CREATE TABLE FUNCTION myfunction()
AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: <empty>
--
CreateTableFunctionStatement [0-38] [create...myfunction()]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
--
CREATE TABLE FUNCTION myfunction()
