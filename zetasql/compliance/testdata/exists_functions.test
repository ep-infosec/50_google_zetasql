[prepare_database]
CREATE TABLE Table1 AS
SELECT cast(1 as int64) as primary_key,
       cast(true as bool) as bool_val, cast(0.1 as double) as double_val,
       cast(1 as int64) as int64_val, cast("1" as string) as str_val UNION ALL
  SELECT 2, false, 0.2, 2, "2"
--
ARRAY<STRUCT<primary_key INT64,
             bool_val BOOL,
             double_val DOUBLE,
             int64_val INT64,
             str_val STRING>>
[
  {1, true, 0.1, 1, "1"},
  {2, false, 0.2, 2, "2"}
]
==
[prepare_database]
CREATE TABLE Table2 AS
SELECT cast(1 as int64) as primary_key,
       cast(true as bool) as bool_val, cast(0.3 as double) as double_val,
       cast(3 as int64) as int64_val, cast("3" as string) as str_val UNION ALL
  SELECT 2, false, 0.4, 4, "4"
--
ARRAY<STRUCT<primary_key INT64,
             bool_val BOOL,
             double_val DOUBLE,
             int64_val INT64,
             str_val STRING>>
[
  {1, true, 0.3, 3, "3"},
  {2, false, 0.4, 4, "4"}
]
==
[prepare_database]
CREATE TABLE Table3 AS
SELECT cast(1 as int64) as primary_key,
       cast(true as bool) as bool_val, cast(0.5 as double) as double_val,
       cast(5 as int64) as int64_val, cast("5" as string) as str_val UNION ALL
  SELECT 2, false, 0.6, 6, "6"
--
ARRAY<STRUCT<primary_key INT64,
             bool_val BOOL,
             double_val DOUBLE,
             int64_val INT64,
             str_val STRING>>
[
  {1, true, 0.5, 5, "5"},
  {2, false, 0.6, 6, "6"}
]
==
[prepare_database]
CREATE TABLE Table4 AS
SELECT cast(1 as int64) as primary_key,
       ARRAY<int32>[1, 2, 3] array_val UNION ALL
  SELECT 2, ARRAY<int32>[] UNION ALL
  SELECT 3, ARRAY<int32>[4, 5, 6]
--
ARRAY<STRUCT<primary_key INT64, array_val ARRAY<>>>[
  {
    1,
    ARRAY<INT32>[1, 2, 3]
  },
  {2, ARRAY<INT32>[]},
  {
    3,
    ARRAY<INT32>[4, 5, 6]
  }
]
==
[prepare_database]
CREATE TABLE Table5 AS
SELECT cast(1 as int64) as primary_key,
       cast(1 as int64) as int64_val1,
       cast(10 as int64) as int64_val2,
       cast(100 as int64) as int64_val3
UNION ALL SELECT 2, 1, 11, 101
UNION ALL SELECT 3, 2, 20, 200
UNION ALL SELECT 4, 2, 21, 201
UNION ALL SELECT 5, 2, 22, 202
UNION ALL SELECT 6, 3, 30, 300
--
ARRAY<STRUCT<primary_key INT64,
             int64_val1 INT64,
             int64_val2 INT64,
             int64_val3 INT64>>
[{1, 1, 10, 100},
 {2, 1, 11, 101},
 {3, 2, 20, 200},
 {4, 2, 21, 201},
 {5, 2, 22, 202},
 {6, 3, 30, 300}]
==
#
# Tests with EXISTS in the WHERE clause
#
# EXISTS returns true
[name=exists_functions_1]
SELECT primary_key, bool_val, double_val, int64_val, str_val
FROM Table1 WHERE EXISTS (SELECT NULL)
ORDER BY primary_key DESC
--
ARRAY<STRUCT<primary_key INT64,
             bool_val BOOL,
             double_val DOUBLE,
             int64_val INT64,
             str_val STRING>>
[
  {2, false, 0.2, 2, "2"},
  {1, true, 0.1, 1, "1"}
]
==
[name=exists_functions_2]
SELECT primary_key, bool_val, double_val, int64_val, str_val
FROM Table1 WHERE EXISTS (SELECT 1)
ORDER BY primary_key DESC
--
ARRAY<STRUCT<primary_key INT64,
             bool_val BOOL,
             double_val DOUBLE,
             int64_val INT64,
             str_val STRING>>
[
  {2, false, 0.2, 2, "2"},
  {1, true, 0.1, 1, "1"}
]
==
[name=exists_functions_3]
SELECT primary_key, bool_val, double_val, int64_val, str_val
FROM Table1 WHERE EXISTS (SELECT * FROM Table2)
ORDER BY primary_key DESC
--
ARRAY<STRUCT<primary_key INT64,
             bool_val BOOL,
             double_val DOUBLE,
             int64_val INT64,
             str_val STRING>>
[
  {2, false, 0.2, 2, "2"},
  {1, true, 0.1, 1, "1"}
]
==
[name=exists_functions_4]
SELECT primary_key, bool_val, double_val, int64_val, str_val
FROM Table1 WHERE EXISTS (SELECT 1 UNION ALL SELECT 2)
ORDER BY primary_key DESC
--
ARRAY<STRUCT<primary_key INT64,
             bool_val BOOL,
             double_val DOUBLE,
             int64_val INT64,
             str_val STRING>>
[
  {2, false, 0.2, 2, "2"},
  {1, true, 0.1, 1, "1"}
]
==
[name=exists_functions_5]
SELECT primary_key, bool_val, double_val, int64_val, str_val
FROM Table1 WHERE EXISTS (
  SELECT * FROM Table2 UNION ALL SELECT * FROM Table3)
ORDER BY primary_key DESC
--
ARRAY<STRUCT<primary_key INT64,
             bool_val BOOL,
             double_val DOUBLE,
             int64_val INT64,
             str_val STRING>>
[
  {2, false, 0.2, 2, "2"},
  {1, true, 0.1, 1, "1"}
]
==
# The second clause of the UNION ALL returns rows.
[name=exists_functions_6]
SELECT primary_key, bool_val, double_val, int64_val, str_val
FROM Table1 WHERE EXISTS (
  SELECT * FROM Table2 t2 WHERE t2.int64_val = 0 UNION ALL SELECT * FROM Table3)
ORDER BY primary_key DESC
--
ARRAY<STRUCT<primary_key INT64,
             bool_val BOOL,
             double_val DOUBLE,
             int64_val INT64,
             str_val STRING>>
[
  {2, false, 0.2, 2, "2"},
  {1, true, 0.1, 1, "1"}
]
==
# EXISTS returns false so the parent query returns 0 rows.
[name=exists_functions_7]
SELECT primary_key, bool_val, double_val, int64_val, str_val
FROM Table1 WHERE EXISTS (SELECT * FROM Table2 WHERE int64_val = 0)
ORDER BY primary_key DESC
--
ARRAY<STRUCT<primary_key INT64,
             bool_val BOOL,
             double_val DOUBLE,
             int64_val INT64,
             str_val STRING>>[]
==
[name=exists_functions_8]
SELECT primary_key, bool_val, double_val, int64_val, str_val
FROM Table1 WHERE EXISTS (
  SELECT * FROM Table2 WHERE int64_val = 0 UNION ALL
  SELECT * FROM Table3 WHERE int64_val = 0)
ORDER BY primary_key DESC
--
ARRAY<STRUCT<primary_key INT64,
             bool_val BOOL,
             double_val DOUBLE,
             int64_val INT64,
             str_val STRING>>[]
==
# EXISTS returns false but due to the NOT, the parent query returns all rows.
[name=exists_functions_9]
SELECT primary_key, bool_val, double_val, int64_val, str_val
FROM Table1 WHERE NOT EXISTS (SELECT * FROM Table2 WHERE int64_val = 0)
ORDER BY primary_key DESC
--
ARRAY<STRUCT<primary_key INT64,
             bool_val BOOL,
             double_val DOUBLE,
             int64_val INT64,
             str_val STRING>>
[
  {2, false, 0.2, 2, "2"},
  {1, true, 0.1, 1, "1"}
]
==
# EXISTS returns true but due to the NOT, the parent query returns 0 rows.
[name=exists_functions_10]
SELECT primary_key, bool_val, double_val, int64_val, str_val
FROM Table1 WHERE NOT EXISTS (SELECT 1)
ORDER BY primary_key DESC
--
ARRAY<STRUCT<primary_key INT64,
             bool_val BOOL,
             double_val DOUBLE,
             int64_val INT64,
             str_val STRING>>[]
==
# Correlated reference 'a' refers to the outer query, condition is true.
[name=exists_functions_11]
SELECT * FROM (select 1 a) t1 WHERE EXISTS (SELECT * FROM (select 0 b) t2 WHERE a = 1)
--
ARRAY<STRUCT<a INT64>>[{1}]
==
# Correlated reference 'a' refers to the outer query, condition is false.
[name=exists_functions_12]
SELECT * FROM (select 0 a) t1 WHERE EXISTS (SELECT * FROM (select 0 b) t2 WHERE a = 1)
--
ARRAY<STRUCT<a INT64>>[]
==
# Column 'a' in WHERE refers to the inner query, condition is false.
[name=exists_functions_13]
SELECT * FROM (select 1 a) t1 WHERE EXISTS (SELECT * FROM (select 0 a) t2 WHERE a = 1)
--
ARRAY<STRUCT<a INT64>>[]
==
# EXISTS with an empty array returns true.
[name=empty_array]
SELECT primary_key, bool_val, double_val, int64_val, str_val
FROM Table1 WHERE EXISTS (SELECT ARRAY<INT32>[])
ORDER BY primary_key DESC
--
ARRAY<STRUCT<primary_key INT64,
             bool_val BOOL,
             double_val DOUBLE,
             int64_val INT64,
             str_val STRING>>
[
  {2, false, 0.2, 2, "2"},
  {1, true, 0.1, 1, "1"}
]
==
# EXISTS with a NULL array returns true.
[name=null_array]
SELECT primary_key, bool_val, double_val, int64_val, str_val
FROM Table1 WHERE EXISTS (SELECT CAST(NULL AS ARRAY<INT32>))
ORDER BY primary_key DESC
--
ARRAY<STRUCT<primary_key INT64,
             bool_val BOOL,
             double_val DOUBLE,
             int64_val INT64,
             str_val STRING>>
[
  {2, false, 0.2, 2, "2"},
  {1, true, 0.1, 1, "1"}
]
==
# EXISTS with correlated filter on table.
[name=correlated_filter_table]
SELECT primary_key FROM Table1 t1
WHERE EXISTS(SELECT * FROM Table2 t2 WHERE t1.primary_key + 1 = t2.int64_val)
ORDER BY primary_key DESC
--
ARRAY<STRUCT<primary_key INT64>>[{2}]
==
# EXISTS with correlated UNNEST.
[name=correlated_unnest]
SELECT primary_key FROM Table4 t4
WHERE EXISTS(SELECT * FROM t4.array_val)
ORDER BY primary_key DESC
--
ARRAY<STRUCT<primary_key INT64>>[{3}, {1}]
==
# EXISTS with correlated UNNEST and filter on table.
[name=correlated_unnest_filter_table]
SELECT primary_key FROM Table4 t4
WHERE EXISTS(SELECT * FROM Table2 t2, t4.array_val a
             WHERE t2.primary_key = a)
ORDER BY primary_key DESC
--
ARRAY<STRUCT<primary_key INT64>>[{1}]
==
#
# Tests with EXISTS using correlated and uncorrelated subqueries in various
# contexts: SELECT, CASE, IF, JOIN ON, GROUP BY, HAVING, ORDER BY
#
# Simple EXISTS over constant scan in SELECT
[name=select_uncorrelated_constant]
SELECT primary_key, NOT EXISTS(SELECT 1)
FROM Table1
ORDER BY primary_key DESC
--
ARRAY<STRUCT<primary_key INT64, BOOL>>[{2, false}, {1, false}]
==
# EXISTS over table in SELECT
[name=select_uncorrelated_table]
SELECT primary_key, EXISTS(SELECT * FROM Table1)
FROM Table1
ORDER BY primary_key DESC
--
ARRAY<STRUCT<primary_key INT64, BOOL>>[{2, true}, {1, true}]
==
# Correlated EXISTS over table in SELECT
[name=select_correlated_table]
SELECT primary_key,
       NOT EXISTS(SELECT * FROM Table2 t2
                  WHERE t1.primary_key + 1 = t2.int64_val)
FROM Table1 t1
ORDER BY primary_key DESC
--
ARRAY<STRUCT<primary_key INT64, BOOL>>[{2, false}, {1, true}]
==
# Correlated EXISTS over UNNEST in SELECT
[name=select_correlated_unnest]
SELECT primary_key,
       EXISTS(SELECT * FROM t4.array_val)
FROM Table4 t4
ORDER BY primary_key DESC
--
ARRAY<STRUCT<primary_key INT64, BOOL>>[{3, true}, {2, false}, {1, true}]
==
# Simple EXISTS over constant scan in CASE
[name=case_uncorrelated_constant]
SELECT primary_key,
       CASE WHEN NOT EXISTS(SELECT 1) THEN "not exists" ELSE "exists" END
FROM Table1
ORDER BY primary_key DESC
--
ARRAY<STRUCT<primary_key INT64, STRING>>[{2, "exists"}, {1, "exists"}]
==
# EXISTS over table in CASE
[name=case_uncorrelated_table]
SELECT primary_key,
       CASE WHEN EXISTS(SELECT * FROM Table1)
            THEN "exists" ELSE "not exists" END
FROM Table1
ORDER BY primary_key DESC
--
ARRAY<STRUCT<primary_key INT64, STRING>>[{2, "exists"}, {1, "exists"}]
==
# Correlated EXISTS over table in CASE
[name=case_correlated_table]
SELECT primary_key,
       CASE WHEN NOT EXISTS(SELECT * FROM Table2 t2
                            WHERE t1.primary_key + 1 = t2.int64_val)
            THEN "not exists" ELSE "exists" END
FROM Table1 t1
ORDER BY primary_key DESC
--
ARRAY<STRUCT<primary_key INT64, STRING>>[{2, "exists"}, {1, "not exists"}]
==
# Correlated EXISTS over UNNEST in CASE
[name=case_correlated_unnest]
SELECT primary_key,
       CASE WHEN EXISTS(SELECT * FROM t4.array_val)
            THEN "exists" ELSE "not exists" END
FROM Table4 t4
ORDER BY primary_key DESC
--
ARRAY<STRUCT<primary_key INT64, STRING>>[
  {3, "exists"},
  {2, "not exists"},
  {1, "exists"}
]
==
# Simple EXISTS over constant scan in IF
[name=if_uncorrelated_constant]
SELECT primary_key,
       IF (NOT EXISTS(SELECT 1), "not exists", "exists")
FROM Table1
ORDER BY primary_key DESC
--
ARRAY<STRUCT<primary_key INT64, STRING>>[{2, "exists"}, {1, "exists"}]
==
# EXISTS over table in IF
[name=if_uncorrelated_table]
SELECT primary_key,
       IF (EXISTS(SELECT * FROM Table1), "exists", "not exists")
FROM Table1
ORDER BY primary_key DESC
--
ARRAY<STRUCT<primary_key INT64, STRING>>[{2, "exists"}, {1, "exists"}]
==
# Correlated EXISTS over table in IF
[name=if_correlated_table]
SELECT primary_key,
       IF (NOT EXISTS(SELECT * FROM Table2 t2
                 WHERE t1.primary_key + 1 = t2.int64_val),
          "not exists", "exists")
FROM Table1 t1
ORDER BY primary_key DESC
--
ARRAY<STRUCT<primary_key INT64, STRING>>[{2, "exists"}, {1, "not exists"}]
==
# Correlated EXISTS over UNNEST in IF
[name=if_correlated_unnest]
SELECT primary_key,
       IF (EXISTS(SELECT * FROM t4.array_val), "exists", "not exists")
FROM Table4 t4
ORDER BY primary_key DESC
--
ARRAY<STRUCT<primary_key INT64, STRING>>[
  {3, "exists"},
  {2, "not exists"},
  {1, "exists"}
]
==
# Simple EXISTS over constant scan in ON clause
[name=on_uncorrelated_constant]
SELECT t1.primary_key, t4.primary_key
FROM Table1 t1 INNER JOIN Table4 t4
     ON t1.primary_key = t4.primary_key AND NOT EXISTS(SELECT 1)
ORDER BY 1, 2
--
ARRAY<STRUCT<primary_key INT64, primary_key INT64>>[]
==
# EXISTS over table in ON clause
[name=on_uncorrelated_table]
SELECT t1.primary_key, t4.primary_key
FROM Table1 t1 INNER JOIN Table4 t4
     ON t1.primary_key = t4.primary_key AND EXISTS(SELECT * FROM Table2)
ORDER BY 1, 2
--
ARRAY<STRUCT<primary_key INT64, primary_key INT64>>[{1, 1}, {2, 2}]
==
# Correlated EXISTS over table in ON clause
[name=on_correlated_table]
SELECT t1.primary_key, t4.primary_key
FROM Table1 t1 INNER JOIN Table4 t4
  ON t1.primary_key = t4.primary_key AND
    NOT EXISTS(SELECT * FROM Table2 t2 WHERE t1.primary_key + 1 = t2.int64_val)
ORDER BY 1, 2
--
ARRAY<STRUCT<primary_key INT64, primary_key INT64>>[{1, 1}]
==
# Correlated EXISTS over UNNEST in ON clause
[name=on_correlated_unnest]
SELECT t1.primary_key, t4.primary_key
FROM Table1 t1 INNER JOIN Table4 t4
     ON t1.primary_key = t4.primary_key AND EXISTS(SELECT * FROM t4.array_val)
ORDER BY 1, 2
--
ARRAY<STRUCT<primary_key INT64, primary_key INT64>>[{1, 1}]
==
# EXISTS over constant in GROUP BY
[name=group_by_uncorrelated_constant]
SELECT COUNT(*) c
FROM Table5
GROUP BY NOT EXISTS (SELECT 1)
--
ARRAY<STRUCT<c INT64>>[{6}]
==
# Uncorrelated EXISTS over table in GROUP BY
[name=group_by_uncorrelated_table]
SELECT COUNT(*) c
FROM Table5
GROUP BY EXISTS (SELECT * FROM Table1)
--
ARRAY<STRUCT<c INT64>>[{6}]
==
# EXISTS with correlated filter over table in GROUP BY
[name=group_by_correlated_table]
SELECT COUNT(*) c
FROM Table5
GROUP BY EXISTS (SELECT * FROM Table1 t1 where t1.primary_key = int64_val1)
ORDER BY c
--
ARRAY<STRUCT<c INT64>>[{1}, {5}]
==
# EXISTS over correlated UNNEST in GROUP BY
[name=group_by_correlated_unnest]
SELECT COUNT(*) c
FROM Table4 t4
GROUP BY EXISTS (SELECT * FROM t4.array_val)
ORDER BY c
--
ARRAY<STRUCT<c INT64>>[{1}, {2}]
==
# EXISTS over constant in HAVING
[name=having_uncorrelated_constant]
SELECT int64_val1, SUM(int64_val2), ARRAY_AGG(int64_val3) aa
FROM Table5
GROUP BY int64_val1
HAVING NOT EXISTS (SELECT 1)
ORDER BY int64_val1 DESC
--
ARRAY<STRUCT<int64_val1 INT64, INT64, aa ARRAY<INT64>>>[]
==
# Uncorrelated EXISTS over table in HAVING
[name=having_uncorrelated_table]
SELECT int64_val1, SUM(int64_val2)
FROM Table5
GROUP BY int64_val1
HAVING EXISTS (SELECT * FROM Table1)
ORDER BY int64_val1 DESC
--
ARRAY<STRUCT<int64_val1 INT64, INT64>>[{3, 30}, {2, 63}, {1, 21}]
==
# EXISTS with correlated filter over table in HAVING
[name=having_correlated_table]
SELECT int64_val1, SUM(int64_val2)
FROM Table5
GROUP BY int64_val1
HAVING NOT EXISTS (SELECT * FROM Table1 t1 where t1.primary_key = int64_val1)
ORDER BY int64_val1 DESC
--
ARRAY<STRUCT<int64_val1 INT64, INT64>>[{3, 30}]
==
# EXISTS over correlated UNNEST in HAVING
[name=having_correlated_unnest]
SELECT int64_val1, SUM(int64_val2), ARRAY_AGG(int64_val3) aa
FROM Table5
GROUP BY int64_val1
HAVING EXISTS (SELECT * FROM UNNEST(aa) a WHERE a > 200)
ORDER BY int64_val1 DESC
--
ARRAY<STRUCT<int64_val1 INT64, INT64, aa ARRAY<>>>[
  {3, 30, ARRAY<INT64>[300]},
  {
    2,
    63,
    ARRAY<INT64>[201, 200, 202]
  }
]
==
# Simple EXISTS over constant scan in ORDER BY
[name=order_by_uncorrelated_constant]
SELECT primary_key
FROM Table1
ORDER BY NOT EXISTS(SELECT 1), primary_key DESC
--
ARRAY<STRUCT<primary_key INT64>>[{2}, {1}]
==
# EXISTS over table in ORDER BY
[name=order_by_uncorrelated_table]
SELECT primary_key
FROM Table1
ORDER BY EXISTS(SELECT * FROM Table1), primary_key DESC
--
ARRAY<STRUCT<primary_key INT64>>[{2}, {1}]
==
# Correlated EXISTS over table in ORDER BY
[name=order_by_correlated_table]
SELECT primary_key
FROM Table1 t1
ORDER BY
  NOT EXISTS(SELECT * FROM Table2 t2
             WHERE t1.primary_key + 1 = t2.int64_val) DESC,
  primary_key DESC
--
ARRAY<STRUCT<primary_key INT64>>[{1}, {2}]
==
# Correlated EXISTS over UNNEST in ORDER BY
[name=order_by_correlated_unnest]
SELECT primary_key
FROM Table4 t4
ORDER BY EXISTS(SELECT * FROM t4.array_val), primary_key DESC
--
ARRAY<STRUCT<primary_key INT64>>[{2}, {3}, {1}]
