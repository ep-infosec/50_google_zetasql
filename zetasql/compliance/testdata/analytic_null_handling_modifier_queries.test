# TODO: Add at least one test per combination of function and frame.

[default required_features=ANALYTIC_FUNCTIONS,V_1_1_NULL_HANDLING_MODIFIER_IN_ANALYTIC]
[prepare_database]
CREATE TABLE TestTable AS
SELECT cast(1 as int64) as row_id,
       cast(null as bool) as bool_val,
       cast(null as int64) as int64_val,
       cast(null as int32) as int32_val,
       cast(null as string) as str_val UNION ALL
  SELECT 2,  true,  null, null,  null  UNION ALL
  SELECT 3,  false, 1,    6,     "A"   UNION ALL
  SELECT 4,  true,  2,    2,     "A"   UNION ALL
  SELECT 5,  false, 1,    3,     "aA"  UNION ALL
  SELECT 6,  true,  null, null,  null  UNION ALL
  SELECT 7,  false, 1,    5,     'a'   UNION ALL
  SELECT 8,  true,  4,    2,     "a"   UNION ALL
  SELECT 9,  false, 2,    3,     "b"   UNION ALL
  SELECT 10, true,  null, 1,     "B"
--
ARRAY<STRUCT<row_id INT64,
             bool_val BOOL,
             int64_val INT64,
             int32_val INT32,
             str_val STRING>>
[
  {1, NULL, NULL, NULL, NULL},
  {2, true, NULL, NULL, NULL},
  {3, false, 1, 6, "A"},
  {4, true, 2, 2, "A"},
  {5, false, 1, 3, "aA"},
  {6, true, NULL, NULL, NULL},
  {7, false, 1, 5, "a"},
  {8, true, 4, 2, "a"},
  {9, false, 2, 3, "b"},
  {10, true, NULL, 1, "B"}
]
==

[name=first_value_uint32_int64_ignore_nulls]
SELECT row_id, int32_val, int64_val,
       FIRST_VALUE(CAST(int32_val as uint32) IGNORE NULLS)
           OVER (ORDER BY row_id
                 ROWS BETWEEN 3 PRECEDING AND 2 FOLLOWING),
       FIRST_VALUE(int64_val IGNORE NULLS)
           OVER (ORDER BY row_id ROWS 3 PRECEDING),
       FIRST_VALUE(int64_val IGNORE NULLS)
           OVER (ORDER BY row_id
                 ROWS BETWEEN UNBOUNDED PRECEDING AND 2 PRECEDING),
       FIRST_VALUE(CAST(int32_val as uint32) IGNORE NULLS)
           OVER (ORDER BY row_id
                 RANGE BETWEEN 2 PRECEDING AND CURRENT ROW),
       FIRST_VALUE(int64_val IGNORE NULLS)
           OVER (ORDER BY row_id
                 RANGE BETWEEN CURRENT ROW AND 2 FOLLOWING),
       FIRST_VALUE(CAST(int32_val as uint32) IGNORE NULLS)
           OVER (ORDER BY row_id
                 RANGE BETWEEN 2 FOLLOWING AND UNBOUNDED FOLLOWING)
FROM TestTable
--
ARRAY<STRUCT<row_id INT64,
             int32_val INT32,
             int64_val INT64,
             UINT32,
             INT64,
             INT64,
             UINT32,
             INT64,
             UINT32>>
[
  {1, NULL, NULL, 6, NULL, NULL, NULL, 1, 6},
  {2, NULL, NULL, 6, NULL, NULL, NULL, 1, 2},
  {3, 6, 1, 6, 1, NULL, 6, 1, 3},
  {4, 2, 2, 6, 1, NULL, 6, 2, 5},
  {5, 3, 1, 6, 1, 1, 6, 1, 5},
  {6, NULL, NULL, 6, 1, 1, 2, 1, 2},
  {7, 5, 1, 2, 2, 1, 3, 1, 3},
  {8, 2, 4, 3, 1, 1, 5, 4, 1},
  {9, 3, 2, 5, 1, 1, 5, 2, NULL},
  {10, 1, NULL, 5, 1, 1, 2, NULL, NULL}
]
==

[name=first_value_uint32_int64_respect_nulls]
SELECT row_id, int32_val, int64_val,
       FIRST_VALUE(CAST(int32_val as uint32) RESPECT NULLS)
           OVER (ORDER BY row_id
                 ROWS BETWEEN 3 PRECEDING AND 2 FOLLOWING),
       FIRST_VALUE(int64_val RESPECT NULLS)
           OVER (ORDER BY row_id ROWS 3 PRECEDING),
       FIRST_VALUE(int64_val RESPECT NULLS)
           OVER (ORDER BY row_id
                 ROWS BETWEEN UNBOUNDED PRECEDING AND 2 PRECEDING),
       FIRST_VALUE(CAST(int32_val as uint32) RESPECT NULLS)
           OVER (ORDER BY row_id
                 RANGE BETWEEN 2 PRECEDING AND CURRENT ROW),
       FIRST_VALUE(int64_val RESPECT NULLS)
           OVER (ORDER BY row_id
                 RANGE BETWEEN CURRENT ROW AND 2 FOLLOWING),
       FIRST_VALUE(CAST(int32_val as uint32) RESPECT NULLS)
           OVER (ORDER BY row_id
                 RANGE BETWEEN 2 FOLLOWING AND UNBOUNDED FOLLOWING)
FROM TestTable
--
ARRAY<STRUCT<row_id INT64,
             int32_val INT32,
             int64_val INT64,
             UINT32,
             INT64,
             INT64,
             UINT32,
             INT64,
             UINT32>>
[
  {1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 6},
  {2, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 2},
  {3, 6, 1, NULL, NULL, NULL, NULL, 1, 3},
  {4, 2, 2, NULL, NULL, NULL, NULL, 2, NULL},
  {5, 3, 1, NULL, NULL, NULL, 6, 1, 5},
  {6, NULL, NULL, 6, 1, NULL, 2, NULL, 2},
  {7, 5, 1, 2, 2, NULL, 3, 1, 3},
  {8, 2, 4, 3, 1, NULL, NULL, 4, 1},
  {9, 3, 2, NULL, NULL, NULL, 5, 2, NULL},
  {10, 1, NULL, 5, 1, NULL, 2, NULL, NULL}
]
==

[name=last_value_uint32_int64_ignore_nulls]
SELECT row_id, int32_val, int64_val,
       LAST_VALUE(CAST(int32_val as uint32) IGNORE NULLS)
           OVER (ORDER BY row_id
                 ROWS BETWEEN 3 PRECEDING AND 2 FOLLOWING),
       LAST_VALUE(int64_val IGNORE NULLS)
           OVER (ORDER BY row_id ROWS 3 PRECEDING),
       LAST_VALUE(int64_val IGNORE NULLS)
           OVER (ORDER BY row_id
                 ROWS BETWEEN UNBOUNDED PRECEDING AND 2 PRECEDING),
       LAST_VALUE(CAST(int32_val as uint32) IGNORE NULLS)
           OVER (ORDER BY row_id
                 RANGE BETWEEN 2 PRECEDING AND CURRENT ROW),
       LAST_VALUE(int64_val IGNORE NULLS)
           OVER (ORDER BY row_id
                 RANGE BETWEEN CURRENT ROW AND 2 FOLLOWING),
       LAST_VALUE(CAST(int32_val as uint32) IGNORE NULLS)
           OVER (ORDER BY row_id
                 RANGE BETWEEN 2 FOLLOWING AND UNBOUNDED FOLLOWING)
FROM TestTable
--
ARRAY<STRUCT<row_id INT64,
             int32_val INT32,
             int64_val INT64,
             UINT32,
             INT64,
             INT64,
             UINT32,
             INT64,
             UINT32>>
[
  {1, NULL, NULL, 6, NULL, NULL, NULL, 1, 1},
  {2, NULL, NULL, 2, NULL, NULL, NULL, 2, 1},
  {3, 6, 1, 3, 1, NULL, 6, 1, 1},
  {4, 2, 2, 3, 2, NULL, 2, 1, 1},
  {5, 3, 1, 5, 1, 1, 3, 1, 1},
  {6, NULL, NULL, 2, 1, 2, 3, 4, 1},
  {7, 5, 1, 3, 1, 1, 5, 2, 1},
  {8, 2, 4, 1, 4, 1, 2, 2, 1},
  {9, 3, 2, 1, 2, 1, 3, 2, NULL},
  {10, 1, NULL, 1, 2, 4, 1, NULL, NULL}
]
==

[name=last_value_uint32_int64_respect_nulls]
SELECT row_id, int32_val, int64_val,
       LAST_VALUE(CAST(int32_val as uint32) RESPECT NULLS)
           OVER (ORDER BY row_id
                 ROWS BETWEEN 3 PRECEDING AND 2 FOLLOWING),
       LAST_VALUE(int64_val RESPECT NULLS)
           OVER (ORDER BY row_id ROWS 3 PRECEDING),
       LAST_VALUE(int64_val RESPECT NULLS)
           OVER (ORDER BY row_id
                 ROWS BETWEEN UNBOUNDED PRECEDING AND 2 PRECEDING),
       LAST_VALUE(CAST(int32_val as uint32) RESPECT NULLS)
           OVER (ORDER BY row_id
                 RANGE BETWEEN 2 PRECEDING AND CURRENT ROW),
       LAST_VALUE(int64_val RESPECT NULLS)
           OVER (ORDER BY row_id
                 RANGE BETWEEN CURRENT ROW AND 2 FOLLOWING),
       LAST_VALUE(CAST(int32_val as uint32) RESPECT NULLS)
           OVER (ORDER BY row_id
                 RANGE BETWEEN 2 FOLLOWING AND UNBOUNDED FOLLOWING)
FROM TestTable
--
ARRAY<STRUCT<row_id INT64,
             int32_val INT32,
             int64_val INT64,
             UINT32,
             INT64,
             INT64,
             UINT32,
             INT64,
             UINT32>>
[
  {1, NULL, NULL, 6, NULL, NULL, NULL, 1, 1},
  {2, NULL, NULL, 2, NULL, NULL, NULL, 2, 1},
  {3, 6, 1, 3, 1, NULL, 6, 1, 1},
  {4, 2, 2, NULL, 2, NULL, 2, NULL, 1},
  {5, 3, 1, 5, 1, 1, 3, 1, 1},
  {6, NULL, NULL, 2, NULL, 2, NULL, 4, 1},
  {7, 5, 1, 3, 1, 1, 5, 2, 1},
  {8, 2, 4, 1, 4, NULL, 2, NULL, 1},
  {9, 3, 2, 1, 2, 1, 3, NULL, NULL},
  {10, 1, NULL, 1, NULL, 4, 1, NULL, NULL}
]
==

[name=nth_value_bool_int32_ignore_nulls]
SELECT row_id, bool_val, int32_val,
       NTH_VALUE(bool_val, 2 IGNORE NULLS)
           OVER (ORDER BY row_id
                 ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING),
       NTH_VALUE(int32_val, 3 IGNORE NULLS)
           OVER (ORDER BY row_id
                 ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW),
       NTH_VALUE(int64_val, 3 IGNORE NULLS)
           OVER (ORDER BY row_id
                 ROWS BETWEEN UNBOUNDED PRECEDING AND 2 PRECEDING),
       NTH_VALUE(int32_val, 2 IGNORE NULLS)
           OVER (ORDER BY row_id
                 RANGE BETWEEN 2 PRECEDING AND CURRENT ROW),
       NTH_VALUE(int64_val, 2 IGNORE NULLS)
           OVER (ORDER BY row_id
                 RANGE BETWEEN CURRENT ROW AND 2 FOLLOWING),
       NTH_VALUE(int32_val, 3 IGNORE NULLS)
           OVER (ORDER BY row_id
                 RANGE BETWEEN 2 FOLLOWING AND UNBOUNDED FOLLOWING)
FROM TestTable
--
ARRAY<STRUCT<row_id INT64,
             bool_val BOOL,
             int32_val INT32,
             BOOL,
             INT32,
             INT64,
             INT32,
             INT64,
             INT32>>
[
  {1, NULL, NULL, false, NULL, NULL, NULL, NULL, 3},
  {2, true, NULL, false, NULL, NULL, NULL, 2, 5},
  {3, false, 6, true, NULL, NULL, NULL, 2, 2},
  {4, true, 2, false, NULL, NULL, 2, 1, 3},
  {5, false, 3, true, 3, NULL, 2, 1, 3},
  {6, true, NULL, false, 3, NULL, 3, 4, 1},
  {7, false, 5, true, 3, 1, 5, 4, NULL},
  {8, true, 2, false, 3, 1, 2, 2, NULL},
  {9, false, 3, true, 3, 1, 2, NULL, NULL},
  {10, true, 1, NULL, 3, 1, 3, NULL, NULL}
]
==

[name=nth_value_bool_int32_respect_nulls]
SELECT row_id, bool_val, int32_val,
       NTH_VALUE(bool_val, 2 RESPECT NULLS)
           OVER (ORDER BY row_id
                 ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING),
       NTH_VALUE(int32_val, 3 RESPECT NULLS)
           OVER (ORDER BY row_id
                 ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW),
       NTH_VALUE(int64_val, 3 RESPECT NULLS)
           OVER (ORDER BY row_id
                 ROWS BETWEEN UNBOUNDED PRECEDING AND 2 PRECEDING),
       NTH_VALUE(int32_val, 2 RESPECT NULLS)
           OVER (ORDER BY row_id
                 RANGE BETWEEN 2 PRECEDING AND CURRENT ROW),
       NTH_VALUE(int64_val, 2 RESPECT NULLS)
           OVER (ORDER BY row_id
                 RANGE BETWEEN CURRENT ROW AND 2 FOLLOWING),
       NTH_VALUE(int32_val, 3 RESPECT NULLS)
           OVER (ORDER BY row_id
                 RANGE BETWEEN 2 FOLLOWING AND UNBOUNDED FOLLOWING)
FROM TestTable
--
ARRAY<STRUCT<row_id INT64,
             bool_val BOOL,
             int32_val INT32,
             BOOL,
             INT32,
             INT64,
             INT32,
             INT64,
             INT32>>
[
  {1, NULL, NULL, true, NULL, NULL, NULL, NULL, 3},
  {2, true, NULL, false, NULL, NULL, NULL, 1, NULL},
  {3, false, 6, true, 6, NULL, NULL, 2, 5},
  {4, true, 2, false, 6, NULL, 6, 1, 2},
  {5, false, 3, true, 6, 1, 2, NULL, 3},
  {6, true, NULL, false, 6, 1, 3, 1, 1},
  {7, false, 5, true, 6, 1, NULL, 4, NULL},
  {8, true, 2, false, 6, 1, 5, 2, NULL},
  {9, false, 3, true, 6, 1, 2, NULL, NULL},
  {10, true, 1, NULL, 6, 1, 3, NULL, NULL}
]
