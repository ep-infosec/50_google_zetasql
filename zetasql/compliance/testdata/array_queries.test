[load_proto_files=zetasql/testdata/test_schema.proto]
[load_proto_names=zetasql_test__.KitchenSinkPB, zetasql_test__.TestExtraPB, zetasql_test__.KitchenSinkPB.Nested, zetasql_test__.RepeatedHolderPB, zetasql_test__.EmptyMessage]
[load_enum_names=zetasql_test__.TestEnum]

[prepare_database]
CREATE TABLE AllArraysTable AS
  SELECT
    1 as key,
    ARRAY<BOOL>[true, false, true] bool_arrcol,
    ARRAY<INT32>[1, 0, -1] int32_arrcol,
    ARRAY<UINT32>[2, 1, 0] uint32_arrcol,
    ARRAY<INT64>[8589934592, 0, -8589934592] int64_arrcol,
    ARRAY<UINT64>[8589934592, 1, 0] uint64_arrcol,
    ARRAY<FLOAT>[1.1, 0.0, -1.1] float_arrcol,
    ARRAY<DOUBLE>[1.1, 0.0, -1.1] double_arrcol,
    ARRAY<STRING>['σ', 'π', '⨝'] string_arrcol,
    ARRAY<BYTES>[b"a", b"b", b"c"] bytes_arrcol,
    ARRAY<DATE>["1984-08-02", "2000-01-01", "2014-09-11"] date_arrcol,
    ARRAY<TIMESTAMP>["1984-08-02 01:01:01.001001 UTC",
                     "2000-01-01 01:01:01.001001 UTC",
                     "2014-09-11 01:01:01.001001 UTC"] micros_arrcol,
    ARRAY<zetasql_test__.TestEnum>[
      "TESTENUM0", "TESTENUM1", "TESTENUM2"] enum_arrcol,
    ARRAY<zetasql_test__.KitchenSinkPB>[
      '''
        int64_key_1: 11
        int64_key_2: 12
      ''',
      '''
        int64_key_1: 21
        int64_key_2: 22
      ''',
      '''
        int64_key_1: 31
        int64_key_2: 32
      '''] proto_arrcol,
    ARRAY<STRUCT<int64, int64>>[(11, 12), (21, 22), (31, 32)] struct_arrcol
UNION ALL
  SELECT
    2 as key,
    ARRAY<BOOL>[true, NULL, true],
    ARRAY<INT32>[1, NULL, -1],
    ARRAY<UINT32>[2, NULL, 0],
    ARRAY<INT64>[8589934592, NULL, -8589934592],
    ARRAY<UINT64>[8589934592, NULL, 0],
    ARRAY<FLOAT>[1.1, NULL, -1.1],
    ARRAY<DOUBLE>[1.1, NULL, -1.1],
    ARRAY<STRING>['σ', NULL, '⨝'],
    ARRAY<BYTES>[b"a", NULL, b"c"],
    ARRAY<DATE>["1984-08-02", NULL, "2014-09-11"],
    ARRAY<TIMESTAMP>["1984-08-02 01:01:01.001001 UTC", NULL,
                     "2014-09-11 01:01:01.001001 UTC"],
    ARRAY<zetasql_test__.TestEnum>["TESTENUM0", NULL, "TESTENUM2"],
    ARRAY<zetasql_test__.KitchenSinkPB>[
      '''
        int64_key_1: 11
        int64_key_2: 12
      ''',
      NULL,
      '''
        int64_key_1: 31
        int64_key_2: 32
      '''],
    ARRAY<STRUCT<int64, int64>>[(11, 12), NULL, (31, 32)]
UNION ALL
  SELECT
    3 as key,
    ARRAY<BOOL>[NULL, true],
    ARRAY<INT32>[NULL, -1],
    ARRAY<UINT32>[NULL, 0],
    ARRAY<INT64>[NULL, -8589934592],
    ARRAY<UINT64>[NULL, 0],
    ARRAY<FLOAT>[NULL, -1.1],
    ARRAY<DOUBLE>[NULL, -1.1],
    ARRAY<STRING>[NULL, '⨝'],
    ARRAY<BYTES>[NULL, b"c"],
    ARRAY<DATE>[NULL, "2014-09-11"],
    ARRAY<TIMESTAMP>[NULL, "2014-09-11 01:01:01.001001 UTC"],
    ARRAY<zetasql_test__.TestEnum>[NULL, "TESTENUM2"],
    ARRAY<zetasql_test__.KitchenSinkPB>[
      NULL,
      '''
        int64_key_1: 31
        int64_key_2: 32
      '''],
    ARRAY<STRUCT<int64, int64>>[NULL, (31, 32)]
UNION ALL
  SELECT
    4 as key,
    ARRAY<BOOL>[true, NULL],
    ARRAY<INT32>[1, NULL],
    ARRAY<UINT32>[2, NULL],
    ARRAY<INT64>[8589934592, NULL],
    ARRAY<UINT64>[8589934592, NULL],
    ARRAY<FLOAT>[1.1, NULL],
    ARRAY<DOUBLE>[1.1, NULL],
    ARRAY<STRING>['σ', NULL],
    ARRAY<BYTES>[b"a", NULL],
    ARRAY<DATE>["1984-08-02", NULL],
    ARRAY<TIMESTAMP>["1984-08-02 01:01:01.001001 UTC", NULL],
    ARRAY<zetasql_test__.TestEnum>["TESTENUM0", NULL],
    ARRAY<zetasql_test__.KitchenSinkPB>[
      '''
        int64_key_1: 11
        int64_key_2: 12
      ''', NULL],
    ARRAY<STRUCT<int64, int64>>[(11, 12), NULL]
UNION ALL
  SELECT
    5 as key,
    ARRAY<BOOL>[NULL, NULL],
    ARRAY<INT32>[NULL, NULL],
    ARRAY<UINT32>[NULL, NULL],
    ARRAY<INT64>[NULL, NULL],
    ARRAY<UINT64>[NULL, NULL],
    ARRAY<FLOAT>[NULL, NULL],
    ARRAY<DOUBLE>[NULL, NULL],
    ARRAY<STRING>[NULL, NULL],
    ARRAY<BYTES>[NULL, NULL],
    ARRAY<DATE>[NULL, NULL],
    ARRAY<TIMESTAMP>[NULL, NULL],
    ARRAY<zetasql_test__.TestEnum>[NULL, NULL],
    ARRAY<zetasql_test__.KitchenSinkPB>[NULL, NULL],
    ARRAY<STRUCT<int64, int64>>[NULL, NULL]
UNION ALL
  SELECT
    6 as key,
    ARRAY<BOOL>[NULL],
    ARRAY<INT32>[NULL],
    ARRAY<UINT32>[NULL],
    ARRAY<INT64>[NULL],
    ARRAY<UINT64>[NULL],
    ARRAY<FLOAT>[NULL],
    ARRAY<DOUBLE>[NULL],
    ARRAY<STRING>[NULL],
    ARRAY<BYTES>[NULL],
    ARRAY<DATE>[NULL],
    ARRAY<TIMESTAMP>[NULL],
    ARRAY<zetasql_test__.TestEnum>[NULL],
    ARRAY<zetasql_test__.KitchenSinkPB>[NULL],
    ARRAY<STRUCT<int64, int64>>[NULL]
UNION ALL
  SELECT
    7 as key,
    ARRAY<BOOL>[true],
    ARRAY<INT32>[1],
    ARRAY<UINT32>[2],
    ARRAY<INT64>[8589934592],
    ARRAY<UINT64>[8589934592],
    ARRAY<FLOAT>[1.1],
    ARRAY<DOUBLE>[1.1],
    ARRAY<STRING>['σ'],
    ARRAY<BYTES>[b"a"],
    ARRAY<DATE>["1984-08-02"],
    ARRAY<TIMESTAMP>["1984-08-02 01:01:01.001001 UTC"],
    ARRAY<zetasql_test__.TestEnum>["TESTENUM0"],
    ARRAY<zetasql_test__.KitchenSinkPB>[
      '''
        int64_key_1: 11
        int64_key_2: 12
      '''],
    ARRAY<STRUCT<int64, int64>>[(11, 12)]
UNION ALL
  SELECT
    8 as key,
    ARRAY<BOOL>[],
    ARRAY<INT32>[],
    ARRAY<UINT32>[],
    ARRAY<INT64>[],
    ARRAY<UINT64>[],
    ARRAY<FLOAT>[],
    ARRAY<DOUBLE>[],
    ARRAY<STRING>[],
    ARRAY<BYTES>[],
    ARRAY<DATE>[],
    ARRAY<TIMESTAMP>[],
    ARRAY<zetasql_test__.TestEnum>[],
    ARRAY<zetasql_test__.KitchenSinkPB>[],
    ARRAY<STRUCT<int64, int64>>[]
UNION ALL
  SELECT
    9 as key,
    IF(FALSE, ARRAY<BOOL>[], NULL),
    IF(FALSE, ARRAY<INT32>[], NULL),
    IF(FALSE, ARRAY<UINT32>[], NULL),
    IF(FALSE, ARRAY<INT64>[], NULL),
    IF(FALSE, ARRAY<UINT64>[], NULL),
    IF(FALSE, ARRAY<FLOAT>[], NULL),
    IF(FALSE, ARRAY<DOUBLE>[], NULL),
    IF(FALSE, ARRAY<STRING>[], NULL),
    IF(FALSE, ARRAY<BYTES>[], NULL),
    IF(FALSE, ARRAY<DATE>[], NULL),
    IF(FALSE, ARRAY<TIMESTAMP>[], NULL),
    IF(FALSE, ARRAY<zetasql_test__.TestEnum>[], NULL),
    IF(FALSE, ARRAY<zetasql_test__.KitchenSinkPB>[], NULL),
    IF(FALSE, ARRAY<STRUCT<int64, int64>>[], NULL)
--
ARRAY<STRUCT<
        key INT64,
        bool_arrcol ARRAY<>,
        int32_arrcol ARRAY<>,
        uint32_arrcol ARRAY<>,
        int64_arrcol ARRAY<>,
        uint64_arrcol ARRAY<>,
        float_arrcol ARRAY<>,
        double_arrcol ARRAY<>,
        string_arrcol ARRAY<>,
        bytes_arrcol ARRAY<>,
        date_arrcol ARRAY<>,
        micros_arrcol ARRAY<>,
        enum_arrcol ARRAY<>,
        proto_arrcol ARRAY<>,
        struct_arrcol ARRAY<>
      >>
[{1,
  ARRAY<BOOL>[true, false, true],
  ARRAY<INT32>[1, 0, -1],
  ARRAY<UINT32>[2, 1, 0],
  ARRAY<INT64>[8589934592, 0, -8589934592],
  ARRAY<UINT64>[8589934592, 1, 0],
  ARRAY<FLOAT>[1.1, 0, -1.1],
  ARRAY<DOUBLE>[1.1, 0, -1.1],
  ARRAY<STRING>["σ", "π", "⨝"],
  ARRAY<BYTES>[b"a", b"b", b"c"],
  ARRAY<DATE>[1984-08-02, 2000-01-01, 2014-09-11],
  ARRAY<TIMESTAMP>[
    1984-08-02 01:01:01.001001+00,
    2000-01-01 01:01:01.001001+00,
    2014-09-11 01:01:01.001001+00
  ],
  ARRAY<ENUM<zetasql_test__.TestEnum>>[TESTENUM0, TESTENUM1, TESTENUM2],
  ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[
    {
      int64_key_1: 11
      int64_key_2: 12
    },
    {
      int64_key_1: 21
      int64_key_2: 22
    },
    {
      int64_key_1: 31
      int64_key_2: 32
    }
  ],
  ARRAY<STRUCT<INT64, INT64>>[{11, 12}, {21, 22}, {31, 32}]},
 {2,
  ARRAY<BOOL>[true, NULL, true],
  ARRAY<INT32>[1, NULL, -1],
  ARRAY<UINT32>[2, NULL, 0],
  ARRAY<INT64>[8589934592, NULL, -8589934592],
  ARRAY<UINT64>[8589934592, NULL, 0],
  ARRAY<FLOAT>[1.1, NULL, -1.1],
  ARRAY<DOUBLE>[1.1, NULL, -1.1],
  ARRAY<STRING>["σ", NULL, "⨝"],
  ARRAY<BYTES>[b"a", NULL, b"c"],
  ARRAY<DATE>[1984-08-02, NULL, 2014-09-11],
  ARRAY<TIMESTAMP>[
    1984-08-02 01:01:01.001001+00,
    NULL,
    2014-09-11 01:01:01.001001+00
  ],
  ARRAY<ENUM<zetasql_test__.TestEnum>>[TESTENUM0, NULL, TESTENUM2],
  ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[
    {
      int64_key_1: 11
      int64_key_2: 12
    },
    NULL,
    {
      int64_key_1: 31
      int64_key_2: 32
    }
  ],
  ARRAY<STRUCT<INT64, INT64>>[{11, 12}, NULL, {31, 32}]},
 {3,
  ARRAY<BOOL>[NULL, true],
  ARRAY<INT32>[NULL, -1],
  ARRAY<UINT32>[NULL, 0],
  ARRAY<INT64>[NULL, -8589934592],
  ARRAY<UINT64>[NULL, 0],
  ARRAY<FLOAT>[NULL, -1.1],
  ARRAY<DOUBLE>[NULL, -1.1],
  ARRAY<STRING>[NULL, "⨝"],
  ARRAY<BYTES>[NULL, b"c"],
  ARRAY<DATE>[NULL, 2014-09-11],
  ARRAY<TIMESTAMP>[
    NULL,
    2014-09-11 01:01:01.001001+00
  ],
  ARRAY<ENUM<zetasql_test__.TestEnum>>[NULL, TESTENUM2],
  ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[
    NULL,
    {
      int64_key_1: 31
      int64_key_2: 32
    }
  ],
  ARRAY<STRUCT<INT64, INT64>>[NULL, {31, 32}]},
 {4,
  ARRAY<BOOL>[true, NULL],
  ARRAY<INT32>[1, NULL],
  ARRAY<UINT32>[2, NULL],
  ARRAY<INT64>[8589934592, NULL],
  ARRAY<UINT64>[8589934592, NULL],
  ARRAY<FLOAT>[1.1, NULL],
  ARRAY<DOUBLE>[1.1, NULL],
  ARRAY<STRING>["σ", NULL],
  ARRAY<BYTES>[b"a", NULL],
  ARRAY<DATE>[1984-08-02, NULL],
  ARRAY<TIMESTAMP>[
    1984-08-02 01:01:01.001001+00,
    NULL
  ],
  ARRAY<ENUM<zetasql_test__.TestEnum>>[TESTENUM0, NULL],
  ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[
    {
      int64_key_1: 11
      int64_key_2: 12
    },
    NULL
  ],
  ARRAY<STRUCT<INT64, INT64>>[{11, 12}, NULL]},
 {
   5,
   ARRAY<BOOL>[NULL, NULL],
   ARRAY<INT32>[NULL, NULL],
   ARRAY<UINT32>[NULL, NULL],
   ARRAY<INT64>[NULL, NULL],
   ARRAY<UINT64>[NULL, NULL],
   ARRAY<FLOAT>[NULL, NULL],
   ARRAY<DOUBLE>[NULL, NULL],
   ARRAY<STRING>[NULL, NULL],
   ARRAY<BYTES>[NULL, NULL],
   ARRAY<DATE>[NULL, NULL],
   ARRAY<TIMESTAMP>[NULL, NULL],
   ARRAY<ENUM<zetasql_test__.TestEnum>>[NULL, NULL],
   ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[NULL, NULL],
   ARRAY<STRUCT<INT64, INT64>>[NULL, NULL]
 },
 {
   6,
   ARRAY<BOOL>[NULL],
   ARRAY<INT32>[NULL],
   ARRAY<UINT32>[NULL],
   ARRAY<INT64>[NULL],
   ARRAY<UINT64>[NULL],
   ARRAY<FLOAT>[NULL],
   ARRAY<DOUBLE>[NULL],
   ARRAY<STRING>[NULL],
   ARRAY<BYTES>[NULL],
   ARRAY<DATE>[NULL],
   ARRAY<TIMESTAMP>[NULL],
   ARRAY<ENUM<zetasql_test__.TestEnum>>[NULL],
   ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[NULL],
   ARRAY<STRUCT<INT64, INT64>>[NULL]
 },
 {7,
  ARRAY<BOOL>[true],
  ARRAY<INT32>[1],
  ARRAY<UINT32>[2],
  ARRAY<INT64>[8589934592],
  ARRAY<UINT64>[8589934592],
  ARRAY<FLOAT>[1.1],
  ARRAY<DOUBLE>[1.1],
  ARRAY<STRING>["σ"],
  ARRAY<BYTES>[b"a"],
  ARRAY<DATE>[1984-08-02],
  ARRAY<TIMESTAMP>[1984-08-02 01:01:01.001001+00],
  ARRAY<ENUM<zetasql_test__.TestEnum>>[TESTENUM0],
  ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[
    {
      int64_key_1: 11
      int64_key_2: 12
    }
  ],
  ARRAY<STRUCT<INT64, INT64>>[{11, 12}]},
 {
   8,
   ARRAY<BOOL>[],
   ARRAY<INT32>[],
   ARRAY<UINT32>[],
   ARRAY<INT64>[],
   ARRAY<UINT64>[],
   ARRAY<FLOAT>[],
   ARRAY<DOUBLE>[],
   ARRAY<STRING>[],
   ARRAY<BYTES>[],
   ARRAY<DATE>[],
   ARRAY<TIMESTAMP>[],
   ARRAY<ENUM<zetasql_test__.TestEnum>>[],
   ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[],
   ARRAY<STRUCT<INT64, INT64>>[]
 },
 {
   9,
   ARRAY<BOOL>(NULL),
   ARRAY<INT32>(NULL),
   ARRAY<UINT32>(NULL),
   ARRAY<INT64>(NULL),
   ARRAY<UINT64>(NULL),
   ARRAY<FLOAT>(NULL),
   ARRAY<DOUBLE>(NULL),
   ARRAY<STRING>(NULL),
   ARRAY<BYTES>(NULL),
   ARRAY<DATE>(NULL),
   ARRAY<TIMESTAMP>(NULL),
   ARRAY<ENUM<zetasql_test__.TestEnum>>(NULL),
   ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>(NULL),
   ARRAY<STRUCT<INT64, INT64>>(NULL)
 }]
==
[name=select_bool_arrays]
SELECT bool_arrcol FROM AllArraysTable
--
ARRAY<STRUCT<bool_arrcol ARRAY<>>>[
  {ARRAY<BOOL>[true, false, true]},
  {ARRAY<BOOL>[true, NULL, true]},
  {ARRAY<BOOL>[NULL, true]},
  {ARRAY<BOOL>[true, NULL]},
  {ARRAY<BOOL>[NULL, NULL]},
  {ARRAY<BOOL>[NULL]},
  {ARRAY<BOOL>[true]},
  {ARRAY<BOOL>[]},
  {ARRAY<BOOL>(NULL)}
]
==
[name=select_bool_array_unnest]
SELECT elem FROM AllArraysTable t, t.bool_arrcol elem
--
ARRAY<STRUCT<elem BOOL>>[
  {NULL},
  {true},
  {true},
  {NULL},
  {true},
  {NULL},
  {false},
  {true},
  {true},
  {true},
  {NULL},
  {NULL},
  {NULL},
  {true}
]
==
[name=select_int32_arrays]
SELECT int32_arrcol FROM AllArraysTable
--
ARRAY<STRUCT<int32_arrcol ARRAY<>>>[
  {ARRAY<INT32>[1, 0, -1]},
  {ARRAY<INT32>[1, NULL, -1]},
  {ARRAY<INT32>[NULL, -1]},
  {ARRAY<INT32>[1, NULL]},
  {ARRAY<INT32>[NULL, NULL]},
  {ARRAY<INT32>[NULL]},
  {ARRAY<INT32>[1]},
  {ARRAY<INT32>[]},
  {ARRAY<INT32>(NULL)}
]
==
[name=select_int32_array_unnest]
SELECT elem FROM AllArraysTable t, t.int32_arrcol elem
--
ARRAY<STRUCT<elem INT32>>[
  {NULL},
  {1},
  {-1},
  {NULL},
  {1},
  {NULL},
  {0},
  {1},
  {-1},
  {-1},
  {NULL},
  {NULL},
  {NULL},
  {1}
]
==
[name=select_uint32_arrays]
SELECT uint32_arrcol FROM AllArraysTable
--
ARRAY<STRUCT<uint32_arrcol ARRAY<>>>[
  {ARRAY<UINT32>[2, 1, 0]},
  {ARRAY<UINT32>[2, NULL, 0]},
  {ARRAY<UINT32>[NULL, 0]},
  {ARRAY<UINT32>[2, NULL]},
  {ARRAY<UINT32>[NULL, NULL]},
  {ARRAY<UINT32>[NULL]},
  {ARRAY<UINT32>[2]},
  {ARRAY<UINT32>[]},
  {ARRAY<UINT32>(NULL)}
]
==
[name=select_uint32_array_unnest]
SELECT elem FROM AllArraysTable t, t.uint32_arrcol elem
--
ARRAY<STRUCT<elem UINT32>>[
  {NULL},
  {2},
  {0},
  {NULL},
  {2},
  {NULL},
  {1},
  {2},
  {0},
  {0},
  {NULL},
  {NULL},
  {NULL},
  {2}
]
==
[name=select_int64_arrays]
SELECT int64_arrcol FROM AllArraysTable
--
ARRAY<STRUCT<int64_arrcol ARRAY<>>>[
  {ARRAY<INT64>[8589934592, 0, -8589934592]},
  {ARRAY<INT64>[8589934592, NULL, -8589934592]},
  {ARRAY<INT64>[NULL, -8589934592]},
  {ARRAY<INT64>[8589934592, NULL]},
  {ARRAY<INT64>[NULL, NULL]},
  {ARRAY<INT64>[NULL]},
  {ARRAY<INT64>[8589934592]},
  {ARRAY<INT64>[]},
  {ARRAY<INT64>(NULL)}
]
==
[name=select_int64_array_unnest]
SELECT elem FROM AllArraysTable t, t.int64_arrcol elem
--
ARRAY<STRUCT<elem INT64>>[
  {NULL},
  {8589934592},
  {-8589934592},
  {NULL},
  {8589934592},
  {NULL},
  {0},
  {8589934592},
  {-8589934592},
  {-8589934592},
  {NULL},
  {NULL},
  {NULL},
  {8589934592}
]
==
[name=select_uint64_arrays]
SELECT uint64_arrcol FROM AllArraysTable
--
ARRAY<STRUCT<uint64_arrcol ARRAY<>>>[
  {ARRAY<UINT64>[8589934592, 1, 0]},
  {ARRAY<UINT64>[8589934592, NULL, 0]},
  {ARRAY<UINT64>[NULL, 0]},
  {ARRAY<UINT64>[8589934592, NULL]},
  {ARRAY<UINT64>[NULL, NULL]},
  {ARRAY<UINT64>[NULL]},
  {ARRAY<UINT64>[8589934592]},
  {ARRAY<UINT64>[]},
  {ARRAY<UINT64>(NULL)}
]
==
[name=select_uint64_array_unnest]
SELECT elem FROM AllArraysTable t, t.uint64_arrcol elem
--
ARRAY<STRUCT<elem UINT64>>[
  {NULL},
  {8589934592},
  {0},
  {NULL},
  {8589934592},
  {NULL},
  {1},
  {8589934592},
  {0},
  {0},
  {NULL},
  {NULL},
  {NULL},
  {8589934592}
]
==
[name=select_float_arrays]
SELECT float_arrcol FROM AllArraysTable
--
ARRAY<STRUCT<float_arrcol ARRAY<>>>[
  {ARRAY<FLOAT>[1.1, 0, -1.1]},
  {ARRAY<FLOAT>[1.1, NULL, -1.1]},
  {ARRAY<FLOAT>[NULL, -1.1]},
  {ARRAY<FLOAT>[1.1, NULL]},
  {ARRAY<FLOAT>[NULL, NULL]},
  {ARRAY<FLOAT>[NULL]},
  {ARRAY<FLOAT>[1.1]},
  {ARRAY<FLOAT>[]},
  {ARRAY<FLOAT>(NULL)}
]
==
[name=select_float_array_unnest]
SELECT elem FROM AllArraysTable t, t.float_arrcol elem
--
ARRAY<STRUCT<elem FLOAT>>[
  {NULL},
  {1.1},
  {-1.1},
  {NULL},
  {1.1},
  {NULL},
  {0},
  {1.1},
  {-1.1},
  {-1.1},
  {NULL},
  {NULL},
  {NULL},
  {1.1}
]
==
[name=select_double_arrays]
SELECT double_arrcol FROM AllArraysTable
--
ARRAY<STRUCT<double_arrcol ARRAY<>>>[
  {ARRAY<DOUBLE>[1.1, 0, -1.1]},
  {ARRAY<DOUBLE>[1.1, NULL, -1.1]},
  {ARRAY<DOUBLE>[NULL, -1.1]},
  {ARRAY<DOUBLE>[1.1, NULL]},
  {ARRAY<DOUBLE>[NULL, NULL]},
  {ARRAY<DOUBLE>[NULL]},
  {ARRAY<DOUBLE>[1.1]},
  {ARRAY<DOUBLE>[]},
  {ARRAY<DOUBLE>(NULL)}
]
==
[name=select_double_array_unnest]
SELECT elem FROM AllArraysTable t, t.double_arrcol elem
--
ARRAY<STRUCT<elem DOUBLE>>[
  {NULL},
  {1.1},
  {-1.1},
  {NULL},
  {1.1},
  {NULL},
  {0},
  {1.1},
  {-1.1},
  {-1.1},
  {NULL},
  {NULL},
  {NULL},
  {1.1}
]
==
[name=select_string_arrays]
SELECT string_arrcol FROM AllArraysTable
--
ARRAY<STRUCT<string_arrcol ARRAY<>>>[
  {ARRAY<STRING>["σ", "π", "⨝"]},
  {ARRAY<STRING>["σ", NULL, "⨝"]},
  {ARRAY<STRING>[NULL, "⨝"]},
  {ARRAY<STRING>["σ", NULL]},
  {ARRAY<STRING>[NULL, NULL]},
  {ARRAY<STRING>[NULL]},
  {ARRAY<STRING>["σ"]},
  {ARRAY<STRING>[]},
  {ARRAY<STRING>(NULL)}
]
==
[name=select_string_array_unnest]
SELECT elem FROM AllArraysTable t, t.string_arrcol elem
--
ARRAY<STRUCT<elem STRING>>[
  {NULL},
  {"σ"},
  {"⨝"},
  {NULL},
  {"σ"},
  {NULL},
  {"π"},
  {"σ"},
  {"⨝"},
  {"⨝"},
  {NULL},
  {NULL},
  {NULL},
  {"σ"}
]
==
[name=select_bytes_arrays]
SELECT bytes_arrcol FROM AllArraysTable
--
ARRAY<STRUCT<bytes_arrcol ARRAY<>>>[
  {ARRAY<BYTES>[b"a", b"b", b"c"]},
  {ARRAY<BYTES>[b"a", NULL, b"c"]},
  {ARRAY<BYTES>[NULL, b"c"]},
  {ARRAY<BYTES>[b"a", NULL]},
  {ARRAY<BYTES>[NULL, NULL]},
  {ARRAY<BYTES>[NULL]},
  {ARRAY<BYTES>[b"a"]},
  {ARRAY<BYTES>[]},
  {ARRAY<BYTES>(NULL)}
]
==
[name=select_bytes_array_unnest]
SELECT elem FROM AllArraysTable t, t.bytes_arrcol elem
--
ARRAY<STRUCT<elem BYTES>>[
  {NULL},
  {b"a"},
  {b"c"},
  {NULL},
  {b"a"},
  {NULL},
  {b"b"},
  {b"a"},
  {b"c"},
  {b"c"},
  {NULL},
  {NULL},
  {NULL},
  {b"a"}
]
==
[name=select_date_arrays]
SELECT date_arrcol FROM AllArraysTable
--
ARRAY<STRUCT<date_arrcol ARRAY<>>>[
  {ARRAY<DATE>[1984-08-02, 2000-01-01, 2014-09-11]},
  {ARRAY<DATE>[1984-08-02, NULL, 2014-09-11]},
  {ARRAY<DATE>[NULL, 2014-09-11]},
  {ARRAY<DATE>[1984-08-02, NULL]},
  {ARRAY<DATE>[NULL, NULL]},
  {ARRAY<DATE>[NULL]},
  {ARRAY<DATE>[1984-08-02]},
  {ARRAY<DATE>[]},
  {ARRAY<DATE>(NULL)}
]
==
[name=select_date_array_unnest]
SELECT elem FROM AllArraysTable t, t.date_arrcol elem
--
ARRAY<STRUCT<elem DATE>>[
  {NULL},
  {1984-08-02},
  {2014-09-11},
  {NULL},
  {1984-08-02},
  {NULL},
  {2000-01-01},
  {1984-08-02},
  {2014-09-11},
  {2014-09-11},
  {NULL},
  {NULL},
  {NULL},
  {1984-08-02}
]
==
[name=select_timestamp_arrays]
SELECT micros_arrcol FROM AllArraysTable
--
ARRAY<STRUCT<micros_arrcol ARRAY<>>>[
  {ARRAY<TIMESTAMP>[
     1984-08-02 01:01:01.001001+00,
     2000-01-01 01:01:01.001001+00,
     2014-09-11 01:01:01.001001+00
   ]},
  {ARRAY<TIMESTAMP>[
     1984-08-02 01:01:01.001001+00,
     NULL,
     2014-09-11 01:01:01.001001+00
   ]},
  {ARRAY<TIMESTAMP>[
     NULL,
     2014-09-11 01:01:01.001001+00
   ]},
  {ARRAY<TIMESTAMP>[
     1984-08-02 01:01:01.001001+00,
     NULL
   ]},
  {ARRAY<TIMESTAMP>[NULL, NULL]},
  {ARRAY<TIMESTAMP>[NULL]},
  {ARRAY<TIMESTAMP>[1984-08-02 01:01:01.001001+00]},
  {ARRAY<TIMESTAMP>[]},
  {ARRAY<TIMESTAMP>(NULL)}
]
==
[name=select_timestamp_array_unnest]
SELECT elem FROM AllArraysTable t, t.micros_arrcol elem
--
ARRAY<STRUCT<elem TIMESTAMP>>[
  {NULL},
  {1984-08-02 01:01:01.001001+00},
  {2014-09-11 01:01:01.001001+00},
  {NULL},
  {1984-08-02 01:01:01.001001+00},
  {NULL},
  {2000-01-01 01:01:01.001001+00},
  {1984-08-02 01:01:01.001001+00},
  {2014-09-11 01:01:01.001001+00},
  {2014-09-11 01:01:01.001001+00},
  {NULL},
  {NULL},
  {NULL},
  {1984-08-02 01:01:01.001001+00}
]
==
[name=select_enum_arrays]
SELECT enum_arrcol FROM AllArraysTable
--
ARRAY<STRUCT<enum_arrcol ARRAY<>>>[
  {ARRAY<ENUM<zetasql_test__.TestEnum>>[TESTENUM0, TESTENUM1, TESTENUM2]},
  {ARRAY<ENUM<zetasql_test__.TestEnum>>[TESTENUM0, NULL, TESTENUM2]},
  {ARRAY<ENUM<zetasql_test__.TestEnum>>[NULL, TESTENUM2]},
  {ARRAY<ENUM<zetasql_test__.TestEnum>>[TESTENUM0, NULL]},
  {ARRAY<ENUM<zetasql_test__.TestEnum>>[NULL, NULL]},
  {ARRAY<ENUM<zetasql_test__.TestEnum>>[NULL]},
  {ARRAY<ENUM<zetasql_test__.TestEnum>>[TESTENUM0]},
  {ARRAY<ENUM<zetasql_test__.TestEnum>>[]},
  {ARRAY<ENUM<zetasql_test__.TestEnum>>(NULL)}
]
==
[name=select_enum_array_unnest]
SELECT elem FROM AllArraysTable t, t.enum_arrcol elem
--
ARRAY<STRUCT<elem ENUM<zetasql_test__.TestEnum>>>[
  {NULL},
  {TESTENUM0},
  {TESTENUM2},
  {NULL},
  {TESTENUM0},
  {NULL},
  {TESTENUM1},
  {TESTENUM0},
  {TESTENUM2},
  {TESTENUM2},
  {NULL},
  {NULL},
  {NULL},
  {TESTENUM0}
]
==
[name=select_proto_arrays]
SELECT proto_arrcol FROM AllArraysTable
--
ARRAY<STRUCT<proto_arrcol ARRAY<>>>[
  {ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[
     {
       int64_key_1: 11
       int64_key_2: 12
     },
     {
       int64_key_1: 21
       int64_key_2: 22
     },
     {
       int64_key_1: 31
       int64_key_2: 32
     }
   ]},
  {ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[
     {
       int64_key_1: 11
       int64_key_2: 12
     },
     NULL,
     {
       int64_key_1: 31
       int64_key_2: 32
     }
   ]},
  {ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[
     NULL,
     {
       int64_key_1: 31
       int64_key_2: 32
     }
   ]},
  {ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[
     {
       int64_key_1: 11
       int64_key_2: 12
     },
     NULL
   ]},
  {ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[NULL, NULL]},
  {ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[NULL]},
  {ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[
     {
       int64_key_1: 11
       int64_key_2: 12
     }
   ]},
  {ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[]},
  {ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>(NULL)}
]
==
[name=select_proto_array_unnest]
SELECT elem FROM AllArraysTable t, t.proto_arrcol elem
--
ARRAY<STRUCT<elem PROTO<zetasql_test__.KitchenSinkPB>>>[
  {NULL},
  {{
     int64_key_1: 11
     int64_key_2: 12
   }},
  {{
     int64_key_1: 31
     int64_key_2: 32
   }},
  {NULL},
  {{
     int64_key_1: 11
     int64_key_2: 12
   }},
  {NULL},
  {{
     int64_key_1: 21
     int64_key_2: 22
   }},
  {{
     int64_key_1: 11
     int64_key_2: 12
   }},
  {{
     int64_key_1: 31
     int64_key_2: 32
   }},
  {{
     int64_key_1: 31
     int64_key_2: 32
   }},
  {NULL},
  {NULL},
  {NULL},
  {{
     int64_key_1: 11
     int64_key_2: 12
   }}
]
==
[name=select_struct_arrays]
SELECT struct_arrcol FROM AllArraysTable
--
ARRAY<STRUCT<struct_arrcol ARRAY<>>>[
  {ARRAY<STRUCT<INT64, INT64>>[{11, 12}, {21, 22}, {31, 32}]},
  {ARRAY<STRUCT<INT64, INT64>>[{11, 12}, NULL, {31, 32}]},
  {ARRAY<STRUCT<INT64, INT64>>[NULL, {31, 32}]},
  {ARRAY<STRUCT<INT64, INT64>>[{11, 12}, NULL]},
  {ARRAY<STRUCT<INT64, INT64>>[NULL, NULL]},
  {ARRAY<STRUCT<INT64, INT64>>[NULL]},
  {ARRAY<STRUCT<INT64, INT64>>[{11, 12}]},
  {ARRAY<STRUCT<INT64, INT64>>[]},
  {ARRAY<STRUCT<INT64, INT64>>(NULL)}
]
==
[name=select_struct_array_unnest]
SELECT elem FROM AllArraysTable t, t.struct_arrcol elem
--
ARRAY<STRUCT<elem STRUCT<INT64, INT64>>>[
  {NULL},
  {{11, 12}},
  {{31, 32}},
  {NULL},
  {{11, 12}},
  {NULL},
  {{21, 22}},
  {{11, 12}},
  {{31, 32}},
  {{31, 32}},
  {NULL},
  {NULL},
  {NULL},
  {{11, 12}}
]
==
##
## Queries that tests explicit unnest. This time we do not require a full
## matrix.
##
[name=select_string_array_unnest_explicit]
SELECT elem FROM AllArraysTable t, UNNEST(t.string_arrcol) AS elem
--
ARRAY<STRUCT<elem STRING>>[
  {NULL},
  {"σ"},
  {"⨝"},
  {NULL},
  {"σ"},
  {NULL},
  {"π"},
  {"σ"},
  {"⨝"},
  {"⨝"},
  {NULL},
  {NULL},
  {NULL},
  {"σ"}
]
==
##
## From here, several queries to test offset/ordinality without joins.
##
[name=select_string_array_unnest_with_offset]
SELECT elem, offset FROM AllArraysTable t, t.string_arrcol elem WITH OFFSET
--
ARRAY<STRUCT<elem STRING, offset INT64>>[
  {NULL, 1},
  {"σ", 0},
  {"⨝", 2},
  {NULL, 1},
  {"σ", 0},
  {NULL, 0},
  {"π", 1},
  {"σ", 0},
  {"⨝", 2},
  {"⨝", 1},
  {NULL, 0},
  {NULL, 1},
  {NULL, 0},
  {"σ", 0}
]
==
[name=select_string_array_unnest_with_offset_aliased]
SELECT elem, off FROM AllArraysTable t, t.string_arrcol elem WITH OFFSET off
--
ARRAY<STRUCT<elem STRING, off INT64>>[
  {NULL, 1},
  {"σ", 0},
  {"⨝", 2},
  {NULL, 1},
  {"σ", 0},
  {NULL, 0},
  {"π", 1},
  {"σ", 0},
  {"⨝", 2},
  {"⨝", 1},
  {NULL, 0},
  {NULL, 1},
  {NULL, 0},
  {"σ", 0}
]
==
[name=select_string_array_unnest_with_offset_sorted]
SELECT elem, offset
FROM AllArraysTable t, t.string_arrcol elem WITH OFFSET
ORDER BY offset
--
ARRAY<STRUCT<elem STRING, offset INT64>>[
  {"σ", 0},
  {NULL, 0},
  {"σ", 0},
  {"σ", 0},
  {"σ", 0},
  {NULL, 0},
  {NULL, 0},
  {NULL, 1},
  {"⨝", 1},
  {NULL, 1},
  {NULL, 1},
  {"π", 1},
  {"⨝", 2},
  {"⨝", 2}
]
==
[name=select_string_array_unnest_with_offset_aliased_sorted]
SELECT elem, off
FROM AllArraysTable t, t.string_arrcol elem WITH OFFSET off
ORDER BY off
--
ARRAY<STRUCT<elem STRING, off INT64>>[
  {"σ", 0},
  {NULL, 0},
  {"σ", 0},
  {"σ", 0},
  {"σ", 0},
  {NULL, 0},
  {NULL, 0},
  {NULL, 1},
  {"⨝", 1},
  {NULL, 1},
  {NULL, 1},
  {"π", 1},
  {"⨝", 2},
  {"⨝", 2}
]
==
[name=select_string_array_correlated_unnest_with_offset_aliased]
SELECT ARRAY(SELECT AS STRUCT elem, off FROM t.string_arrcol elem WITH OFFSET off)
FROM AllArraysTable t
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<STRUCT<elem STRING, off INT64>>[{NULL, 1}, {"σ", 0}, {"⨝", 2}]},
  {ARRAY<STRUCT<elem STRING, off INT64>>[{NULL, 1}, {"σ", 0}]},
  {ARRAY<STRUCT<elem STRING, off INT64>>[{NULL, 0}]},
  {ARRAY<STRUCT<elem STRING, off INT64>>[]},
  {ARRAY<STRUCT<elem STRING, off INT64>>[{"π", 1}, {"σ", 0}, {"⨝", 2}]},
  {ARRAY<STRUCT<elem STRING, off INT64>>[{"⨝", 1}, {NULL, 0}]},
  {ARRAY<STRUCT<elem STRING, off INT64>>[{NULL, 1}, {NULL, 0}]},
  {ARRAY<STRUCT<elem STRING, off INT64>>[{"σ", 0}]},
  {ARRAY<STRUCT<elem STRING, off INT64>>[]}
]
==
# TODO: Introduce these queries to test WITH ORDINALITY
# [name=select_string_array_unnest_with_ordinality]
# SELECT arr
# FROM AllArraysTable t, UNNEST(t.string_arrcol) WITH ORDINALITY arr
# --
# false
# ==
# [name=select_string_array_unnest_with_ordinality_aliased]
# SELECT arr.elem, arr.ord, elem, ord
# FROM AllArraysTable t, UNNEST(t.string_arrcol) WITH ORDINALITY arr(elem, ord)
# --
# false
# ==
# [name=select_string_array_unnest_with_ordinality_sorted]
# SELECT arr
# FROM AllArraysTable t, UNNEST(t.string_arrcol) WITH ORDINALITY arr(elem, ord)
# ORDER BY arr.ord
# --
# false
# ==
# [name=select_string_array_correlated_unnest_with_ordinality_aliased]
# SELECT ARRAY(SELECT arr FROM UNNEST(t.string_arrcol) WITH ORDINALITY arr)
# FROM AllArraysTable t
# --
# false
# ==

[test_features1=V_1_1_ARRAY_EQUALITY]
[name=select_array_equality_literals]
SELECT [] = [],
       [1,2,3] = [1,2,3],
       [1,2] = [1,2,3],
       [1,NULL] = [1,2,3],
       [1,NULL,3] = [1,2,3],
       [1,NULL,2] = [1,2,3],
       [1,NULL,2] = [1,NULL,2]
--
WITH FEATURES: V_1_1_ARRAY_EQUALITY
ARRAY<STRUCT<BOOL, BOOL, BOOL, BOOL, BOOL, BOOL, BOOL>>[
  {true, true, false, false, NULL, false, NULL}
]
--
WITH FEATURES: <none>
ERROR: generic::invalid_argument: Equality is not defined for arguments of type empty array [at 1:8]
SELECT [] = [],
       ^
==

[test_features1=V_1_1_ARRAY_EQUALITY]
[name=select_array_equality_empty_array_null]
SELECT [] = cast(NULL AS ARRAY<INT64>)
--
WITH FEATURES: V_1_1_ARRAY_EQUALITY
ARRAY<STRUCT<BOOL>>[{NULL}]
--
WITH FEATURES: <none>
ERROR: generic::invalid_argument: Equality is not defined for arguments of type empty array [at 1:8]
SELECT [] = cast(NULL AS ARRAY<INT64>)
       ^
==

[test_features1=V_1_1_ARRAY_EQUALITY]
[name=select_array_equality_join_on_array_types]
SELECT *
FROM AllArraysTable a JOIN AllArraysTable b
ON a.bool_arrcol = b.bool_arrcol AND
   a.int32_arrcol = b.int32_arrcol AND
   a.uint32_arrcol = b.uint32_arrcol AND
   a.int64_arrcol = b.int64_arrcol AND
   a.uint64_arrcol = b.uint64_arrcol AND
   a.string_arrcol = b.string_arrcol AND
   a.bytes_arrcol = b.bytes_arrcol AND
   a.date_arrcol = b.date_arrcol AND
   a.micros_arrcol = b.micros_arrcol AND
   a.enum_arrcol = b.enum_arrcol AND
   a.struct_arrcol = b.struct_arrcol;
--
WITH FEATURES: V_1_1_ARRAY_EQUALITY
ARRAY<STRUCT<
        key INT64,
        bool_arrcol ARRAY<>,
        int32_arrcol ARRAY<>,
        uint32_arrcol ARRAY<>,
        int64_arrcol ARRAY<>,
        uint64_arrcol ARRAY<>,
        float_arrcol ARRAY<>,
        double_arrcol ARRAY<>,
        string_arrcol ARRAY<>,
        bytes_arrcol ARRAY<>,
        date_arrcol ARRAY<>,
        micros_arrcol ARRAY<>,
        enum_arrcol ARRAY<>,
        proto_arrcol ARRAY<>,
        struct_arrcol ARRAY<>,
        key INT64,
        bool_arrcol ARRAY<>,
        int32_arrcol ARRAY<>,
        uint32_arrcol ARRAY<>,
        int64_arrcol ARRAY<>,
        uint64_arrcol ARRAY<>,
        float_arrcol ARRAY<>,
        double_arrcol ARRAY<>,
        string_arrcol ARRAY<>,
        bytes_arrcol ARRAY<>,
        date_arrcol ARRAY<>,
        micros_arrcol ARRAY<>,
        enum_arrcol ARRAY<>,
        proto_arrcol ARRAY<>,
        struct_arrcol ARRAY<>
      >>
[{
   8,
   ARRAY<BOOL>[],
   ARRAY<INT32>[],
   ARRAY<UINT32>[],
   ARRAY<INT64>[],
   ARRAY<UINT64>[],
   ARRAY<FLOAT>[],
   ARRAY<DOUBLE>[],
   ARRAY<STRING>[],
   ARRAY<BYTES>[],
   ARRAY<DATE>[],
   ARRAY<TIMESTAMP>[],
   ARRAY<ENUM<zetasql_test__.TestEnum>>[],
   ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[],
   ARRAY<STRUCT<INT64, INT64>>[],
   8,
   ARRAY<BOOL>[],
   ARRAY<INT32>[],
   ARRAY<UINT32>[],
   ARRAY<INT64>[],
   ARRAY<UINT64>[],
   ARRAY<FLOAT>[],
   ARRAY<DOUBLE>[],
   ARRAY<STRING>[],
   ARRAY<BYTES>[],
   ARRAY<DATE>[],
   ARRAY<TIMESTAMP>[],
   ARRAY<ENUM<zetasql_test__.TestEnum>>[],
   ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[],
   ARRAY<STRUCT<INT64, INT64>>[]
 },
 {1,
  ARRAY<BOOL>[true, false, true],
  ARRAY<INT32>[1, 0, -1],
  ARRAY<UINT32>[2, 1, 0],
  ARRAY<INT64>[8589934592, 0, -8589934592],
  ARRAY<UINT64>[8589934592, 1, 0],
  ARRAY<FLOAT>[1.1, 0, -1.1],
  ARRAY<DOUBLE>[1.1, 0, -1.1],
  ARRAY<STRING>["σ", "π", "⨝"],
  ARRAY<BYTES>[b"a", b"b", b"c"],
  ARRAY<DATE>[1984-08-02, 2000-01-01, 2014-09-11],
  ARRAY<TIMESTAMP>[
    1984-08-02 01:01:01.001001+00,
    2000-01-01 01:01:01.001001+00,
    2014-09-11 01:01:01.001001+00
  ],
  ARRAY<ENUM<zetasql_test__.TestEnum>>[TESTENUM0, TESTENUM1, TESTENUM2],
  ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[
    {
      int64_key_1: 11
      int64_key_2: 12
    },
    {
      int64_key_1: 21
      int64_key_2: 22
    },
    {
      int64_key_1: 31
      int64_key_2: 32
    }
  ],
  ARRAY<STRUCT<INT64, INT64>>[{11, 12}, {21, 22}, {31, 32}],
  1,
  ARRAY<BOOL>[true, false, true],
  ARRAY<INT32>[1, 0, -1],
  ARRAY<UINT32>[2, 1, 0],
  ARRAY<INT64>[8589934592, 0, -8589934592],
  ARRAY<UINT64>[8589934592, 1, 0],
  ARRAY<FLOAT>[1.1, 0, -1.1],
  ARRAY<DOUBLE>[1.1, 0, -1.1],
  ARRAY<STRING>["σ", "π", "⨝"],
  ARRAY<BYTES>[b"a", b"b", b"c"],
  ARRAY<DATE>[1984-08-02, 2000-01-01, 2014-09-11],
  ARRAY<TIMESTAMP>[
    1984-08-02 01:01:01.001001+00,
    2000-01-01 01:01:01.001001+00,
    2014-09-11 01:01:01.001001+00
  ],
  ARRAY<ENUM<zetasql_test__.TestEnum>>[TESTENUM0, TESTENUM1, TESTENUM2],
  ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[
    {
      int64_key_1: 11
      int64_key_2: 12
    },
    {
      int64_key_1: 21
      int64_key_2: 22
    },
    {
      int64_key_1: 31
      int64_key_2: 32
    }
  ],
  ARRAY<STRUCT<INT64, INT64>>[{11, 12}, {21, 22}, {31, 32}]},
 {7,
  ARRAY<BOOL>[true],
  ARRAY<INT32>[1],
  ARRAY<UINT32>[2],
  ARRAY<INT64>[8589934592],
  ARRAY<UINT64>[8589934592],
  ARRAY<FLOAT>[1.1],
  ARRAY<DOUBLE>[1.1],
  ARRAY<STRING>["σ"],
  ARRAY<BYTES>[b"a"],
  ARRAY<DATE>[1984-08-02],
  ARRAY<TIMESTAMP>[1984-08-02 01:01:01.001001+00],
  ARRAY<ENUM<zetasql_test__.TestEnum>>[TESTENUM0],
  ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[
    {
      int64_key_1: 11
      int64_key_2: 12
    }
  ],
  ARRAY<STRUCT<INT64, INT64>>[{11, 12}],
  7,
  ARRAY<BOOL>[true],
  ARRAY<INT32>[1],
  ARRAY<UINT32>[2],
  ARRAY<INT64>[8589934592],
  ARRAY<UINT64>[8589934592],
  ARRAY<FLOAT>[1.1],
  ARRAY<DOUBLE>[1.1],
  ARRAY<STRING>["σ"],
  ARRAY<BYTES>[b"a"],
  ARRAY<DATE>[1984-08-02],
  ARRAY<TIMESTAMP>[1984-08-02 01:01:01.001001+00],
  ARRAY<ENUM<zetasql_test__.TestEnum>>[TESTENUM0],
  ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[
    {
      int64_key_1: 11
      int64_key_2: 12
    }
  ],
  ARRAY<STRUCT<INT64, INT64>>[{11, 12}]}]
--
WITH FEATURES: <none>
ERROR: generic::invalid_argument: Equality is not defined for arguments of type ARRAY<BOOL> [at 3:4]
ON a.bool_arrcol = b.bool_arrcol AND
   ^
==

[test_features1=V_1_1_ARRAY_EQUALITY]
[name=select_array_equality_all_array_types]
SELECT bool_arrcol = bool_arrcol,
       int32_arrcol = int32_arrcol,
       uint32_arrcol = uint32_arrcol,
       int64_arrcol = int64_arrcol,
       uint64_arrcol = uint64_arrcol,
       float_arrcol = float_arrcol,
       double_arrcol = double_arrcol,
       string_arrcol = string_arrcol,
       bytes_arrcol = bytes_arrcol,
       date_arrcol = date_arrcol,
       enum_arrcol = enum_arrcol,
       struct_arrcol = struct_arrcol
FROM AllArraysTable;
--
WITH FEATURES: V_1_1_ARRAY_EQUALITY
ARRAY<STRUCT<BOOL, BOOL, BOOL, BOOL, BOOL, BOOL, BOOL, BOOL, BOOL, BOOL, BOOL, BOOL>>[
  {NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {true, true, true, true, true, true, true, true, true, true, true, true},
  {true, true, true, true, true, true, true, true, true, true, true, true},
  {NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {true, true, true, true, true, true, true, true, true, true, true, true},
  {NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL}
]
--
WITH FEATURES: <none>
ERROR: generic::invalid_argument: Equality is not defined for arguments of type ARRAY<BOOL> [at 1:8]
SELECT bool_arrcol = bool_arrcol,
       ^
