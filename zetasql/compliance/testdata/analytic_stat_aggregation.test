[default required_features=ANALYTIC_FUNCTIONS]

[prepare_database]
CREATE TABLE TestTable AS
SELECT 1 AS row_id, 1.0 AS y,               5.0 AS x              UNION ALL
SELECT 2,           3.0,                    9.0                   UNION ALL
SELECT 3,           4.0,                    7.0                   UNION ALL
SELECT 4,           1.0,                    CAST(NULL as DOUBLE)  UNION ALL
SELECT 5,           CAST(NULL as DOUBLE),   1.0                   UNION ALL
SELECT 6,           1.0,                    5.0                   UNION ALL
SELECT 7,           3.0,                    9.0                   UNION ALL
SELECT 8,           CAST('-inf' as DOUBLE), 1.0                   UNION ALL
SELECT 9,           1.0,                    CAST('inf' as DOUBLE) UNION ALL
SELECT 10,          1.0,                    5.0                   UNION ALL
SELECT 11,          3.0,                    9.0                   UNION ALL
SELECT 12,          4.0,                    7.0                   UNION ALL
SELECT 13,          CAST('inf' as DOUBLE),  CAST('inf' as DOUBLE) UNION ALL
SELECT 14,          CAST('nan' as DOUBLE),  1.0                   UNION ALL
SELECT 15,          1.0,                    CAST('nan' as DOUBLE) UNION ALL
SELECT 16,          CAST('nan' as DOUBLE),  CAST('nan' as DOUBLE) UNION ALL
SELECT 17,          1.0,                    5.0                   UNION ALL
SELECT 18,          3.0,                    9.0                   UNION ALL
SELECT 19,          4.0,                    7.0                   UNION ALL
SELECT 20,          CAST(NULL as DOUBLE),   CAST(NULL as DOUBLE)

--
ARRAY<STRUCT<row_id INT64, y DOUBLE, x DOUBLE>>[
  {1, 1, 5},
  {2, 3, 9},
  {3, 4, 7},
  {4, 1, NULL},
  {5, NULL, 1},
  {6, 1, 5},
  {7, 3, 9},
  {8, -inf, 1},
  {9, 1, inf},
  {10, 1, 5},
  {11, 3, 9},
  {12, 4, 7},
  {13, inf, inf},
  {14, nan, 1},
  {15, 1, nan},
  {16, nan, nan},
  {17, 1, 5},
  {18, 3, 9},
  {19, 4, 7},
  {20, NULL, NULL}
]
==

[prepare_database]
CREATE TABLE TestTable2 AS
SELECT 1 AS row_id, NUMERIC '0.1' AS y,     NUMERIC '0.5' AS x    UNION ALL
SELECT 2,           NUMERIC '0.3',          NUMERIC '0.9'         UNION ALL
SELECT 3,           NUMERIC '0.4',          NUMERIC '0.7'         UNION ALL
SELECT 4,           NUMERIC '0.1',          NULL                  UNION ALL
SELECT 5,           NULL,                   NUMERIC '0.0'         UNION ALL
SELECT 6,           NUMERIC '0.1',          NUMERIC '0.5'         UNION ALL
SELECT 7,           NUMERIC '0.3',          NUMERIC '0.9'         UNION ALL
SELECT 10,          NUMERIC '0.1',          NUMERIC '0.5'         UNION ALL
SELECT 11,          NUMERIC '0.3',          NUMERIC '0.9'         UNION ALL
SELECT 12,          NUMERIC '0.4',          NUMERIC '0.7'         UNION ALL
SELECT 17,          NUMERIC '0.1',          NUMERIC '0.5'         UNION ALL
SELECT 18,          NUMERIC '0.3',          NUMERIC '0.9'         UNION ALL
SELECT 19,          NUMERIC '0.4',          NUMERIC '0.7'         UNION ALL
SELECT 20,          NULL,                   NULL

--
ARRAY<STRUCT<row_id INT64, y NUMERIC, x NUMERIC>>[
  {1, 0.1, 0.5},
  {2, 0.3, 0.9},
  {3, 0.4, 0.7},
  {4, 0.1, NULL},
  {5, NULL, 0},
  {6, 0.1, 0.5},
  {7, 0.3, 0.9},
  {10, 0.1, 0.5},
  {11, 0.3, 0.9},
  {12, 0.4, 0.7},
  {17, 0.1, 0.5},
  {18, 0.3, 0.9},
  {19, 0.4, 0.7},
  {20, NULL, NULL}
]
==

[name=analytic_stats_single_column_moving_window]
SELECT row_id,
       VAR_POP(x) OVER w,
       VAR_SAMP(x) OVER w,
       STDDEV_POP(x) OVER w,
       STDDEV_SAMP(x) OVER w
FROM TestTable
WINDOW w AS (ORDER BY row_id ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)
--
ARRAY<STRUCT<row_id INT64, DOUBLE, DOUBLE, DOUBLE, DOUBLE>>[
  {1, 4, 8, 2, 2.8284271247461903},
  {2, 2.666666666666667, 4, 1.6329931618554521, 2},
  {3, 1, 2, 1, 1.4142135623730951},
  {4, 9, 18, 3, 4.2426406871192848},
  {5, 4, 8, 2, 2.8284271247461903},
  {6, 10.666666666666666, 16, 3.2659863237109041, 4},
  {7, 10.666666666666666, 16, 3.2659863237109041, 4},
  {8, nan, nan, nan, nan},
  {9, nan, nan, nan, nan},
  {10, nan, nan, nan, nan},
  {11, 2.666666666666667, 4, 1.6329931618554521, 2},
  {12, nan, nan, nan, nan},
  {13, nan, nan, nan, nan},
  {14, nan, nan, nan, nan},
  {15, nan, nan, nan, nan},
  {16, nan, nan, nan, nan},
  {17, nan, nan, nan, nan},
  {18, 2.666666666666667, 4, 1.6329931618554521, 2},
  {19, 1, 2, 1, 1.4142135623730951},
  {20, 0, NULL, 0, NULL}
]
==

[name=analytic_stats_single_column_moving_window_numeric]
[required_features=ANALYTIC_FUNCTIONS,NUMERIC_TYPE]
SELECT row_id,
       VAR_POP(x) OVER w,
       VAR_SAMP(x) OVER w,
       STDDEV_POP(x) OVER w,
       STDDEV_SAMP(x) OVER w
FROM TestTable2
WINDOW w AS (ORDER BY row_id ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)
--
ARRAY<STRUCT<row_id INT64, DOUBLE, DOUBLE, DOUBLE, DOUBLE>>[
  {1, 0.04, 0.08, 0.2, 0.282842712474619},
  {2, 0.026666666666666668, 0.04, 0.16329931618554522, 0.2},
  {3, 0.01, 0.02, 0.1, 0.1414213562373095},
  {4, 0.1225, 0.245, 0.35, 0.49497474683058329},
  {5, 0.0625, 0.125, 0.25, 0.35355339059327379},
  {6,
   0.13555555555555557,
   0.20333333333333334,
   0.36817870057290869,
   0.45092497528228942},
  {7,
   0.035555555555555556,
   0.053333333333333337,
   0.18856180831641267,
   0.23094010767585033},
  {10,
   0.035555555555555556,
   0.053333333333333337,
   0.18856180831641267,
   0.23094010767585033},
  {11, 0.026666666666666668, 0.04, 0.16329931618554522, 0.2},
  {12, 0.026666666666666668, 0.04, 0.16329931618554522, 0.2},
  {17, 0.026666666666666668, 0.04, 0.16329931618554522, 0.2},
  {18, 0.026666666666666668, 0.04, 0.16329931618554522, 0.2},
  {19, 0.01, 0.02, 0.1, 0.1414213562373095},
  {20, 0, NULL, 0, NULL}
]

==

[name=analytic_stats_double_column_moving_window]
SELECT row_id,
       COVAR_POP(y,x) OVER w,
       COVAR_SAMP(y,x) OVER w,
       CORR(y,x) OVER w
FROM TestTable
WINDOW w AS (ORDER BY row_id ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)
--
ARRAY<STRUCT<row_id INT64, DOUBLE, DOUBLE, DOUBLE>>[
  {1, 2, 4, 1},
  {2, 1.3333333333333333, 2, 0.65465367070797709},
  {3, -0.5, -1, -1},
  {4, 0, NULL, NULL},
  {5, 0, NULL, NULL},
  {6, 2, 4, 1},
  {7, nan, nan, nan},
  {8, nan, nan, nan},
  {9, nan, nan, nan},
  {10, nan, nan, nan},
  {11, 1.3333333333333333, 2, 0.65465367070797709},
  {12, nan, nan, nan},
  {13, nan, nan, nan},
  {14, nan, nan, nan},
  {15, nan, nan, nan},
  {16, nan, nan, nan},
  {17, nan, nan, nan},
  {18, 1.3333333333333333, 2, 0.65465367070797709},
  {19, -0.5, -1, -1},
  {20, 0, NULL, NULL}
]
==

[name=analytic_stats_double_column_moving_window_numeric]
[required_features=ANALYTIC_FUNCTIONS,NUMERIC_TYPE]
SELECT row_id,
       COVAR_POP(y,x) OVER w,
       COVAR_SAMP(y,x) OVER w,
       CORR(y,x) OVER w
FROM TestTable2
WINDOW w AS (ORDER BY row_id ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)
--
ARRAY<STRUCT<row_id INT64, DOUBLE, DOUBLE, DOUBLE>>[
  {1, 0.02, 0.04, 1},
  {2, 0.013333333333333334, 0.02, 0.6546536707079772},
  {3, -0.005, -0.01, -1},
  {4, 0, NULL, NULL},
  {5, 0, NULL, NULL},
  {6, 0.02, 0.04, 1},
  {7, 0.017777777777777778, 0.026666666666666668, 1},
  {10, 0.017777777777777778, 0.026666666666666668, 1},
  {11, 0.013333333333333334, 0.02, 0.6546536707079772},
  {12, 0.013333333333333334, 0.02, 0.6546536707079772},
  {17, 0.013333333333333334, 0.02, 0.6546536707079772},
  {18, 0.013333333333333334, 0.02, 0.6546536707079772},
  {19, -0.005, -0.01, -1},
  {20, 0, NULL, NULL}
]
==

[name=analytic_stats_single_column_cumulative]
SELECT row_id,
       VAR_POP(x) OVER w,
       VAR_SAMP(x) OVER w,
       STDDEV_POP(x) OVER w,
       STDDEV_SAMP(x) OVER w
FROM TestTable
WINDOW w AS (ORDER BY row_id)
--
ARRAY<STRUCT<row_id INT64, DOUBLE, DOUBLE, DOUBLE, DOUBLE>>[
  {1, 0, NULL, 0, NULL},
  {2, 4, 8, 2, 2.8284271247461903},
  {3, 2.666666666666667, 4, 1.6329931618554521, 2},
  {4, 2.666666666666667, 4, 1.6329931618554521, 2},
  {5, 8.75, 11.666666666666666, 2.9580398915498081, 3.415650255319866},
  {6, 7.04, 8.8, 2.6532998322843198, 2.9664793948382653},
  {7, 7.6666666666666661, 9.2, 2.7688746209726913, 3.03315017762062},
  {8,
   9.63265306122449,
   11.238095238095239,
   3.1036515689143473,
   3.3523268393901033},
  {9, nan, nan, nan, nan},
  {10, nan, nan, nan, nan},
  {11, nan, nan, nan, nan},
  {12, nan, nan, nan, nan},
  {13, nan, nan, nan, nan},
  {14, nan, nan, nan, nan},
  {15, nan, nan, nan, nan},
  {16, nan, nan, nan, nan},
  {17, nan, nan, nan, nan},
  {18, nan, nan, nan, nan},
  {19, nan, nan, nan, nan},
  {20, nan, nan, nan, nan}
]
==

[name=analytic_stats_single_column_cumulative_numeric]
[required_features=ANALYTIC_FUNCTIONS,NUMERIC_TYPE]
SELECT row_id,
       VAR_POP(x) OVER w,
       VAR_SAMP(x) OVER w,
       STDDEV_POP(x) OVER w,
       STDDEV_SAMP(x) OVER w
FROM TestTable2
WINDOW w AS (ORDER BY row_id)
--
ARRAY<STRUCT<row_id INT64, DOUBLE, DOUBLE, DOUBLE, DOUBLE>>[
  {1, 0, NULL, 0, NULL},
  {2, 0.04, 0.08, 0.2, 0.282842712474619},
  {3, 0.026666666666666668, 0.04, 0.16329931618554522, 0.2},
  {4, 0.026666666666666668, 0.04, 0.16329931618554522, 0.2},
  {5, 0.111875, 0.14916666666666667, 0.33447720400649128, 0.38622100754188227},
  {6, 0.0896, 0.112, 0.29933259094191533, 0.33466401061363021},
  {7,
   0.094722222222222222,
   0.11366666666666667,
   0.30776975521032313,
   0.33714487489307421},
  {10,
   0.082040816326530611,
   0.09571428571428571,
   0.28642768079662029,
   0.30937725468153876},
  {11,
   0.08359375,
   0.095535714285714279,
   0.28912583765550942,
   0.30908852176312579},
  {12,
   0.075061728395061728,
   0.084444444444444447,
   0.27397395568751004,
   0.29059326290271159},
  {17, 0.0689, 0.076555555555555557, 0.26248809496813374, 0.27668674625929512},
  {18,
   0.069586776859504137,
   0.076545454545454542,
   0.26379305688267107,
   0.27666849214439748},
  {19,
   0.064097222222222222,
   0.06992424242424243,
   0.25317429218272186,
   0.2644319239884671},
  {20,
   0.064097222222222222,
   0.06992424242424243,
   0.25317429218272186,
   0.2644319239884671}
]
==

[name=analytic_stats_double_column_cumulative]
SELECT row_id,
       COVAR_POP(y,x) OVER w,
       COVAR_SAMP(y,x) OVER w,
       CORR(y,x) OVER w
FROM TestTable
WINDOW w AS (ORDER BY row_id)
--
ARRAY<STRUCT<row_id INT64, DOUBLE, DOUBLE, DOUBLE>>[
  {1, 0, NULL, NULL},
  {2, 2, 4, 1},
  {3, 1.3333333333333333, 2, 0.65465367070797709},
  {4, 1.3333333333333333, 2, 0.65465367070797709},
  {5, 1.3333333333333333, 2, 0.65465367070797709},
  {6, 1.625, 2.1666666666666665, 0.7543365091413573},
  {7, 1.6, 2, 0.7453559924999299},
  {8, nan, nan, nan},
  {9, nan, nan, nan},
  {10, nan, nan, nan},
  {11, nan, nan, nan},
  {12, nan, nan, nan},
  {13, nan, nan, nan},
  {14, nan, nan, nan},
  {15, nan, nan, nan},
  {16, nan, nan, nan},
  {17, nan, nan, nan},
  {18, nan, nan, nan},
  {19, nan, nan, nan},
  {20, nan, nan, nan}
]
==

[name=analytic_stats_double_column_cumulative_numeric]
[required_features=ANALYTIC_FUNCTIONS,NUMERIC_TYPE]
SELECT row_id,
       COVAR_POP(y,x) OVER w,
       COVAR_SAMP(y,x) OVER w,
       CORR(y,x) OVER w
FROM TestTable2
WINDOW w AS (ORDER BY row_id)
--
ARRAY<STRUCT<row_id INT64, DOUBLE, DOUBLE, DOUBLE>>[
  {1, 0, NULL, NULL},
  {2, 0.02, 0.04, 1},
  {3, 0.013333333333333334, 0.02, 0.6546536707079772},
  {4, 0.013333333333333334, 0.02, 0.6546536707079772},
  {5, 0.013333333333333334, 0.02, 0.6546536707079772},
  {6, 0.01625, 0.021666666666666667, 0.7543365091413573},
  {7, 0.016, 0.02, 0.7453559924999299},
  {10, 0.017222222222222222, 0.020666666666666667, 0.79072370761391331},
  {11, 0.017142857142857144, 0.02, 0.7977240352174656},
  {12, 0.015, 0.017142857142857144, 0.70710678118654746},
  {17, 0.016296296296296295, 0.018333333333333333, 0.74672865663234378},
  {18, 0.016, 0.017777777777777778, 0.7453559924999299},
  {19, 0.014545454545454545, 0.016, 0.69156407480812454},
  {20, 0.014545454545454545, 0.016, 0.69156407480812454}
]
==

[name=analytic_stats_single_column_bounded_begin]
SELECT row_id,
       VAR_POP(x) OVER w,
       VAR_SAMP(x) OVER w,
       STDDEV_POP(x) OVER w,
       STDDEV_SAMP(x) OVER w
FROM TestTable
WINDOW w AS (ORDER BY row_id DESC RANGE BETWEEN 1 PRECEDING AND
                                                UNBOUNDED FOLLOWING)
--
ARRAY<STRUCT<row_id INT64, DOUBLE, DOUBLE, DOUBLE, DOUBLE>>[
  {20, nan, nan, nan, nan},
  {19, nan, nan, nan, nan},
  {18, nan, nan, nan, nan},
  {17, nan, nan, nan, nan},
  {16, nan, nan, nan, nan},
  {15, nan, nan, nan, nan},
  {14, nan, nan, nan, nan},
  {13, nan, nan, nan, nan},
  {12, nan, nan, nan, nan},
  {11, nan, nan, nan, nan},
  {10, nan, nan, nan, nan},
  {9, nan, nan, nan, nan},
  {8, nan, nan, nan, nan},
  {7,
   9.6326530612244916,
   11.238095238095241,
   3.1036515689143478,
   3.3523268393901033},
  {6,
   7.6666666666666679,
   9.2000000000000011,
   2.7688746209726918,
   3.0331501776206204},
  {5, 7.04, 8.8, 2.6532998322843198, 2.9664793948382653},
  {4, 8.75, 11.666666666666666, 2.9580398915498081, 3.415650255319866},
  {3, 2.6666666666666665, 4, 1.6329931618554521, 2},
  {2, 2.6666666666666665, 4, 1.6329931618554521, 2},
  {1, 4, 8, 2, 2.8284271247461903}
]
==

[name=analytic_stats_single_column_bounded_begin_numeric]
[required_features=ANALYTIC_FUNCTIONS,NUMERIC_TYPE]
SELECT row_id,
       VAR_POP(x) OVER w,
       VAR_SAMP(x) OVER w,
       STDDEV_POP(x) OVER w,
       STDDEV_SAMP(x) OVER w
FROM TestTable2
WINDOW w AS (ORDER BY row_id DESC RANGE BETWEEN 1 PRECEDING AND
                                                UNBOUNDED FOLLOWING)
--
ARRAY<STRUCT<row_id INT64, DOUBLE, DOUBLE, DOUBLE, DOUBLE>>[
  {20,
   0.064097222222222222,
   0.06992424242424243,
   0.25317429218272186,
   0.2644319239884671},
  {19,
   0.064097222222222222,
   0.06992424242424243,
   0.25317429218272186,
   0.2644319239884671},
  {18,
   0.064097222222222222,
   0.06992424242424243,
   0.25317429218272186,
   0.2644319239884671},
  {17,
   0.069586776859504137,
   0.076545454545454542,
   0.26379305688267107,
   0.27666849214439748},
  {12,
   0.075061728395061728,
   0.084444444444444447,
   0.27397395568751004,
   0.29059326290271159},
  {11,
   0.075061728395061728,
   0.084444444444444447,
   0.27397395568751004,
   0.29059326290271159},
  {10,
   0.08359375,
   0.095535714285714279,
   0.28912583765550942,
   0.30908852176312579},
  {7,
   0.094722222222222222,
   0.11366666666666667,
   0.30776975521032313,
   0.33714487489307421},
  {6,
   0.094722222222222222,
   0.11366666666666667,
   0.30776975521032313,
   0.33714487489307421},
  {5, 0.0896, 0.112, 0.29933259094191533, 0.33466401061363021},
  {4, 0.111875, 0.14916666666666667, 0.33447720400649128, 0.38622100754188227},
  {3, 0.026666666666666668, 0.04, 0.16329931618554522, 0.2},
  {2, 0.026666666666666668, 0.04, 0.16329931618554522, 0.2},
  {1, 0.04, 0.08, 0.2, 0.282842712474619}
]
==

[name=analytic_stats_double_column_bounded_begin]
SELECT row_id,
       COVAR_POP(y,x) OVER w,
       COVAR_SAMP(y,x) OVER w,
       CORR(y,x) OVER w
FROM TestTable
WINDOW w AS (ORDER BY row_id DESC RANGE BETWEEN 1 PRECEDING AND
                                                UNBOUNDED FOLLOWING)
--
ARRAY<STRUCT<row_id INT64, DOUBLE, DOUBLE, DOUBLE>>[
  {20, nan, nan, nan},
  {19, nan, nan, nan},
  {18, nan, nan, nan},
  {17, nan, nan, nan},
  {16, nan, nan, nan},
  {15, nan, nan, nan},
  {14, nan, nan, nan},
  {13, nan, nan, nan},
  {12, nan, nan, nan},
  {11, nan, nan, nan},
  {10, nan, nan, nan},
  {9, nan, nan, nan},
  {8, nan, nan, nan},
  {7, nan, nan, nan},
  {6, 1.6, 2, 0.7453559924999299},
  {5, 1.625, 2.1666666666666665, 0.7543365091413573},
  {4, 1.3333333333333333, 2, 0.65465367070797709},
  {3, 1.3333333333333333, 2, 0.65465367070797709},
  {2, 1.3333333333333333, 2, 0.65465367070797709},
  {1, 2, 4, 1}
]
==

[name=analytic_stats_double_column_bounded_begin_numeric]
[required_features=ANALYTIC_FUNCTIONS,NUMERIC_TYPE]
SELECT row_id,
       COVAR_POP(y,x) OVER w,
       COVAR_SAMP(y,x) OVER w,
       CORR(y,x) OVER w
FROM TestTable2
WINDOW w AS (ORDER BY row_id DESC RANGE BETWEEN 1 PRECEDING AND
                                                UNBOUNDED FOLLOWING)
--
ARRAY<STRUCT<row_id INT64, DOUBLE, DOUBLE, DOUBLE>>[
  {20, 0.014545454545454545, 0.016, 0.69156407480812454},
  {19, 0.014545454545454545, 0.016, 0.69156407480812454},
  {18, 0.014545454545454545, 0.016, 0.69156407480812454},
  {17, 0.016, 0.017777777777777778, 0.7453559924999299},
  {12, 0.015, 0.017142857142857144, 0.70710678118654746},
  {11, 0.015, 0.017142857142857144, 0.70710678118654746},
  {10, 0.017142857142857144, 0.02, 0.7977240352174656},
  {7, 0.016, 0.02, 0.7453559924999299},
  {6, 0.016, 0.02, 0.7453559924999299},
  {5, 0.01625, 0.021666666666666667, 0.7543365091413573},
  {4, 0.013333333333333334, 0.02, 0.6546536707079772},
  {3, 0.013333333333333334, 0.02, 0.6546536707079772},
  {2, 0.013333333333333334, 0.02, 0.6546536707079772},
  {1, 0.02, 0.04, 1}
]
==

[name=analytic_stats_single_column_bounded_end]
SELECT row_id,
       VAR_POP(x) OVER w,
       VAR_SAMP(x) OVER w,
       STDDEV_POP(x) OVER w,
       STDDEV_SAMP(x) OVER w
FROM TestTable
WINDOW w AS (ORDER BY row_id RANGE BETWEEN UNBOUNDED PRECEDING AND
                                           1 FOLLOWING)
--
ARRAY<STRUCT<row_id INT64, DOUBLE, DOUBLE, DOUBLE, DOUBLE>>[
  {1, 4, 8, 2, 2.8284271247461903},
  {2, 2.666666666666667, 4, 1.6329931618554521, 2},
  {3, 2.666666666666667, 4, 1.6329931618554521, 2},
  {4, 8.75, 11.666666666666666, 2.9580398915498081, 3.415650255319866},
  {5, 7.04, 8.8, 2.6532998322843198, 2.9664793948382653},
  {6, 7.6666666666666661, 9.2, 2.7688746209726913, 3.03315017762062},
  {7,
   9.63265306122449,
   11.238095238095239,
   3.1036515689143473,
   3.3523268393901033},
  {8, nan, nan, nan, nan},
  {9, nan, nan, nan, nan},
  {10, nan, nan, nan, nan},
  {11, nan, nan, nan, nan},
  {12, nan, nan, nan, nan},
  {13, nan, nan, nan, nan},
  {14, nan, nan, nan, nan},
  {15, nan, nan, nan, nan},
  {16, nan, nan, nan, nan},
  {17, nan, nan, nan, nan},
  {18, nan, nan, nan, nan},
  {19, nan, nan, nan, nan},
  {20, nan, nan, nan, nan}
]
==

[name=analytic_stats_single_column_bounded_end_numeric]
[required_features=ANALYTIC_FUNCTIONS,NUMERIC_TYPE]
SELECT row_id,
       VAR_POP(x) OVER w,
       VAR_SAMP(x) OVER w,
       STDDEV_POP(x) OVER w,
       STDDEV_SAMP(x) OVER w
FROM TestTable2
WINDOW w AS (ORDER BY row_id RANGE BETWEEN UNBOUNDED PRECEDING AND
                                           1 FOLLOWING)
--
ARRAY<STRUCT<row_id INT64, DOUBLE, DOUBLE, DOUBLE, DOUBLE>>[
  {1, 0.04, 0.08, 0.2, 0.282842712474619},
  {2, 0.026666666666666668, 0.04, 0.16329931618554522, 0.2},
  {3, 0.026666666666666668, 0.04, 0.16329931618554522, 0.2},
  {4, 0.111875, 0.14916666666666667, 0.33447720400649128, 0.38622100754188227},
  {5, 0.0896, 0.112, 0.29933259094191533, 0.33466401061363021},
  {6,
   0.094722222222222222,
   0.11366666666666667,
   0.30776975521032313,
   0.33714487489307421},
  {7,
   0.094722222222222222,
   0.11366666666666667,
   0.30776975521032313,
   0.33714487489307421},
  {10,
   0.08359375,
   0.095535714285714279,
   0.28912583765550942,
   0.30908852176312579},
  {11,
   0.075061728395061728,
   0.084444444444444447,
   0.27397395568751004,
   0.29059326290271159},
  {12,
   0.075061728395061728,
   0.084444444444444447,
   0.27397395568751004,
   0.29059326290271159},
  {17,
   0.069586776859504137,
   0.076545454545454542,
   0.26379305688267107,
   0.27666849214439748},
  {18,
   0.064097222222222222,
   0.06992424242424243,
   0.25317429218272186,
   0.2644319239884671},
  {19,
   0.064097222222222222,
   0.06992424242424243,
   0.25317429218272186,
   0.2644319239884671},
  {20,
   0.064097222222222222,
   0.06992424242424243,
   0.25317429218272186,
   0.2644319239884671}
]
==

[name=analytic_stats_double_column_bounded_end]
SELECT row_id,
       COVAR_POP(y,x) OVER w,
       COVAR_SAMP(y,x) OVER w,
       CORR(y,x) OVER w
FROM TestTable
WINDOW w AS (ORDER BY row_id RANGE BETWEEN UNBOUNDED PRECEDING AND
                                           1 FOLLOWING)
--
ARRAY<STRUCT<row_id INT64, DOUBLE, DOUBLE, DOUBLE>>[
  {1, 2, 4, 1},
  {2, 1.3333333333333333, 2, 0.65465367070797709},
  {3, 1.3333333333333333, 2, 0.65465367070797709},
  {4, 1.3333333333333333, 2, 0.65465367070797709},
  {5, 1.625, 2.1666666666666665, 0.7543365091413573},
  {6, 1.6, 2, 0.7453559924999299},
  {7, nan, nan, nan},
  {8, nan, nan, nan},
  {9, nan, nan, nan},
  {10, nan, nan, nan},
  {11, nan, nan, nan},
  {12, nan, nan, nan},
  {13, nan, nan, nan},
  {14, nan, nan, nan},
  {15, nan, nan, nan},
  {16, nan, nan, nan},
  {17, nan, nan, nan},
  {18, nan, nan, nan},
  {19, nan, nan, nan},
  {20, nan, nan, nan}
]
==

[name=analytic_stats_double_column_bounded_end_numeric]
[required_features=ANALYTIC_FUNCTIONS,NUMERIC_TYPE]
SELECT row_id,
       COVAR_POP(y,x) OVER w,
       COVAR_SAMP(y,x) OVER w,
       CORR(y,x) OVER w
FROM TestTable2
WINDOW w AS (ORDER BY row_id RANGE BETWEEN UNBOUNDED PRECEDING AND
                                           1 FOLLOWING)
--
ARRAY<STRUCT<row_id INT64, DOUBLE, DOUBLE, DOUBLE>>[
  {1, 0.02, 0.04, 1},
  {2, 0.013333333333333334, 0.02, 0.6546536707079772},
  {3, 0.013333333333333334, 0.02, 0.6546536707079772},
  {4, 0.013333333333333334, 0.02, 0.6546536707079772},
  {5, 0.01625, 0.021666666666666667, 0.7543365091413573},
  {6, 0.016, 0.02, 0.7453559924999299},
  {7, 0.016, 0.02, 0.7453559924999299},
  {10, 0.017142857142857144, 0.02, 0.7977240352174656},
  {11, 0.015, 0.017142857142857144, 0.70710678118654746},
  {12, 0.015, 0.017142857142857144, 0.70710678118654746},
  {17, 0.016, 0.017777777777777778, 0.7453559924999299},
  {18, 0.014545454545454545, 0.016, 0.69156407480812454},
  {19, 0.014545454545454545, 0.016, 0.69156407480812454},
  {20, 0.014545454545454545, 0.016, 0.69156407480812454}
]
==

[name=analytic_stats_precision_1]
[labels=analytic_stat_precision]
select row_id, val,
       var_pop(val) over w,
       var_samp(val) over w,
       stddev_pop(val) over w,
       stddev_samp(val) over w
FROM (SELECT 4.0 row_id, 10.0 val UNION ALL
      SELECT 1.0, NULL          UNION ALL
      SELECT 2.0, NULL          UNION ALL
      SELECT 6.0, NULL          UNION ALL
      SELECT 7.0, NULL          UNION ALL
      SELECT 1.0, NULL          UNION ALL
      SELECT 8.0, 1000.0          UNION ALL
      SELECT 3.0, NULL          UNION ALL
      SELECT 9.0, NULL          UNION ALL
      SELECT 3.0, 1.0            UNION ALL
      SELECT 6.0, 100.0          UNION ALL
      SELECT 4.0, NULL          UNION ALL
      SELECT 4.0, 10.0          UNION ALL
      SELECT 7.0, NULL          UNION ALL
      SELECT 4.0, 10.0        UNION ALL
      SELECT 5.0, NULL)
WINDOW w AS (order by row_id
             RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)
order by row_id, val
--
ARRAY<STRUCT<row_id DOUBLE, val DOUBLE, DOUBLE, DOUBLE, DOUBLE, DOUBLE>>[
  {1, NULL, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {1, NULL, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {2, NULL, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {3, NULL, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {3, 1, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {4, NULL, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {4, 10, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {4, 10, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {4, 10, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {5, NULL, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {6, NULL, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {6, 100, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {7, NULL, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {7, NULL, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {8, 1000, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {9, NULL, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244}
]
==

[name=analytic_stats_precision_numeric_1]
[required_features=ANALYTIC_FUNCTIONS,NUMERIC_TYPE]
[labels=analytic_stat_precision]
select row_id, val,
       var_pop(val) over w,
       var_samp(val) over w,
       stddev_pop(val) over w,
       stddev_samp(val) over w
FROM (SELECT 4.0 row_id, NUMERIC '10.0' val        UNION ALL
      SELECT 1.0,        NULL                      UNION ALL
      SELECT 2.0,        NULL                      UNION ALL
      SELECT 6.0,        NULL                      UNION ALL
      SELECT 7.0,        NULL                      UNION ALL
      SELECT 1.0,        NULL                      UNION ALL
      SELECT 8.0,        NUMERIC '1000.0'          UNION ALL
      SELECT 3.0,        NULL                      UNION ALL
      SELECT 9.0,        NULL                      UNION ALL
      SELECT 3.0,        NUMERIC '1.0'             UNION ALL
      SELECT 6.0,        NUMERIC '100.0'           UNION ALL
      SELECT 4.0,        NULL                      UNION ALL
      SELECT 4.0,        NUMERIC '10.0'            UNION ALL
      SELECT 7.0,        NULL                      UNION ALL
      SELECT 4.0,        NUMERIC '10.0'            UNION ALL
      SELECT 5.0,        NULL)
WINDOW w AS (order by row_id
             RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)
order by row_id, val
--
ARRAY<STRUCT<row_id DOUBLE, val NUMERIC, DOUBLE, DOUBLE, DOUBLE, DOUBLE>>[
  {1, NULL, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {1, NULL, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {2, NULL, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {3, NULL, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {3, 1, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {4, NULL, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {4, 10, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {4, 10, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {4, 10, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {5, NULL, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {6, NULL, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {6, 100, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {7, NULL, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {7, NULL, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {8, 1000, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {9, NULL, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244}
]
==

[name=analytic_stats_precision_2]
[labels=analytic_stat_precision]
select row_id, val,
       var_pop(val) over w,
       var_samp(val) over w,
       stddev_pop(val) over w,
       stddev_samp(val) over w
FROM (SELECT 4.0 row_id, 10.0 val UNION ALL
      SELECT 1.0, NULL          UNION ALL
      SELECT 2.0, NULL          UNION ALL
      SELECT 6.0, NULL          UNION ALL
      SELECT 7.0, NULL          UNION ALL
      SELECT 1.0, NULL          UNION ALL
      SELECT 8.0, 1000.0          UNION ALL
      SELECT 3.0, NULL          UNION ALL
      SELECT 9.0, NULL          UNION ALL
      SELECT 3.0, 1.0            UNION ALL
      SELECT 6.0, 100.0          UNION ALL
      SELECT 4.0, NULL          UNION ALL
      SELECT 4.0, 10.0          UNION ALL
      SELECT 7.0, NULL          UNION ALL
      SELECT 4.0, 10.0        UNION ALL
      SELECT 5.0, NULL)
WINDOW w AS (order by row_id
                   RANGE BETWEEN 10 PRECEDING AND 10 FOLLOWING)
order by row_id, val
--
ARRAY<STRUCT<row_id DOUBLE, val DOUBLE, DOUBLE, DOUBLE, DOUBLE, DOUBLE>>[
  {1, NULL, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {1, NULL, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {2, NULL, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {3, NULL, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {3, 1, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {4, NULL, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {4, 10, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {4, 10, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {4, 10, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {5, NULL, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {6, NULL, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {6, 100, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {7, NULL, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {7, NULL, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {8, 1000, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {9, NULL, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244}
]
==

[name=analytic_stats_precision_numeric_2]
[required_features=ANALYTIC_FUNCTIONS,NUMERIC_TYPE]
[labels=analytic_stat_precision]
select row_id, val,
       var_pop(val) over w,
       var_samp(val) over w,
       stddev_pop(val) over w,
       stddev_samp(val) over w
FROM (SELECT 4.0 row_id, NUMERIC '10.0' val        UNION ALL
      SELECT 1.0,        NULL                      UNION ALL
      SELECT 2.0,        NULL                      UNION ALL
      SELECT 6.0,        NULL                      UNION ALL
      SELECT 7.0,        NULL                      UNION ALL
      SELECT 1.0,        NULL                      UNION ALL
      SELECT 8.0,        NUMERIC '1000.0'          UNION ALL
      SELECT 3.0,        NULL                      UNION ALL
      SELECT 9.0,        NULL                      UNION ALL
      SELECT 3.0,        NUMERIC '1.0'             UNION ALL
      SELECT 6.0,        NUMERIC '100.0'           UNION ALL
      SELECT 4.0,        NULL                      UNION ALL
      SELECT 4.0,        NUMERIC '10.0'            UNION ALL
      SELECT 7.0,        NULL                      UNION ALL
      SELECT 4.0,        NUMERIC '10.0'            UNION ALL
      SELECT 5.0,        NULL)
WINDOW w AS (order by row_id
                   RANGE BETWEEN 10 PRECEDING AND 10 FOLLOWING)
order by row_id, val
--
ARRAY<STRUCT<row_id DOUBLE, val NUMERIC, DOUBLE, DOUBLE, DOUBLE, DOUBLE>>[
  {1, NULL, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {1, NULL, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {2, NULL, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {3, NULL, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {3, 1, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {4, NULL, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {4, 10, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {4, 10, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {4, 10, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {5, NULL, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {6, NULL, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {6, 100, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {7, NULL, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {7, NULL, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {8, 1000, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244},
  {9, NULL, 132851.25, 159421.5, 364.48765411190544, 399.27622017846244}
]
==

[name=analytic_stats_precision_3]
[labels=analytic_stat_precision]
select row_id, val,
       avg(val) over w
FROM (SELECT 4.0 row_id, 100.0 val UNION ALL
      SELECT 1.0, NULL          UNION ALL
      SELECT 2.0, NULL          UNION ALL
      SELECT 6.0, NULL          UNION ALL
      SELECT 7.0, NULL          UNION ALL
      SELECT 1.0, NULL          UNION ALL
      SELECT 8.0, 1000000.0          UNION ALL
      SELECT 3.0, NULL          UNION ALL
      SELECT 9.0, NULL          UNION ALL
      SELECT 3.0, 1.0            UNION ALL
      SELECT 6.0, 10000.0          UNION ALL
      SELECT 4.0, NULL          UNION ALL
      SELECT 4.0, 100.0          UNION ALL
      SELECT 7.0, NULL          UNION ALL
      SELECT 4.0, 100.0        UNION ALL
      SELECT 5.0, NULL)
WINDOW w AS (order by row_id
                   RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)
order by row_id, val
--
ARRAY<STRUCT<row_id DOUBLE, val DOUBLE, DOUBLE>>[
  {1, NULL, 168383.50000000003},
  {1, NULL, 168383.50000000003},
  {2, NULL, 168383.50000000003},
  {3, NULL, 168383.50000000003},
  {3, 1, 168383.50000000003},
  {4, NULL, 168383.50000000003},
  {4, 100, 168383.50000000003},
  {4, 100, 168383.50000000003},
  {4, 100, 168383.50000000003},
  {5, NULL, 168383.50000000003},
  {6, NULL, 168383.50000000003},
  {6, 10000, 168383.50000000003},
  {7, NULL, 168383.50000000003},
  {7, NULL, 168383.50000000003},
  {8, 1000000, 168383.50000000003},
  {9, NULL, 168383.50000000003}
]
==

[name=analytic_stats_precision_4]
[labels=analytic_stat_precision]
select row_id, val,
       avg(val) over w
FROM (SELECT 4.0 row_id, 100.0 val UNION ALL
      SELECT 1.0, NULL          UNION ALL
      SELECT 2.0, NULL          UNION ALL
      SELECT 6.0, NULL          UNION ALL
      SELECT 7.0, NULL          UNION ALL
      SELECT 1.0, NULL          UNION ALL
      SELECT 8.0, 1000000.0          UNION ALL
      SELECT 3.0, NULL          UNION ALL
      SELECT 9.0, NULL          UNION ALL
      SELECT 3.0, 1.0            UNION ALL
      SELECT 6.0, 10000.0          UNION ALL
      SELECT 4.0, NULL          UNION ALL
      SELECT 4.0, 100.0          UNION ALL
      SELECT 7.0, NULL          UNION ALL
      SELECT 4.0, 100.0        UNION ALL
      SELECT 5.0, NULL)
WINDOW w AS (order by row_id
                   RANGE BETWEEN 10 PRECEDING AND 10 FOLLOWING)
order by row_id, val
--
ARRAY<STRUCT<row_id DOUBLE, val DOUBLE, DOUBLE>>[
  {1, NULL, 168383.50000000003},
  {1, NULL, 168383.50000000003},
  {2, NULL, 168383.50000000003},
  {3, NULL, 168383.50000000003},
  {3, 1, 168383.50000000003},
  {4, NULL, 168383.50000000003},
  {4, 100, 168383.50000000003},
  {4, 100, 168383.50000000003},
  {4, 100, 168383.50000000003},
  {5, NULL, 168383.50000000003},
  {6, NULL, 168383.50000000003},
  {6, 10000, 168383.50000000003},
  {7, NULL, 168383.50000000003},
  {7, NULL, 168383.50000000003},
  {8, 1000000, 168383.50000000003},
  {9, NULL, 168383.50000000003}
]
==

[name=analytic_stats_single_column_default_window]
[labels=analytic_stat_single_column]
select a,
       VAR_POP(a)     OVER (),
       VAR_SAMP(a)    OVER (),
       VARIANCE(a)    OVER (),
       STDDEV_POP(a)  OVER (),
       STDDEV_SAMP(a) OVER (),
       STDDEV(a)      OVER ()
FROM (
  select 1 a union all
  select 2 union all
  select 3 union all
  select 4 union all
  select 3 union all
  select 1 union all
  select 0)
--
ARRAY<STRUCT<a INT64, DOUBLE, DOUBLE, DOUBLE, DOUBLE, DOUBLE, DOUBLE>>[
  {2,
   1.7142857142857144,
   2.0000000000000004,
   2.0000000000000004,
   1.3093073414159544,
   1.4142135623730951,
   1.4142135623730951},
  {4,
   1.7142857142857144,
   2.0000000000000004,
   2.0000000000000004,
   1.3093073414159544,
   1.4142135623730951,
   1.4142135623730951},
  {1,
   1.7142857142857144,
   2.0000000000000004,
   2.0000000000000004,
   1.3093073414159544,
   1.4142135623730951,
   1.4142135623730951},
  {1,
   1.7142857142857144,
   2.0000000000000004,
   2.0000000000000004,
   1.3093073414159544,
   1.4142135623730951,
   1.4142135623730951},
  {3,
   1.7142857142857144,
   2.0000000000000004,
   2.0000000000000004,
   1.3093073414159544,
   1.4142135623730951,
   1.4142135623730951},
  {3,
   1.7142857142857144,
   2.0000000000000004,
   2.0000000000000004,
   1.3093073414159544,
   1.4142135623730951,
   1.4142135623730951},
  {0,
   1.7142857142857144,
   2.0000000000000004,
   2.0000000000000004,
   1.3093073414159544,
   1.4142135623730951,
   1.4142135623730951}
]
==

# Same as previous query, with explicit ROWS and RANGE window frame.
[name=analytic_stats_single_column_unbounded]
[labels=analytic_stat_single_column]
select a,
       VAR_POP(a)     OVER (RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING),
       VAR_SAMP(a)    OVER (ROWS  BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING),
       VARIANCE(a)    OVER (RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING),
       STDDEV_POP(a)  OVER (ROWS  BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING),
       STDDEV_SAMP(a) OVER (RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING),
       STDDEV(a)      OVER (ROWS  BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)
FROM (
  select 1 a union all
  select 2 union all
  select 3 union all
  select 4 union all
  select 3 union all
  select 1 union all
  select 0)
--
ARRAY<STRUCT<a INT64, DOUBLE, DOUBLE, DOUBLE, DOUBLE, DOUBLE, DOUBLE>>[
  {2,
   1.7142857142857144,
   2.0000000000000004,
   2.0000000000000004,
   1.3093073414159544,
   1.4142135623730951,
   1.4142135623730951},
  {4,
   1.7142857142857144,
   2.0000000000000004,
   2.0000000000000004,
   1.3093073414159544,
   1.4142135623730951,
   1.4142135623730951},
  {1,
   1.7142857142857144,
   2.0000000000000004,
   2.0000000000000004,
   1.3093073414159544,
   1.4142135623730951,
   1.4142135623730951},
  {1,
   1.7142857142857144,
   2.0000000000000004,
   2.0000000000000004,
   1.3093073414159544,
   1.4142135623730951,
   1.4142135623730951},
  {3,
   1.7142857142857144,
   2.0000000000000004,
   2.0000000000000004,
   1.3093073414159544,
   1.4142135623730951,
   1.4142135623730951},
  {3,
   1.7142857142857144,
   2.0000000000000004,
   2.0000000000000004,
   1.3093073414159544,
   1.4142135623730951,
   1.4142135623730951},
  {0,
   1.7142857142857144,
   2.0000000000000004,
   2.0000000000000004,
   1.3093073414159544,
   1.4142135623730951,
   1.4142135623730951}
]
==

# VAR_POP is generally the same as SUM^2 / COUNT - (SUM / COUNT)^2. Compare other stat functions
# with VAR_POP
[name=analytic_stats_single_column_comparing_result]
[labels=analytic_stat_single_column]
select a,
       sum(a * a) OVER () / count(a) over () - POW(sum(a) OVER () / count(a) over (), 2)
           as var,
       VAR_POP(a)     OVER (),
       VAR_SAMP(a)    OVER (),
       VARIANCE(a)    OVER (),
       STDDEV_POP(a)  OVER (),
       STDDEV_SAMP(a) OVER (),
       STDDEV(a)      OVER ()
FROM (
  select 1 a union all
  select 2 union all
  select 3 union all
  select 4 union all
  select 3 union all
  select 1 union all
  select 0)
--
ARRAY<STRUCT<a INT64, var DOUBLE, DOUBLE, DOUBLE, DOUBLE, DOUBLE, DOUBLE, DOUBLE>>[
  {4,
   1.7142857142857144,
   1.7142857142857144,
   2.0000000000000004,
   2.0000000000000004,
   1.3093073414159544,
   1.4142135623730951,
   1.4142135623730951},
  {1,
   1.7142857142857144,
   1.7142857142857144,
   2.0000000000000004,
   2.0000000000000004,
   1.3093073414159544,
   1.4142135623730951,
   1.4142135623730951},
  {3,
   1.7142857142857144,
   1.7142857142857144,
   2.0000000000000004,
   2.0000000000000004,
   1.3093073414159544,
   1.4142135623730951,
   1.4142135623730951},
  {2,
   1.7142857142857144,
   1.7142857142857144,
   2.0000000000000004,
   2.0000000000000004,
   1.3093073414159544,
   1.4142135623730951,
   1.4142135623730951},
  {1,
   1.7142857142857144,
   1.7142857142857144,
   2.0000000000000004,
   2.0000000000000004,
   1.3093073414159544,
   1.4142135623730951,
   1.4142135623730951},
  {3,
   1.7142857142857144,
   1.7142857142857144,
   2.0000000000000004,
   2.0000000000000004,
   1.3093073414159544,
   1.4142135623730951,
   1.4142135623730951},
  {0,
   1.7142857142857144,
   1.7142857142857144,
   2.0000000000000004,
   2.0000000000000004,
   1.3093073414159544,
   1.4142135623730951,
   1.4142135623730951}
]
==

# stat functions over INT32 values.
[name=analytic_stats_single_column_int32]
[labels=analytic_stat_single_column]
select row_id, val,
       sum(val * val) OVER (partition by row_id) / count(val) over (partition by row_id) -
         POW(sum(val) OVER (partition by row_id) / count(val) over (partition by row_id), 2)
         as var_pop,
         VAR_POP(val)     OVER (partition by row_id),
         VAR_SAMP(val)    OVER (partition by row_id),
         VARIANCE(val)    OVER (partition by row_id),
         STDDEV_POP(val)  OVER (partition by row_id),
         STDDEV_SAMP(val) OVER (partition by row_id),
         STDDEV(val)      OVER (partition by row_id)
FROM (SELECT 3 row_id, cast(30 as int32) val UNION ALL
      SELECT 1, NULL                         UNION ALL
      SELECT 2, 20                           UNION ALL
      SELECT 3, 32                           UNION ALL
      SELECT 1, NULL                         UNION ALL
      SELECT 2, NULL                         UNION ALL
      SELECT 4, 40                           UNION ALL
      SELECT 3, 36                           UNION ALL
      SELECT 3, 34                           UNION ALL
      SELECT 4, -40)
ORDER BY 1, 2
--
ARRAY<STRUCT<row_id INT64,
             val INT32,
             var_pop DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE>>
[{1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
 {1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
 {2, NULL, 0, 0, NULL, NULL, 0, NULL, NULL},
 {2, 20, 0, 0, NULL, NULL, 0, NULL, NULL},
 {3,
  30,
  5,
  5.0000000000000018,
  6.6666666666666687,
  6.6666666666666687,
  2.2360679774997902,
  2.5819888974716116,
  2.5819888974716116},
 {3,
  32,
  5,
  5.0000000000000018,
  6.6666666666666687,
  6.6666666666666687,
  2.2360679774997902,
  2.5819888974716116,
  2.5819888974716116},
 {3,
  34,
  5,
  5.0000000000000018,
  6.6666666666666687,
  6.6666666666666687,
  2.2360679774997902,
  2.5819888974716116,
  2.5819888974716116},
 {3,
  36,
  5,
  5.0000000000000018,
  6.6666666666666687,
  6.6666666666666687,
  2.2360679774997902,
  2.5819888974716116,
  2.5819888974716116},
 {4, -40, 1600, 1600, 3200, 3200, 40, 56.568542494923804, 56.568542494923804},
 {4, 40, 1600, 1600, 3200, 3200, 40, 56.568542494923804, 56.568542494923804}]
==

# stat functions over INT64 values.
[name=analytic_stats_single_column_int64]
[labels=analytic_stat_single_column]
select row_id, val,
       sum(val * val) OVER (partition by row_id) / count(val) over (partition by row_id) -
         POW(sum(val) OVER (partition by row_id) / count(val) over (partition by row_id), 2) as var,
       VAR_POP(val)     OVER (partition by row_id),
       VAR_SAMP(val)    OVER (partition by row_id),
       VARIANCE(val)    OVER (partition by row_id),
       STDDEV_POP(val)  OVER (partition by row_id),
       STDDEV_SAMP(val) OVER (partition by row_id),
       STDDEV(val)      OVER (partition by row_id)
FROM (SELECT 3 row_id, 30 val UNION ALL
      SELECT 1, NULL          UNION ALL
      SELECT 2, 20            UNION ALL
      SELECT 3, 32            UNION ALL
      SELECT 1, NULL          UNION ALL
      SELECT 2, NULL          UNION ALL
      SELECT 4, 40            UNION ALL
      SELECT 4, -40)
ORDER BY 1, 2
--
ARRAY<STRUCT<row_id INT64,
             val INT64,
             var DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE>>
[
  {1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {2, NULL, 0, 0, NULL, NULL, 0, NULL, NULL},
  {2, 20, 0, 0, NULL, NULL, 0, NULL, NULL},
  {3, 30, 1, 1, 2, 2, 1, 1.4142135623730951, 1.4142135623730951},
  {3, 32, 1, 1, 2, 2, 1, 1.4142135623730951, 1.4142135623730951},
  {4, -40, 1600, 1600, 3200, 3200, 40, 56.568542494923804, 56.568542494923804},
  {4, 40, 1600, 1600, 3200, 3200, 40, 56.568542494923804, 56.568542494923804}
]
==

# stat functions over UINT32 values.
[name=analytic_stats_single_column_uint32]
[labels=analytic_stat_single_column]
select row_id, val,
       sum(val * val) OVER (partition by row_id) / count(val) over (partition by row_id) -
         POW(sum(val) OVER (partition by row_id) / count(val) over (partition by row_id), 2) as var,
       VAR_POP(val)     OVER (partition by row_id),
       VAR_SAMP(val)    OVER (partition by row_id),
       VARIANCE(val)    OVER (partition by row_id),
       STDDEV_POP(val)  OVER (partition by row_id),
       STDDEV_SAMP(val) OVER (partition by row_id),
       STDDEV(val)      OVER (partition by row_id)
FROM (SELECT 3 row_id, cast(30 as uint32) val UNION ALL
      SELECT 1, NULL                          UNION ALL
      SELECT 2, 20                            UNION ALL
      SELECT 3, 32                            UNION ALL
      SELECT 1, NULL                          UNION ALL
      SELECT 2, NULL                          UNION ALL
      SELECT 4, 0                             UNION ALL
      SELECT 4, 0)
--
ARRAY<STRUCT<row_id INT64,
             val UINT32,
             var DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE>>
[
  {1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {2, NULL, 0, 0, NULL, NULL, 0, NULL, NULL},
  {2, 20, 0, 0, NULL, NULL, 0, NULL, NULL},
  {3, 32, 1, 1, 2, 2, 1, 1.4142135623730951, 1.4142135623730951},
  {3, 30, 1, 1, 2, 2, 1, 1.4142135623730951, 1.4142135623730951},
  {4, 0, 0, 0, 0, 0, 0, 0, 0},
  {4, 0, 0, 0, 0, 0, 0, 0, 0}
]
==

# stat functions over UINT64 values.
[name=analytic_stats_single_column_uint64]
[labels=analytic_stat_single_column]
select row_id, val,
       sum(val * val) OVER (partition by row_id) / count(val) over (partition by row_id) -
         POW(sum(val) OVER (partition by row_id) / count(val) over (partition by row_id), 2) as var,
       VAR_POP(val)     OVER (partition by row_id),
       VAR_SAMP(val)    OVER (partition by row_id),
       VARIANCE(val)    OVER (partition by row_id),
       STDDEV_POP(val)  OVER (partition by row_id),
       STDDEV_SAMP(val) OVER (partition by row_id),
       STDDEV(val)      OVER (partition by row_id)
FROM (SELECT 3 row_id, cast(30 as uint64) val UNION ALL
      SELECT 1, NULL                          UNION ALL
      SELECT 2, 20                            UNION ALL
      SELECT 3, 32                            UNION ALL
      SELECT 1, NULL                          UNION ALL
      SELECT 2, NULL                          UNION ALL
      SELECT 4, 0                             UNION ALL
      SELECT 4, 0)
--
ARRAY<STRUCT<row_id INT64,
             val UINT64,
             var DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE>>
[
  {1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {2, NULL, 0, 0, NULL, NULL, 0, NULL, NULL},
  {2, 20, 0, 0, NULL, NULL, 0, NULL, NULL},
  {3, 32, 1, 1, 2, 2, 1, 1.4142135623730951, 1.4142135623730951},
  {3, 30, 1, 1, 2, 2, 1, 1.4142135623730951, 1.4142135623730951},
  {4, 0, 0, 0, 0, 0, 0, 0, 0},
  {4, 0, 0, 0, 0, 0, 0, 0, 0}
]
==

# stat functions over FLOAT values.
[name=analytic_stats_single_column_float]
[labels=analytic_stat_single_column]
select row_id, val,
       sum(val * val) OVER (partition by row_id) / count(val) over (partition by row_id) -
         POW(sum(val) OVER (partition by row_id) / count(val) over (partition by row_id), 2) as var,
       VAR_POP(val)     OVER (partition by row_id),
       VAR_SAMP(val)    OVER (partition by row_id),
       VARIANCE(val)    OVER (partition by row_id),
       STDDEV_POP(val)  OVER (partition by row_id),
       STDDEV_SAMP(val) OVER (partition by row_id),
       STDDEV(val)      OVER (partition by row_id)
FROM (SELECT 3 row_id, cast(30 as float) val UNION ALL
      SELECT 1, NULL                         UNION ALL
      SELECT 2, 20                           UNION ALL
      SELECT 3, 32                           UNION ALL
      SELECT 1, NULL                         UNION ALL
      SELECT 2, NULL                         UNION ALL
      SELECT 4, -4                           UNION ALL
      SELECT 4, 4)
--
ARRAY<STRUCT<row_id INT64,
             val FLOAT,
             var DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE>>
[
  {1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {2, NULL, 0, 0, NULL, NULL, 0, NULL, NULL},
  {2, 20, 0, 0, NULL, NULL, 0, NULL, NULL},
  {3, 32, 1, 1, 2, 2, 1, 1.4142135623730951, 1.4142135623730951},
  {3, 30, 1, 1, 2, 2, 1, 1.4142135623730951, 1.4142135623730951},
  {4, 4, 16, 16, 32, 32, 4, 5.6568542494923806, 5.6568542494923806},
  {4, -4, 16, 16, 32, 32, 4, 5.6568542494923806, 5.6568542494923806}
]
==

# stat over DOUBLE values.
[name=analytic_stats_single_column_double]
[labels=analytic_stat_single_column]
select row_id, val,
       sum(val * val) OVER (partition by row_id) / count(val) over (partition by row_id) -
         POW(sum(val) OVER (partition by row_id) / count(val) over (partition by row_id), 2) as var,
       VAR_POP(val)     OVER (partition by row_id),
       VAR_SAMP(val)    OVER (partition by row_id),
       VARIANCE(val)    OVER (partition by row_id),
       STDDEV_POP(val)  OVER (partition by row_id),
       STDDEV_SAMP(val) OVER (partition by row_id),
       STDDEV(val)      OVER (partition by row_id)
FROM (SELECT 3 row_id, cast(30 as double) val UNION ALL
      SELECT 1, NULL                          UNION ALL
      SELECT 2, 20                            UNION ALL
      SELECT 3, 32                            UNION ALL
      SELECT 1, NULL                          UNION ALL
      SELECT 2, NULL                          UNION ALL
      SELECT 4, -4                            UNION ALL
      SELECT 4, 4)
--
ARRAY<STRUCT<row_id INT64,
             val DOUBLE,
             var DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE>>
[
  {1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {2, NULL, 0, 0, NULL, NULL, 0, NULL, NULL},
  {2, 20, 0, 0, NULL, NULL, 0, NULL, NULL},
  {3, 32, 1, 1, 2, 2, 1, 1.4142135623730951, 1.4142135623730951},
  {3, 30, 1, 1, 2, 2, 1, 1.4142135623730951, 1.4142135623730951},
  {4, 4, 16, 16, 32, 32, 4, 5.6568542494923806, 5.6568542494923806},
  {4, -4, 16, 16, 32, 32, 4, 5.6568542494923806, 5.6568542494923806}
]
==

# stat over NUMERIC values.
[name=analytic_stats_single_column_numeric]
[required_features=ANALYTIC_FUNCTIONS,NUMERIC_TYPE]
[labels=analytic_stat_single_column]
select row_id, val,
       sum(val * val) OVER (partition by row_id) / count(val) over (partition by row_id) -
         POW(sum(val) OVER (partition by row_id) / count(val) over (partition by row_id), 2) as var,
       VAR_POP(val)     OVER (partition by row_id),
       VAR_SAMP(val)    OVER (partition by row_id),
       VARIANCE(val)    OVER (partition by row_id),
       STDDEV_POP(val)  OVER (partition by row_id),
       STDDEV_SAMP(val) OVER (partition by row_id),
       STDDEV(val)      OVER (partition by row_id)
FROM (SELECT 3 row_id, NUMERIC '30' val UNION ALL
      SELECT 1,        NULL             UNION ALL
      SELECT 2,        NUMERIC '20'     UNION ALL
      SELECT 3,        NUMERIC '32'     UNION ALL
      SELECT 1,        NULL             UNION ALL
      SELECT 2,        NULL             UNION ALL
      SELECT 4,        NUMERIC '-4'     UNION ALL
      SELECT 4,        NUMERIC '4')
--
ARRAY<STRUCT<row_id INT64,
             val NUMERIC,
             var NUMERIC,
             DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE>>
[
  {1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {2, NULL, 0, 0, NULL, NULL, 0, NULL, NULL},
  {2, 20, 0, 0, NULL, NULL, 0, NULL, NULL},
  {3, 32, 1, 1, 2, 2, 1, 1.4142135623730951, 1.4142135623730951},
  {3, 30, 1, 1, 2, 2, 1, 1.4142135623730951, 1.4142135623730951},
  {4, 4, 16, 16, 32, 32, 4, 5.6568542494923806, 5.6568542494923806},
  {4, -4, 16, 16, 32, 32, 4, 5.6568542494923806, 5.6568542494923806}
]
==

[name=analytic_stats_single_column_rows_unbounded_current_row]
[labels=analytic_stat_single_column]
select a,
       var_pop(a) OVER order_window as var_pop_a
FROM (
  select 1 a union all
  select 2 union all
  select 3 union all
  select 4 union all
  select 3 union all
  select 1)
WINDOW order_window AS (ORDER BY a ASC
                        ROWS BETWEEN UNBOUNDED PRECEDING
                                 AND CURRENT ROW)
ORDER BY a, var_pop_a
--
ARRAY<STRUCT<a INT64, var_pop_a DOUBLE>>[
  {1, 0},
  {1, 0},
  {2, 0.22222222222222224},
  {3, 0.6875},
  {3, 0.8},
  {4, 1.2222222222222223}
]
==

# Cumulative var_samp with NULL last.
[name=analytic_stats_single_column_rows_unbounded_current_row_null]
[labels=analytic_stat_single_column]
select row_id, val,
       var_samp(val) over (order by row_id DESC
                      ROWS BETWEEN UNBOUNDED PRECEDING
                               AND CURRENT ROW)
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 4, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, 1},
  {2, 2, 1},
  {3, 3, 0.5},
  {4, 4, NULL}
]
==

# Cumulative stddev_pop with partition by.
[name=analytic_stats_single_column_rows_unbounded_current_row_partition]
[labels=analytic_stat_single_column]
select part_id, row_id, val,
       stddev_pop(val) over (partition by part_id order by row_id ASC
                      ROWS BETWEEN UNBOUNDED PRECEDING
                               AND CURRENT ROW)
FROM (SELECT 1 part_id, 3 row_id, 3 val UNION ALL
      SELECT 2, 1, NULL                 UNION ALL
      SELECT 1, 2, 2                    UNION ALL
      SELECT 2, 4, 40                   UNION ALL
      SELECT 2, 3, 30                   UNION ALL
      SELECT 1, 1, NULL                 UNION ALL
      SELECT 2, 2, 20                   UNION ALL
      SELECT 1, 4, 4)
order by part_id, row_id
--
ARRAY<STRUCT<part_id INT64, row_id INT64, val INT64, DOUBLE>>[
  {1, 1, NULL, NULL},
  {1, 2, 2, 0},
  {1, 3, 3, 0.5},
  {1, 4, 4, 0.816496580927726},
  {2, 1, NULL, NULL},
  {2, 2, 20, 0},
  {2, 3, 30, 5},
  {2, 4, 40, 8.16496580927726}
]
==

# Cumulative var_pop over all numeric types.
[name=analytic_stats_single_column_rows_unbounded_current_row_numeric]
[required_features=ANALYTIC_FUNCTIONS,NUMERIC_TYPE]
[labels=analytic_stat_single_column]
select row_id, val,
       var_pop(cast(val as INT32)) over window1,
       var_pop(cast(val as INT64)) over window1,
       var_pop(cast(val as UINT32)) over window1,
       var_pop(cast(val as UINT64)) over window1,
       var_pop(cast(val as FLOAT)) over window1,
       var_pop(cast(val as DOUBLE)) over window1,
       var_pop(cast(val as NUMERIC)) over window1
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 4, 4)
WINDOW window1 as (order by row_id
                   ROWS BETWEEN UNBOUNDED PRECEDING
                            AND CURRENT ROW)
order by row_id
--
ARRAY<STRUCT<row_id INT64,
             val INT64,
             DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE>>
[{1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
 {2, 2, 0, 0, 0, 0, 0, 0, 0},
 {3, 3, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25},
 {4,
  4,
  0.66666666666666663,
  0.66666666666666663,
  0.66666666666666663,
  0.66666666666666663,
  0.66666666666666663,
  0.66666666666666663,
  0.66666666666666663}]
==

# Grand total stddev_samp.
[name=analytic_stats_single_column_rows_unbounded_current_row_stddev_samp]
[labels=analytic_stat_single_column]
select row_id, val,
       stddev_samp(val) over ()
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 4, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, 1},
  {2, 2, 1},
  {3, 3, 1},
  {4, 4, 1}
]
==

# Grand total var_samp per partition.
[name=analytic_stats_single_column_rows_unbounded_current_row_var_samp]
[labels=analytic_stat_single_column]
select row_id, val,
       var_samp(val) over (partition by row_id)
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 4, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, NULL},
  {2, 2, NULL},
  {3, 3, NULL},
  {4, 4, NULL}
]
==

[name=analytic_stats_single_column_rows_unbounded_current_row_params]
[labels=analytic_stat_single_column]
[parameters=1.79769e+308 as double_max]
select row_id, val,
       stddev_pop(val) over (order by row_id
                      rows between unbounded preceding and
                                   current row)
FROM (SELECT 3 row_id, @double_max val UNION ALL
      SELECT 1, NULL                   UNION ALL
      SELECT 2, @double_max/2          UNION ALL
      SELECT 4, 4)
order by row_id
--
ERROR: generic::out_of_range: double overflow: 4.49423e+307 * 8.98845e+307
==

[name=analytic_stats_single_column_rows_unbounded_current_row_params_2]
[labels=analytic_stat_single_column]
[parameters=-1.79769e+308 as double_min]
select row_id, val,
       stddev_samp(val) over (order by row_id
                      rows between unbounded preceding and
                                   unbounded following)
FROM (SELECT 3 row_id, @double_min val UNION ALL
      SELECT 1, NULL                   UNION ALL
      SELECT 2, @double_min/2          UNION ALL
      SELECT 4, 4)
order by row_id
--
ERROR: generic::out_of_range: double overflow: -4.49423e+307 * -8.98845e+307
==

[name=analytic_stats_single_column_rows_offset_preceding_current_row]
[labels=analytic_stat_single_column]
select row_id, val,
       var_pop(val) over (order by row_id ROWS BETWEEN 1 PRECEDING
                                               AND CURRENT ROW)
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 4, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, NULL},
  {2, 2, 0},
  {3, 3, 0.25},
  {4, 4, 0.25}
]
==

[name=analytic_stats_single_column_rows_unbounded_offset_preceding]
[labels=analytic_stat_single_column]
select row_id, val,
       var_samp(val) over (order by row_id ROWS BETWEEN UNBOUNDED PRECEDING
                                               AND 1 PRECEDING)
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 4, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, NULL},
  {2, 2, NULL},
  {3, 3, NULL},
  {4, 4, 0.5}
]
==

[name=analytic_stats_single_column_rows_unbounded_offset_following]
[labels=analytic_stat_single_column]
select row_id, val,
       stddev_pop(val) over (order by row_id ROWS BETWEEN UNBOUNDED PRECEDING
                                               AND 1 FOLLOWING)
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 4, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, 0},
  {2, 2, 0.5},
  {3, 3, 0.816496580927726},
  {4, 4, 0.816496580927726}
]
==

[name=analytic_stats_single_column_rows_offset_preceding_offset_preceding]
[labels=analytic_stat_single_column]
select row_id, val,
       stddev_samp(val) over (order by row_id ROWS BETWEEN 2 PRECEDING
                                               AND 1 PRECEDING)
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 4, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, NULL},
  {2, 2, NULL},
  {3, 3, NULL},
  {4, 4, 0.70710678118654757}
]
==

[name=analytic_stats_single_column_rows_offset_preceding_offset_following]
[labels=analytic_stat_single_column]
select row_id, val,
       var_pop(val) over (order by row_id ROWS BETWEEN 1 PRECEDING
                                               AND 1 FOLLOWING)
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 4, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, 0},
  {2, 2, 0.25},
  {3, 3, 0.66666666666666663},
  {4, 4, 0.25}
]
==

[name=analytic_stats_single_column_rows_offset_preceding_unbounded]
[labels=analytic_stat_single_column]
select row_id, val,
       var_samp(val) over (order by row_id ROWS BETWEEN 1 PRECEDING
                                               AND UNBOUNDED FOLLOWING)
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 4, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, 1},
  {2, 2, 1},
  {3, 3, 1},
  {4, 4, 0.5}
]
==

[name=analytic_stats_single_column_rows_current_row]
[labels=analytic_stat_single_column]
select row_id, val,
       stddev_pop(val) over (order by row_id
                      ROWS CURRENT ROW)
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 4, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, NULL},
  {2, 2, 0},
  {3, 3, 0},
  {4, 4, 0}
]
==

[name=analytic_stats_single_column_rows_current_row_offset_following]
[labels=analytic_stat_single_column]
select row_id, val,
       stddev_samp(val) over (order by row_id ROWS BETWEEN CURRENT ROW
                                               AND 1 FOLLOWING)
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 4, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, NULL},
  {2, 2, 0.70710678118654757},
  {3, 3, 0.70710678118654757},
  {4, 4, NULL}
]
==

[name=analytic_stats_single_column_rows_current_row_unbounded]
[labels=analytic_stat_single_column]
select row_id, val,
       var_pop(val) over (order by row_id ROWS BETWEEN CURRENT ROW
                                               AND UNBOUNDED FOLLOWING)
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 4, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, 0.66666666666666663},
  {2, 2, 0.66666666666666663},
  {3, 3, 0.25},
  {4, 4, 0}
]
==

[name=analytic_stats_single_column_rows_offset_following_offset_following]
[labels=analytic_stat_single_column]
select row_id, val,
       var_samp(val) over (order by row_id ROWS BETWEEN 1 FOLLOWING
                                               AND 2 FOLLOWING)
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 4, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, 0.5},
  {2, 2, 0.5},
  {3, 3, NULL},
  {4, 4, NULL}
]
==

[name=analytic_stats_single_column_rows_offset_following_unbounded]
[labels=analytic_stat_single_column]
select row_id, val,
       stddev_pop(val) over (order by row_id ROWS BETWEEN 1 FOLLOWING
                                               AND UNBOUNDED FOLLOWING)
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 4, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, 0.816496580927726},
  {2, 2, 0.5},
  {3, 3, 0},
  {4, 4, NULL}
]
==

# RANGE window frames are currently supported for cumulative var_pop.
[name=analytic_stats_single_column_range_unbounded]
[labels=analytic_stat_single_column]
select row_id, val,
       var_pop(val) over (order by row_id
                          RANGE UNBOUNDED PRECEDING)
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 4, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, NULL},
  {2, 2, 0},
  {3, 3, 0.25},
  {4, 4, 0.66666666666666663}
]
==

# Tests with various duplication of peer tuples (with the same ORDER BY value).
# All peers get the same cumulative var_samp value.
[name=analytic_stats_single_column_range_unbounded_current_row]
[labels=analytic_stat_single_column]
select row_id, val,
       var_samp(val) over (order by row_id
                           RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
FROM (SELECT 1 row_id, 1 val UNION ALL
      SELECT 1, 3            UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 1, 4            UNION ALL
      SELECT 1, 2            UNION ALL
      SELECT 1, 5)
order by row_id, val
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, 2.5},
  {1, 1, 2.5},
  {1, 2, 2.5},
  {1, 3, 2.5},
  {1, 4, 2.5},
  {1, 5, 2.5}
]
==

[name=analytic_stats_single_column_range_unbounded_current_row_2]
[labels=analytic_stat_single_column]
select row_id, val,
       stddev_pop(val) over (order by row_id
                      RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
FROM (SELECT 4 row_id, 10 val UNION ALL
      SELECT 1, NULL          UNION ALL
      SELECT 2, NULL          UNION ALL
      SELECT 6, NULL          UNION ALL
      SELECT 7, NULL          UNION ALL
      SELECT 1, NULL          UNION ALL
      SELECT 8, 1000          UNION ALL
      SELECT 3, NULL          UNION ALL
      SELECT 9, NULL          UNION ALL
      SELECT 3, 1             UNION ALL
      SELECT 6, 100           UNION ALL
      SELECT 4, NULL          UNION ALL
      SELECT 4, 10            UNION ALL
      SELECT 7, NULL          UNION ALL
      SELECT 4, 10            UNION ALL
      SELECT 5, NULL)
order by row_id, val
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, NULL},
  {1, NULL, NULL},
  {2, NULL, NULL},
  {3, NULL, 0},
  {3, 1, 0},
  {4, NULL, 3.897114317029974},
  {4, 10, 3.897114317029974},
  {4, 10, 3.897114317029974},
  {4, 10, 3.897114317029974},
  {5, NULL, 3.897114317029974},
  {6, NULL, 37.0642685075532},
  {6, 100, 37.0642685075532},
  {7, NULL, 37.0642685075532},
  {7, NULL, 37.0642685075532},
  {8, 1000, 364.48765411190544},
  {9, NULL, 364.48765411190544}
]
==

# Test with duplication of peer tuple values across partitions.
# All peers in the same partition get the same cumulative stddev_samp value, but
# tuples in different partitions are completely unrelated.
[name=analytic_stats_single_column_range_partition]
[labels=analytic_stat_single_column]
select row_id, value,
       stddev_samp(value) over (partition by row_id order by value)
FROM (SELECT 1 row_id, 3 value UNION ALL
      SELECT 2, 3 UNION ALL
      SELECT 3, 4 UNION ALL
      SELECT 4, 4 UNION ALL
      SELECT 5, 4 UNION ALL
      SELECT 5, 5)
order by row_id, value
--
ARRAY<STRUCT<row_id INT64, value INT64, DOUBLE>>[
  {1, 3, NULL},
  {2, 3, NULL},
  {3, 4, NULL},
  {4, 4, NULL},
  {5, 4, NULL},
  {5, 5, 0.70710678118654757}
]
==

[name=analytic_stats_single_column_range_unbounded_offset_preceding]
[labels=analytic_stat_single_column]
select row_id, val,
       var_pop(val) over (order by row_id
                      RANGE BETWEEN UNBOUNDED PRECEDING
                                AND 1 PRECEDING)
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 4, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, NULL},
  {2, 2, NULL},
  {3, 3, 0},
  {4, 4, 0.25}
]
==

[name=analytic_stats_single_column_range_unbounded_offset_following]
[labels=analytic_stat_single_column]
select row_id, val,
       var_samp(val) over (order by row_id
                      RANGE BETWEEN UNBOUNDED PRECEDING
                                AND 1 FOLLOWING)
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 4, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, NULL},
  {2, 2, 0.5},
  {3, 3, 1},
  {4, 4, 1}
]
==

[name=analytic_stats_single_column_range_unbounded_unbounded]
[labels=analytic_stat_single_column]
select row_id, val,
       stddev_pop(val) over (order by row_id
                      RANGE BETWEEN UNBOUNDED PRECEDING
                                AND UNBOUNDED FOLLOWING)
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 4, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, 0.816496580927726},
  {2, 2, 0.816496580927726},
  {3, 3, 0.816496580927726},
  {4, 4, 0.816496580927726}
]
==

[name=analytic_stats_single_column_range_overflow]
[labels=analytic_stat_single_column]
[parameters=1.79769e+308 as double_max]
select row_id, val,
       stddev_samp(val) over (order by row_id
                      range between unbounded preceding and
                                    current row)
FROM (SELECT 3 row_id, @double_max val UNION ALL
      SELECT 1, NULL                   UNION ALL
      SELECT 2, @double_max/2          UNION ALL
      SELECT 4, 4)
order by row_id
--
ERROR: generic::out_of_range: double overflow: 4.49423e+307 * 8.98845e+307
==

[name=analytic_stats_single_column_range_overflow_2]
[labels=analytic_stat_single_column]
[parameters=-1.79769e+308 as double_min]
select row_id, val,
       var_pop(val) over (order by row_id
                      range between unbounded preceding and
                                    unbounded following)
FROM (SELECT 3 row_id, @double_min val UNION ALL
      SELECT 1, NULL                   UNION ALL
      SELECT 2, @double_min/2          UNION ALL
      SELECT 4, 4)
order by row_id
--
ERROR: generic::out_of_range: double overflow: -4.49423e+307 * -8.98845e+307
==

[name=analytic_stats_single_column_range_offset_preceding_offset_preceding]
[labels=analytic_stat_single_column]
select row_id, val,
       var_samp(val) over (order by row_id
                      RANGE BETWEEN 2 PRECEDING
                                AND 1 PRECEDING)
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 4, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, NULL},
  {2, 2, NULL},
  {3, 3, NULL},
  {4, 4, 0.5}
]
==

[name=analytic_stats_single_column_range_offset_preceding_current_row]
[labels=analytic_stat_single_column]
select row_id, val,
       stddev_pop(val) over (order by row_id
                      RANGE BETWEEN 1 PRECEDING
                                AND CURRENT ROW)
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 4, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, NULL},
  {2, 2, 0},
  {3, 3, 0.5},
  {4, 4, 0.5}
]
==

[name=analytic_stats_single_column_range_offset_preceding_unbounded_following]
[labels=analytic_stat_single_column]
select row_id, val,
       stddev_samp(val) over (order by row_id
                      RANGE BETWEEN 1 PRECEDING
                                AND UNBOUNDED FOLLOWING)
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 4, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, 1},
  {2, 2, 1},
  {3, 3, 1},
  {4, 4, 0.70710678118654757}
]
==

[name=analytic_stats_single_column_range_current_row]
[labels=analytic_stat_single_column]
select row_id, val,
       var_pop(val) over (order by row_id
                      RANGE BETWEEN CURRENT ROW AND CURRENT ROW)
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 4, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, NULL},
  {2, 2, 0},
  {3, 3, 0},
  {4, 4, 0}
]
==

[name=analytic_stats_single_column_range_current_row_unbounded]
[labels=analytic_stat_single_column]
select row_id, val,
       var_samp(val) over (order by row_id
                      RANGE BETWEEN CURRENT ROW
                                AND UNBOUNDED FOLLOWING)
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 4, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, 1},
  {2, 2, 1},
  {3, 3, 0.5},
  {4, 4, NULL}
]
==

[name=analytic_stats_single_column_range_offset_following_offset_following]
[labels=analytic_stat_single_column]
select row_id, val,
       stddev_pop(val) over (order by row_id
                      RANGE BETWEEN 1 FOLLOWING
                                AND 2 FOLLOWING)
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 4, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, 0.5},
  {2, 2, 0.5},
  {3, 3, 0},
  {4, 4, NULL}
]
==

[name=analytic_stats_single_column_range_offset_following_unbounded]
[labels=analytic_stat_single_column]
select row_id, val,
       stddev_samp(val) over (order by row_id
                      RANGE BETWEEN 1 FOLLOWING
                                AND UNBOUNDED FOLLOWING)
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 4, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, 1},
  {2, 2, 0.70710678118654757},
  {3, 3, NULL},
  {4, 4, NULL}
]
==

[name=analytic_stats_single_column_range_offset_preceding]
[labels=analytic_stat_single_column]
[parameters=cast("NaN" as double) as nan,
            cast("+inf" as double) as pos_inf,
            cast("-inf" as double) as neg_inf]
select row_id, val,
       var_pop(val) over (order by row_id RANGE 0 PRECEDING)
FROM (SELECT 1 row_id, @pos_inf val UNION ALL
      SELECT 2, @pos_inf            UNION ALL
      SELECT 2, @pos_inf            UNION ALL
      SELECT 3, @neg_inf            UNION ALL
      SELECT 4, @neg_inf            UNION ALL
      SELECT 4, @neg_inf            UNION ALL
      SELECT 5, @neg_inf            UNION ALL
      SELECT 5, @pos_inf            UNION ALL
      SELECT 6, @nan                UNION ALL
      SELECT 7, @nan                UNION ALL
      SELECT 7, @nan                UNION ALL
      SELECT 8, @neg_inf            UNION ALL
      SELECT 8, @nan                UNION ALL
      SELECT 9, @pos_inf            UNION ALL
      SELECT 9, @nan                UNION ALL
      SELECT 10, @pos_inf           UNION ALL
      SELECT 10, @nan               UNION ALL
      SELECT 10, @neg_inf           UNION ALL
      SELECT 11, 1                  UNION ALL
      SELECT 11, @pos_inf           UNION ALL
      SELECT 12, -1                 UNION ALL
      SELECT 12, @neg_inf           UNION ALL
      SELECT 13, 0                  UNION ALL
      SELECT 13, @nan)
order by row_id, val
--
ARRAY<STRUCT<row_id INT64, val DOUBLE, DOUBLE>>[
  {1, inf, nan},
  {2, inf, nan},
  {2, inf, nan},
  {3, -inf, nan},
  {4, -inf, nan},
  {4, -inf, nan},
  {5, -inf, nan},
  {5, inf, nan},
  {6, nan, nan},
  {7, nan, nan},
  {7, nan, nan},
  {8, nan, nan},
  {8, -inf, nan},
  {9, nan, nan},
  {9, inf, nan},
  {10, nan, nan},
  {10, -inf, nan},
  {10, inf, nan},
  {11, 1, nan},
  {11, inf, nan},
  {12, -inf, nan},
  {12, -1, nan},
  {13, nan, nan},
  {13, 0, nan}
]

==

[name=analytic_stats_double_column_default_window]
[labels=analytic_stat_double_column]
select a,
       COVAR_POP(a, a)     OVER (),
       COVAR_SAMP(a, a)    OVER ()
FROM (
  select 1 a union all
  select 2 union all
  select 3 union all
  select 4 union all
  select 3 union all
  select 1 union all
  select 0)
--
ARRAY<STRUCT<a INT64, DOUBLE, DOUBLE>>[
  {2, 1.7142857142857142, 2},
  {4, 1.7142857142857142, 2},
  {1, 1.7142857142857142, 2},
  {1, 1.7142857142857142, 2},
  {3, 1.7142857142857142, 2},
  {3, 1.7142857142857142, 2},
  {0, 1.7142857142857142, 2}
]
==

# Same as previous query, with explicit ROWS and RANGE window frame.
[name=analytic_stats_double_column_unbounded]
[labels=analytic_stat_double_column]
select a,
       COVAR_POP(a, a)     OVER (RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING),
       COVAR_SAMP(a, a)    OVER (ROWS  BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)
FROM (
  select 1 a union all
  select 2 union all
  select 3 union all
  select 4 union all
  select 3 union all
  select 1 union all
  select 0)
--
ARRAY<STRUCT<a INT64, DOUBLE, DOUBLE>>[
  {2, 1.7142857142857142, 2},
  {4, 1.7142857142857142, 2},
  {1, 1.7142857142857142, 2},
  {1, 1.7142857142857142, 2},
  {3, 1.7142857142857142, 2},
  {3, 1.7142857142857142, 2},
  {0, 1.7142857142857142, 2}
]
==

# COVAR_POP is generally the same as X * Y / COUNT - (X / COUNT) * (Y / COUNT). Compare other stat
# functions with COVAR_POP
[name=analytic_stats_double_column_comparing_result]
[labels=analytic_stat_double_column]
select a,
       sum(a * a) OVER () / count(a) over () - POW(sum(a) OVER () / count(a) over (), 2)
           as var,
       COVAR_POP(a, a)     OVER (),
       COVAR_SAMP(a, a)    OVER ()
FROM (
  select 1 a union all
  select 2 union all
  select 3 union all
  select 4 union all
  select 3 union all
  select 1 union all
  select 0)
--
ARRAY<STRUCT<a INT64, var DOUBLE, DOUBLE, DOUBLE>>[
  {4, 1.7142857142857144, 1.7142857142857142, 2},
  {1, 1.7142857142857144, 1.7142857142857142, 2},
  {3, 1.7142857142857144, 1.7142857142857142, 2},
  {2, 1.7142857142857144, 1.7142857142857142, 2},
  {1, 1.7142857142857144, 1.7142857142857142, 2},
  {3, 1.7142857142857144, 1.7142857142857142, 2},
  {0, 1.7142857142857144, 1.7142857142857142, 2}
]
==

# covariance functions over INT32 values.
[name=analytic_stats_double_column_int32]
[labels=analytic_stat_double_column]
select part_id, row_id, val_1, val_2,
       sum(val_1 * val_2) OVER (partition by part_id) / count(val_1) over (partition by part_id) -
       (sum(val_1) OVER (partition by part_id) / count(val_1) over (partition by part_id)) *
       (sum(val_2) OVER (partition by part_id) / count(val_2) over (partition by part_id))
         as covar_pop,
         COVAR_POP(val_1, val_2)     OVER (partition by part_id),
         COVAR_SAMP(val_1, val_2)    OVER (partition by part_id)
FROM (SELECT 3 part_id, 1 row_id, cast(30 as int32) val_1, cast(33 as int32) val_2 UNION ALL
      SELECT 1, 2, NULL, 10                        UNION ALL
      SELECT 2, 3, 20,   21                        UNION ALL
      SELECT 3, 4, 32,   22                        UNION ALL
      SELECT 1, 5, NULL, 32                        UNION ALL
      SELECT 2, 6, NULL, NULL                      UNION ALL
      SELECT 4, 7, 40,   50                        UNION ALL
      SELECT 3, 8, 36,   50                        UNION ALL
      SELECT 3, 9, 34,   40                        UNION ALL
      SELECT 4, 10, -40,  25)
ORDER BY 1, 2, 3, 4
--
ARRAY<STRUCT<part_id INT64,
             row_id INT64,
             val_1 INT32,
             val_2 INT32,
             covar_pop DOUBLE,
             DOUBLE,
             DOUBLE>>
[
  {1, 2, NULL, 10, NULL, NULL, NULL},
  {1, 5, NULL, 32, NULL, NULL, NULL},
  {2, 3, 20, 21, 0, 0, NULL},
  {2, 6, NULL, NULL, 0, 0, NULL},
  {3, 1, 30, 33, 17.25, 17.250000000000007, 23.000000000000011},
  {3, 4, 32, 22, 17.25, 17.250000000000007, 23.000000000000011},
  {3, 8, 36, 50, 17.25, 17.250000000000007, 23.000000000000011},
  {3, 9, 34, 40, 17.25, 17.250000000000007, 23.000000000000011},
  {4, 7, 40, 50, 500, 500, 1000},
  {4, 10, -40, 25, 500, 500, 1000}
]
==

# covariance functions over INT64 values.
[name=analytic_stats_double_column_int64]
[labels=analytic_stat_double_column]
select part_id, row_id, val_1, val_2,
       sum(val_1 * val_2) OVER (partition by part_id) / count(val_1) over (partition by part_id) -
       (sum(val_1) OVER (partition by part_id) / count(val_1) over (partition by part_id)) *
       (sum(val_2) OVER (partition by part_id) / count(val_2) over (partition by part_id))
         as covar_pop,
         COVAR_POP(val_1, val_2)     OVER (partition by part_id),
         COVAR_SAMP(val_1, val_2)    OVER (partition by part_id)
FROM (SELECT 3 part_id, 1 row_id, cast(30 as int64) val_1, cast(33 as int64) val_2 UNION ALL
      SELECT 1, 2, NULL, 10                        UNION ALL
      SELECT 2, 3, 20,   21                        UNION ALL
      SELECT 3, 4, 32,   22                        UNION ALL
      SELECT 1, 5, NULL, 32                        UNION ALL
      SELECT 2, 6, NULL, NULL                      UNION ALL
      SELECT 4, 7, 40,   50                        UNION ALL
      SELECT 3, 8, 36,   50                        UNION ALL
      SELECT 3, 9, 34,   40                        UNION ALL
      SELECT 4, 10, -40,  25)
ORDER BY 1, 2, 3, 4
--
ARRAY<STRUCT<part_id INT64,
             row_id INT64,
             val_1 INT64,
             val_2 INT64,
             covar_pop DOUBLE,
             DOUBLE,
             DOUBLE>>
[
  {1, 2, NULL, 10, NULL, NULL, NULL},
  {1, 5, NULL, 32, NULL, NULL, NULL},
  {2, 3, 20, 21, 0, 0, NULL},
  {2, 6, NULL, NULL, 0, 0, NULL},
  {3, 1, 30, 33, 17.25, 17.250000000000007, 23.000000000000011},
  {3, 4, 32, 22, 17.25, 17.250000000000007, 23.000000000000011},
  {3, 8, 36, 50, 17.25, 17.250000000000007, 23.000000000000011},
  {3, 9, 34, 40, 17.25, 17.250000000000007, 23.000000000000011},
  {4, 7, 40, 50, 500, 500, 1000},
  {4, 10, -40, 25, 500, 500, 1000}
]
==

# covariance functions over UINT32 values.
[name=analytic_stats_double_column_uint32]
[labels=analytic_stat_double_column]
select part_id, row_id, val_1, val_2,
       sum(val_1 * val_2) OVER (partition by part_id) / count(val_1) over (partition by part_id) -
       (sum(val_1) OVER (partition by part_id) / count(val_1) over (partition by part_id)) *
       (sum(val_2) OVER (partition by part_id) / count(val_2) over (partition by part_id))
         as covar_pop,
         COVAR_POP(val_1, val_2)     OVER (partition by part_id),
         COVAR_SAMP(val_1, val_2)    OVER (partition by part_id)
FROM (SELECT 3 part_id, 1 row_id, cast(30 as uint32) val_1, cast(33 as uint32) val_2 UNION ALL
      SELECT 1, 2, NULL, 10                        UNION ALL
      SELECT 2, 3, 20,   21                        UNION ALL
      SELECT 3, 4, 32,   22                        UNION ALL
      SELECT 1, 5, NULL, 32                        UNION ALL
      SELECT 2, 6, NULL, NULL                      UNION ALL
      SELECT 4, 7, 40,   50                        UNION ALL
      SELECT 3, 8, 36,   50                        UNION ALL
      SELECT 3, 9, 34,   40                        UNION ALL
      SELECT 4, 10, 40,  25)
ORDER BY 1, 2, 3, 4
--
ARRAY<STRUCT<part_id INT64,
             row_id INT64,
             val_1 UINT32,
             val_2 UINT32,
             covar_pop DOUBLE,
             DOUBLE,
             DOUBLE>>
[
  {1, 2, NULL, 10, NULL, NULL, NULL},
  {1, 5, NULL, 32, NULL, NULL, NULL},
  {2, 3, 20, 21, 0, 0, NULL},
  {2, 6, NULL, NULL, 0, 0, NULL},
  {3, 1, 30, 33, 17.25, 17.250000000000007, 23.000000000000011},
  {3, 4, 32, 22, 17.25, 17.250000000000007, 23.000000000000011},
  {3, 8, 36, 50, 17.25, 17.250000000000007, 23.000000000000011},
  {3, 9, 34, 40, 17.25, 17.250000000000007, 23.000000000000011},
  {4, 7, 40, 50, 0, 0, 0},
  {4, 10, 40, 25, 0, 0, 0}
]
==

# covariance functions over UINT64 values.
[name=analytic_stats_double_column_uint64]
[labels=analytic_stat_double_column]
select part_id, row_id, val_1, val_2,
       sum(val_1 * val_2) OVER (partition by part_id) / count(val_1) over (partition by part_id) -
       (sum(val_1) OVER (partition by part_id) / count(val_1) over (partition by part_id)) *
       (sum(val_2) OVER (partition by part_id) / count(val_2) over (partition by part_id))
         as covar_pop,
         COVAR_POP(val_1, val_2)     OVER (partition by part_id),
         COVAR_SAMP(val_1, val_2)    OVER (partition by part_id)
FROM (SELECT 3 part_id, 1 row_id, cast(30 as uint64) val_1, cast(33 as uint64) val_2 UNION ALL
      SELECT 1, 2, NULL, 10                        UNION ALL
      SELECT 2, 3, 20,   21                        UNION ALL
      SELECT 3, 4, 32,   22                        UNION ALL
      SELECT 1, 5, NULL, 32                        UNION ALL
      SELECT 2, 6, NULL, NULL                      UNION ALL
      SELECT 4, 7, 40,   50                        UNION ALL
      SELECT 3, 8, 36,   50                        UNION ALL
      SELECT 3, 9, 34,   40                        UNION ALL
      SELECT 4, 10, 40,  25)
ORDER BY 1, 2, 3, 4
--
ARRAY<STRUCT<part_id INT64,
             row_id INT64,
             val_1 UINT64,
             val_2 UINT64,
             covar_pop DOUBLE,
             DOUBLE,
             DOUBLE>>
[
  {1, 2, NULL, 10, NULL, NULL, NULL},
  {1, 5, NULL, 32, NULL, NULL, NULL},
  {2, 3, 20, 21, 0, 0, NULL},
  {2, 6, NULL, NULL, 0, 0, NULL},
  {3, 1, 30, 33, 17.25, 17.250000000000007, 23.000000000000011},
  {3, 4, 32, 22, 17.25, 17.250000000000007, 23.000000000000011},
  {3, 8, 36, 50, 17.25, 17.250000000000007, 23.000000000000011},
  {3, 9, 34, 40, 17.25, 17.250000000000007, 23.000000000000011},
  {4, 7, 40, 50, 0, 0, 0},
  {4, 10, 40, 25, 0, 0, 0}
]
==

# covariance functions over FLOAT values.
[name=analytic_stats_double_column_float]
[labels=analytic_stat_double_column]
select part_id, row_id, val_1, val_2,
       sum(val_1 * val_2) OVER (partition by part_id) / count(val_1) over (partition by part_id) -
       (sum(val_1) OVER (partition by part_id) / count(val_1) over (partition by part_id)) *
       (sum(val_2) OVER (partition by part_id) / count(val_2) over (partition by part_id))
         as covar_pop,
         COVAR_POP(val_1, val_2)     OVER (partition by part_id),
         COVAR_SAMP(val_1, val_2)    OVER (partition by part_id)
FROM (SELECT 3 part_id, 1 row_id, cast(30 as float) val_1, cast(33 as float) val_2 UNION ALL
      SELECT 1, 2, NULL, 10                        UNION ALL
      SELECT 2, 3, 20,   21                        UNION ALL
      SELECT 3, 4, 32,   22                        UNION ALL
      SELECT 1, 5, NULL, 32                        UNION ALL
      SELECT 2, 6, NULL, NULL                      UNION ALL
      SELECT 4, 7, 40,   50                        UNION ALL
      SELECT 3, 8, 36,   50                        UNION ALL
      SELECT 3, 9, 34,   40                        UNION ALL
      SELECT 4, 10, -40,  25)
ORDER BY 1, 2, 3, 4
--
ARRAY<STRUCT<part_id INT64,
             row_id INT64,
             val_1 FLOAT,
             val_2 FLOAT,
             covar_pop DOUBLE,
             DOUBLE,
             DOUBLE>>
[
  {1, 2, NULL, 10, NULL, NULL, NULL},
  {1, 5, NULL, 32, NULL, NULL, NULL},
  {2, 3, 20, 21, 0, 0, NULL},
  {2, 6, NULL, NULL, 0, 0, NULL},
  {3, 1, 30, 33, 17.25, 17.250000000000007, 23.000000000000011},
  {3, 4, 32, 22, 17.25, 17.250000000000007, 23.000000000000011},
  {3, 8, 36, 50, 17.25, 17.250000000000007, 23.000000000000011},
  {3, 9, 34, 40, 17.25, 17.250000000000007, 23.000000000000011},
  {4, 7, 40, 50, 500, 500, 1000},
  {4, 10, -40, 25, 500, 500, 1000}
]
==

# covariance over DOUBLE values.
[name=analytic_stats_double_column_double]
[labels=analytic_stat_double_column]
select part_id, row_id, val_1, val_2,
       sum(val_1 * val_2) OVER (partition by part_id) / count(val_1) over (partition by part_id) -
       (sum(val_1) OVER (partition by part_id) / count(val_1) over (partition by part_id)) *
       (sum(val_2) OVER (partition by part_id) / count(val_2) over (partition by part_id))
         as covar_pop,
         COVAR_POP(val_1, val_2)     OVER (partition by part_id),
         COVAR_SAMP(val_1, val_2)    OVER (partition by part_id)
FROM (SELECT 3 part_id, 1 row_id, cast(30 as double) val_1, cast(33 as double) val_2 UNION ALL
      SELECT 1, 2, NULL, 10                        UNION ALL
      SELECT 2, 3, 20,   21                        UNION ALL
      SELECT 3, 4, 32,   22                        UNION ALL
      SELECT 1, 5, NULL, 32                        UNION ALL
      SELECT 2, 6, NULL, NULL                      UNION ALL
      SELECT 4, 7, 40,   50                        UNION ALL
      SELECT 3, 8, 36,   50                        UNION ALL
      SELECT 3, 9, 34,   40                        UNION ALL
      SELECT 4, 10, -40,  25)
ORDER BY 1, 2, 3, 4
--
ARRAY<STRUCT<part_id INT64,
             row_id INT64,
             val_1 DOUBLE,
             val_2 DOUBLE,
             covar_pop DOUBLE,
             DOUBLE,
             DOUBLE>>
[
  {1, 2, NULL, 10, NULL, NULL, NULL},
  {1, 5, NULL, 32, NULL, NULL, NULL},
  {2, 3, 20, 21, 0, 0, NULL},
  {2, 6, NULL, NULL, 0, 0, NULL},
  {3, 1, 30, 33, 17.25, 17.250000000000007, 23.000000000000011},
  {3, 4, 32, 22, 17.25, 17.250000000000007, 23.000000000000011},
  {3, 8, 36, 50, 17.25, 17.250000000000007, 23.000000000000011},
  {3, 9, 34, 40, 17.25, 17.250000000000007, 23.000000000000011},
  {4, 7, 40, 50, 500, 500, 1000},
  {4, 10, -40, 25, 500, 500, 1000}
]
==

# covariance functions over NUMERIC values.
[name=analytic_stats_double_column_numeric_value]
[required_features=ANALYTIC_FUNCTIONS,NUMERIC_TYPE]
[labels=analytic_stat_double_column]
select part_id, row_id, val_1, val_2,
       sum(val_1 * val_2) OVER (partition by part_id) / count(val_1) over (partition by part_id) -
       (sum(val_1) OVER (partition by part_id) / count(val_1) over (partition by part_id)) *
       (sum(val_2) OVER (partition by part_id) / count(val_2) over (partition by part_id))
         as covar_pop,
         COVAR_POP(val_1, val_2)     OVER (partition by part_id),
         COVAR_SAMP(val_1, val_2)    OVER (partition by part_id)
FROM (SELECT 3 part_id, 1 row_id, NUMERIC '30' val_1, NUMERIC '33' val_2 UNION ALL
      SELECT 1,         2,        NULL,               NUMERIC '10'       UNION ALL
      SELECT 2,         3,        NUMERIC '20',       NUMERIC '21'       UNION ALL
      SELECT 3,         4,        NUMERIC '32',       NUMERIC '22'       UNION ALL
      SELECT 1,         5,        NULL,               NUMERIC '32'       UNION ALL
      SELECT 2,         6,        NULL,               NULL               UNION ALL
      SELECT 4,         7,        NUMERIC '40',       NUMERIC '50'       UNION ALL
      SELECT 3,         8,        NUMERIC '36',       NUMERIC '50'       UNION ALL
      SELECT 3,         9,        NUMERIC '34',       NUMERIC '40'       UNION ALL
      SELECT 4,         10,       NUMERIC '-40',      NUMERIC '25')
ORDER BY 1, 2, 3, 4
--
ARRAY<STRUCT<part_id INT64,
             row_id INT64,
             val_1 NUMERIC,
             val_2 NUMERIC,
             covar_pop NUMERIC,
             DOUBLE,
             DOUBLE>>
[
  {1, 2, NULL, 10, NULL, NULL, NULL},
  {1, 5, NULL, 32, NULL, NULL, NULL},
  {2, 3, 20, 21, 0, 0, NULL},
  {2, 6, NULL, NULL, 0, 0, NULL},
  {3, 1, 30, 33, 17.25, 17.25, 23},
  {3, 4, 32, 22, 17.25, 17.25, 23},
  {3, 8, 36, 50, 17.25, 17.25, 23},
  {3, 9, 34, 40, 17.25, 17.25, 23},
  {4, 7, 40, 50, 500, 500, 1000},
  {4, 10, -40, 25, 500, 500, 1000}
]
==

[name=analytic_stats_double_column_rows_unbounded_current_row]
[labels=analytic_stat_double_column]
select a,
       covar_pop(a, a) OVER order_window as var_pop_a
FROM (
  select 1 a union all
  select 2 union all
  select 3 union all
  select 4 union all
  select 3 union all
  select 1)
WINDOW order_window AS (ORDER BY a ASC
                        ROWS BETWEEN UNBOUNDED PRECEDING
                                 AND CURRENT ROW)
ORDER BY a, var_pop_a
--
ARRAY<STRUCT<a INT64, var_pop_a DOUBLE>>[
  {1, 0},
  {1, 0},
  {2, 0.22222222222222221},
  {3, 0.6875},
  {3, 0.8},
  {4, 1.2222222222222223}
]
==

# Cumulative covariance with NULL last.
[name=analytic_stats_double_column_rows_unbounded_current_row_null]
[labels=analytic_stat_double_column]
select row_id, val,
       covar_samp(val, val) over (order by row_id DESC
                      ROWS BETWEEN UNBOUNDED PRECEDING
                               AND CURRENT ROW)
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 4, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, 1},
  {2, 2, 1},
  {3, 3, 0.5},
  {4, 4, NULL}
]
==

# Cumulative covariance with partition by.
[name=analytic_stats_double_column_rows_unbounded_current_row_partition]
[labels=analytic_stat_double_column]
select part_id, row_id, val,
       covar_pop(val, val) over (partition by part_id order by row_id ASC
                      ROWS BETWEEN UNBOUNDED PRECEDING
                               AND CURRENT ROW)
FROM (SELECT 1 part_id, 3 row_id, 3 val UNION ALL
      SELECT 2, 1, NULL                 UNION ALL
      SELECT 1, 2, 2                    UNION ALL
      SELECT 2, 4, 40                   UNION ALL
      SELECT 2, 3, 30                   UNION ALL
      SELECT 1, 1, NULL                 UNION ALL
      SELECT 2, 2, 20                   UNION ALL
      SELECT 1, 4, 4)
order by part_id, row_id
--
ARRAY<STRUCT<part_id INT64, row_id INT64, val INT64, DOUBLE>>[
  {1, 1, NULL, NULL},
  {1, 2, 2, 0},
  {1, 3, 3, 0.25},
  {1, 4, 4, 0.66666666666666663},
  {2, 1, NULL, NULL},
  {2, 2, 20, 0},
  {2, 3, 30, 25},
  {2, 4, 40, 66.666666666666671}
]
==

# Cumulative covariance over all numeric types.
[name=analytic_stats_double_column_rows_unbounded_current_row_numeric]
[required_features=ANALYTIC_FUNCTIONS,NUMERIC_TYPE]
[labels=analytic_stat_double_column]
select row_id, val,
       covar_pop(cast(val as INT32),  cast(val as INT32)) over window1,
       covar_pop(cast(val as INT64),  cast(val as INT64)) over window1,
       covar_pop(cast(val as UINT32), cast(val as UINT32)) over window1,
       covar_pop(cast(val as UINT64), cast(val as UINT64)) over window1,
       covar_pop(cast(val as FLOAT),  cast(val as FLOAT)) over window1,
       covar_pop(cast(val as DOUBLE), cast(val as DOUBLE)) over window1,
       covar_pop(cast(val as NUMERIC), cast(val as NUMERIC)) over window1
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 4, 4)
WINDOW window1 as (order by row_id
                   ROWS BETWEEN UNBOUNDED PRECEDING
                            AND CURRENT ROW)
order by row_id
--
ARRAY<STRUCT<row_id INT64,
             val INT64,
             DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE>>
[{1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
 {2, 2, 0, 0, 0, 0, 0, 0, 0},
 {3, 3, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25},
 {4,
  4,
  0.66666666666666663,
  0.66666666666666663,
  0.66666666666666663,
  0.66666666666666663,
  0.66666666666666663,
  0.66666666666666663,
  0.66666666666666663}]
==

# Grand total covariance.
[name=analytic_stats_double_column_rows_unbounded_current_row_stddev_samp]
[labels=analytic_stat_double_column]
select row_id, val,
       covar_samp(val, val) over ()
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 4, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, 1},
  {2, 2, 1},
  {3, 3, 1},
  {4, 4, 1}
]
==

# Grand total covariance per partition.
[name=analytic_stats_double_column_rows_unbounded_current_row_var_samp]
[labels=analytic_stat_double_column]
select row_id, val,
       covar_samp(val, val) over (partition by row_id)
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 4, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, NULL},
  {2, 2, NULL},
  {3, 3, NULL},
  {4, 4, NULL}
]
==

[name=analytic_stats_double_column_rows_unbounded_current_row_params]
[labels=analytic_stat_double_column]
[parameters=1.79769e+308 as double_max]
select row_id, val,
       covar_pop(val, val) over (order by row_id
                      rows between unbounded preceding and
                                   current row)
FROM (SELECT 3 row_id, @double_max val UNION ALL
      SELECT 1, NULL                   UNION ALL
      SELECT 2, @double_max/2          UNION ALL
      SELECT 4, 4)
order by row_id
--
ERROR: generic::out_of_range: double overflow: 8.98845e+307 * 8.98845e+307
==

[name=analytic_stats_double_column_rows_unbounded_current_row_params_2]
[labels=analytic_stat_double_column]
[parameters=-1.79769e+308 as double_min]
select row_id, val,
       covar_samp(val, val) over (order by row_id
                      rows between unbounded preceding and
                                   unbounded following)
FROM (SELECT 3 row_id, @double_min val UNION ALL
      SELECT 1, NULL                   UNION ALL
      SELECT 2, @double_min/2          UNION ALL
      SELECT 4, 4)
order by row_id
--
ERROR: generic::out_of_range: double overflow: -8.98845e+307 * -8.98845e+307
==

[name=analytic_stats_double_column_rows_offset_preceding_current_row]
[labels=analytic_stat_double_column]
select row_id, val,
       covar_pop(val, val) over (order by row_id ROWS BETWEEN 1 PRECEDING
                                               AND CURRENT ROW)
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 4, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, NULL},
  {2, 2, 0},
  {3, 3, 0.25},
  {4, 4, 0.25}
]
==

[name=analytic_stats_double_column_rows_unbounded_offset_preceding]
[labels=analytic_stat_double_column]
select row_id, val,
       covar_samp(val, val) over (order by row_id ROWS BETWEEN UNBOUNDED PRECEDING
                                               AND 1 PRECEDING)
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 4, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, NULL},
  {2, 2, NULL},
  {3, 3, NULL},
  {4, 4, 0.5}
]
==

[name=analytic_stats_double_column_rows_unbounded_offset_following]
[labels=analytic_stat_double_column]
select row_id, val,
       covar_pop(val, val) over (order by row_id ROWS BETWEEN UNBOUNDED PRECEDING
                                               AND 1 FOLLOWING)
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 4, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, 0},
  {2, 2, 0.25},
  {3, 3, 0.66666666666666663},
  {4, 4, 0.66666666666666663}
]
==

[name=analytic_stats_double_column_rows_offset_preceding_offset_preceding]
[labels=analytic_stat_double_column]
select row_id, val,
       covar_samp(val, val) over (order by row_id ROWS BETWEEN 2 PRECEDING
                                               AND 1 PRECEDING)
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 4, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, NULL},
  {2, 2, NULL},
  {3, 3, NULL},
  {4, 4, 0.5}
]
==

[name=analytic_stats_double_column_rows_offset_preceding_offset_following]
[labels=analytic_stat_double_column]
select row_id, val,
       covar_pop(val, val) over (order by row_id ROWS BETWEEN 1 PRECEDING
                                               AND 1 FOLLOWING)
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 4, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, 0},
  {2, 2, 0.25},
  {3, 3, 0.66666666666666663},
  {4, 4, 0.25}
]
==

[name=analytic_stats_double_column_rows_offset_preceding_unbounded]
[labels=analytic_stat_double_column]
select row_id, val,
       covar_samp(val, val) over (order by row_id ROWS BETWEEN 1 PRECEDING
                                               AND UNBOUNDED FOLLOWING)
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 4, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, 1},
  {2, 2, 1},
  {3, 3, 1},
  {4, 4, 0.5}
]
==

[name=analytic_stats_double_column_rows_current_row]
[labels=analytic_stat_double_column]
select row_id, val,
       covar_pop(val, val) over (order by row_id
                      ROWS CURRENT ROW)
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 4, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, NULL},
  {2, 2, 0},
  {3, 3, 0},
  {4, 4, 0}
]
==

[name=analytic_stats_double_column_rows_current_row_offset_following]
[labels=analytic_stat_double_column]
select row_id, val,
       covar_samp(val, val) over (order by row_id ROWS BETWEEN CURRENT ROW
                                               AND 1 FOLLOWING)
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 4, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, NULL},
  {2, 2, 0.5},
  {3, 3, 0.5},
  {4, 4, NULL}
]
==

[name=analytic_stats_double_column_rows_current_row_unbounded]
[labels=analytic_stat_double_column]
select row_id, val,
       covar_pop(val, val) over (order by row_id ROWS BETWEEN CURRENT ROW
                                               AND UNBOUNDED FOLLOWING)
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 4, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, 0.66666666666666663},
  {2, 2, 0.66666666666666663},
  {3, 3, 0.25},
  {4, 4, 0}
]
==

[name=analytic_stats_double_column_rows_offset_following_offset_following]
[labels=analytic_stat_double_column]
select row_id, val,
       covar_samp(val, val) over (order by row_id ROWS BETWEEN 1 FOLLOWING
                                               AND 2 FOLLOWING)
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 4, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, 0.5},
  {2, 2, 0.5},
  {3, 3, NULL},
  {4, 4, NULL}
]
==

[name=analytic_stats_double_column_rows_offset_following_unbounded]
[labels=analytic_stat_double_column]
select row_id, val,
       covar_pop(val, val) over (order by row_id ROWS BETWEEN 1 FOLLOWING
                                               AND UNBOUNDED FOLLOWING)
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 4, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, 0.66666666666666663},
  {2, 2, 0.25},
  {3, 3, 0},
  {4, 4, NULL}
]
==

# RANGE window frames are currently supported for cumulative var_pop.
[name=analytic_stats_double_column_range_unbounded]
[labels=analytic_stat_double_column]
select row_id, val,
       covar_pop(val, val) over (order by row_id
                          RANGE UNBOUNDED PRECEDING)
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 4, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, NULL},
  {2, 2, 0},
  {3, 3, 0.25},
  {4, 4, 0.66666666666666663}
]
==

# Tests with various duplication of peer tuples (with the same ORDER BY value).
# All peers get the same cumulative covariance value.
[name=analytic_stats_double_column_range_unbounded_current_row]
[labels=analytic_stat_double_column]
select row_id, val,
       covar_samp(val, val) over (order by row_id
                           RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
FROM (SELECT 1 row_id, 1 val UNION ALL
      SELECT 1, 3            UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 1, 4            UNION ALL
      SELECT 1, 2            UNION ALL
      SELECT 1, 5)
order by row_id, val
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, 2.5},
  {1, 1, 2.5},
  {1, 2, 2.5},
  {1, 3, 2.5},
  {1, 4, 2.5},
  {1, 5, 2.5}
]
==

[name=analytic_stats_double_column_range_unbounded_current_row_2]
[labels=analytic_stat_double_column]
select row_id, val,
       covar_pop(val, val) over (order by row_id
                      RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
FROM (SELECT 4 row_id, 10 val UNION ALL
      SELECT 1, NULL          UNION ALL
      SELECT 2, NULL          UNION ALL
      SELECT 6, NULL          UNION ALL
      SELECT 7, NULL          UNION ALL
      SELECT 1, NULL          UNION ALL
      SELECT 8, 1000          UNION ALL
      SELECT 3, NULL          UNION ALL
      SELECT 9, NULL          UNION ALL
      SELECT 3, 1             UNION ALL
      SELECT 6, 100           UNION ALL
      SELECT 4, NULL          UNION ALL
      SELECT 4, 10            UNION ALL
      SELECT 7, NULL          UNION ALL
      SELECT 4, 10            UNION ALL
      SELECT 5, NULL)
order by row_id, val
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, NULL},
  {1, NULL, NULL},
  {2, NULL, NULL},
  {3, NULL, 0},
  {3, 1, 0},
  {4, NULL, 15.1875},
  {4, 10, 15.1875},
  {4, 10, 15.1875},
  {4, 10, 15.1875},
  {5, NULL, 15.1875},
  {6, NULL, 1373.76},
  {6, 100, 1373.76},
  {7, NULL, 1373.76},
  {7, NULL, 1373.76},
  {8, 1000, 132851.24999999997},
  {9, NULL, 132851.24999999997}
]
==

# Test with duplication of peer tuple values across partitions.
# All peers in the same partition get the same cumulative stddev_samp value, but
# tuples in different partitions are completely unrelated.
[name=analytic_stats_double_column_range_partition]
[labels=analytic_stat_double_column]
select row_id, value,
       covar_samp(value, value) over (partition by row_id order by value)
FROM (SELECT 1 row_id, 3 value UNION ALL
      SELECT 2, 3 UNION ALL
      SELECT 3, 4 UNION ALL
      SELECT 4, 4 UNION ALL
      SELECT 5, 4 UNION ALL
      SELECT 5, 5)
order by row_id, value
--
ARRAY<STRUCT<row_id INT64, value INT64, DOUBLE>>[
  {1, 3, NULL},
  {2, 3, NULL},
  {3, 4, NULL},
  {4, 4, NULL},
  {5, 4, NULL},
  {5, 5, 0.5}
]
==

[name=analytic_stats_double_column_range_unbounded_offset_preceding]
[labels=analytic_stat_double_column]
select row_id, val,
       covar_pop(val, val) over (order by row_id
                      RANGE BETWEEN UNBOUNDED PRECEDING
                                AND 1 PRECEDING)
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 4, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, NULL},
  {2, 2, NULL},
  {3, 3, 0},
  {4, 4, 0.25}
]
==

[name=analytic_stats_double_column_range_unbounded_offset_following]
[labels=analytic_stat_double_column]
select row_id, val,
       covar_samp(val, val) over (order by row_id
                      RANGE BETWEEN UNBOUNDED PRECEDING
                                AND 1 FOLLOWING)
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 4, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, NULL},
  {2, 2, 0.5},
  {3, 3, 1},
  {4, 4, 1}
]
==

[name=analytic_stats_double_column_range_unbounded_unbounded]
[labels=analytic_stat_double_column]
select row_id, val,
       covar_pop(val, val) over (order by row_id
                      RANGE BETWEEN UNBOUNDED PRECEDING
                                AND UNBOUNDED FOLLOWING)
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 4, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, 0.66666666666666663},
  {2, 2, 0.66666666666666663},
  {3, 3, 0.66666666666666663},
  {4, 4, 0.66666666666666663}
]
==

[name=analytic_stats_double_column_range_overflow]
[labels=analytic_stat_double_column]
[parameters=1.79769e+308 as double_max]
select row_id, val,
       covar_samp(val, val) over (order by row_id
                      range between unbounded preceding and
                                    current row)
FROM (SELECT 3 row_id, @double_max val UNION ALL
      SELECT 1, NULL                   UNION ALL
      SELECT 2, @double_max/2          UNION ALL
      SELECT 4, 4)
order by row_id
--
ERROR: generic::out_of_range: double overflow: 8.98845e+307 * 8.98845e+307
==

[name=analytic_stats_double_column_range_overflow_2]
[labels=analytic_stat_double_column]
[parameters=-1.79769e+308 as double_min]
select row_id, val,
       covar_pop(val, val) over (order by row_id
                      range between unbounded preceding and
                                    unbounded following)
FROM (SELECT 3 row_id, @double_min val UNION ALL
      SELECT 1, NULL                   UNION ALL
      SELECT 2, @double_min/2          UNION ALL
      SELECT 4, 4)
order by row_id
--
ERROR: generic::out_of_range: double overflow: -8.98845e+307 * -8.98845e+307
==

[name=analytic_stats_double_column_range_offset_preceding_offset_preceding]
[labels=analytic_stat_double_column]
select row_id, val,
       covar_samp(val, val) over (order by row_id
                      RANGE BETWEEN 2 PRECEDING
                                AND 1 PRECEDING)
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 4, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, NULL},
  {2, 2, NULL},
  {3, 3, NULL},
  {4, 4, 0.5}
]
==

[name=analytic_stats_double_column_range_offset_preceding_current_row]
[labels=analytic_stat_double_column]
select row_id, val,
       covar_pop(val, val) over (order by row_id
                      RANGE BETWEEN 1 PRECEDING
                                AND CURRENT ROW)
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 4, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, NULL},
  {2, 2, 0},
  {3, 3, 0.25},
  {4, 4, 0.25}
]
==

[name=analytic_stats_double_column_range_offset_preceding_unbounded_following]
[labels=analytic_stat_double_column]
select row_id, val,
       covar_samp(val, val) over (order by row_id
                      RANGE BETWEEN 1 PRECEDING
                                AND UNBOUNDED FOLLOWING)
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 4, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, 1},
  {2, 2, 1},
  {3, 3, 1},
  {4, 4, 0.5}
]
==

[name=analytic_stats_double_column_range_current_row]
[labels=analytic_stat_double_column]
select row_id, val,
       covar_pop(val, val) over (order by row_id
                      RANGE BETWEEN CURRENT ROW AND CURRENT ROW)
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 4, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, NULL},
  {2, 2, 0},
  {3, 3, 0},
  {4, 4, 0}
]
==

[name=analytic_stats_double_column_range_current_row_unbounded]
[labels=analytic_stat_double_column]
select row_id, val,
       covar_samp(val, val) over (order by row_id
                      RANGE BETWEEN CURRENT ROW
                                AND UNBOUNDED FOLLOWING)
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 4, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, 1},
  {2, 2, 1},
  {3, 3, 0.5},
  {4, 4, NULL}
]
==

[name=analytic_stats_double_column_range_offset_following_offset_following]
[labels=analytic_stat_double_column]
select row_id, val,
       covar_pop(val, val) over (order by row_id
                      RANGE BETWEEN 1 FOLLOWING
                                AND 2 FOLLOWING)
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 4, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, 0.25},
  {2, 2, 0.25},
  {3, 3, 0},
  {4, 4, NULL}
]
==

[name=analytic_stats_double_column_range_offset_following_unbounded]
[labels=analytic_stat_double_column]
select row_id, val,
       covar_samp(val, val) over (order by row_id
                      RANGE BETWEEN 1 FOLLOWING
                                AND UNBOUNDED FOLLOWING)
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 4, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, 1},
  {2, 2, 0.5},
  {3, 3, NULL},
  {4, 4, NULL}
]
==

[name=analytic_stats_double_column_range_offset_preceding]
[labels=analytic_stat_double_column]
[parameters=cast("NaN" as double) as nan,
            cast("+inf" as double) as pos_inf,
            cast("-inf" as double) as neg_inf]
select row_id, val,
       covar_pop(val, val) over (order by row_id RANGE 0 PRECEDING)
FROM (SELECT 1 row_id, @pos_inf val UNION ALL
      SELECT 2, @pos_inf            UNION ALL
      SELECT 2, @pos_inf            UNION ALL
      SELECT 3, @neg_inf            UNION ALL
      SELECT 4, @neg_inf            UNION ALL
      SELECT 4, @neg_inf            UNION ALL
      SELECT 5, @neg_inf            UNION ALL
      SELECT 5, @pos_inf            UNION ALL
      SELECT 6, @nan                UNION ALL
      SELECT 7, @nan                UNION ALL
      SELECT 7, @nan                UNION ALL
      SELECT 8, @neg_inf            UNION ALL
      SELECT 8, @nan                UNION ALL
      SELECT 9, @pos_inf            UNION ALL
      SELECT 9, @nan                UNION ALL
      SELECT 10, @pos_inf           UNION ALL
      SELECT 10, @nan               UNION ALL
      SELECT 10, @neg_inf           UNION ALL
      SELECT 11, 1                  UNION ALL
      SELECT 11, @pos_inf           UNION ALL
      SELECT 12, -1                 UNION ALL
      SELECT 12, @neg_inf           UNION ALL
      SELECT 13, 0                  UNION ALL
      SELECT 13, @nan)
order by row_id, val
--
ARRAY<STRUCT<row_id INT64, val DOUBLE, DOUBLE>>[
  {1, inf, nan},
  {2, inf, nan},
  {2, inf, nan},
  {3, -inf, nan},
  {4, -inf, nan},
  {4, -inf, nan},
  {5, -inf, nan},
  {5, inf, nan},
  {6, nan, nan},
  {7, nan, nan},
  {7, nan, nan},
  {8, nan, nan},
  {8, -inf, nan},
  {9, nan, nan},
  {9, inf, nan},
  {10, nan, nan},
  {10, -inf, nan},
  {10, inf, nan},
  {11, 1, nan},
  {11, inf, nan},
  {12, -inf, nan},
  {12, -1, nan},
  {13, nan, nan},
  {13, 0, nan}
]
==

[name=analytic_stats_double_column_corr_return_nan_value_1]
[labels=analytic_stat_double_column]
SELECT a,
       CORR(a, - 942.24663687266877) OVER ()
FROM (
  select 1 a union all
  select 2 union all
  select 3 union all
  select 4 union all
  select 5 union all
  select 6 union all
  select 7 union all
  select 8)
order by a
--
ARRAY<STRUCT<a INT64, DOUBLE>>[
  {1, nan},
  {2, nan},
  {3, nan},
  {4, nan},
  {5, nan},
  {6, nan},
  {7, nan},
  {8, nan}
]
==

[name=analytic_stats_double_column_corr_return_nan_value_2]
[labels=analytic_stat_double_column]
SELECT a,
       CORR(-749.83751175908083, - 943.04501418685186) OVER ()
FROM (
  select 1 a union all
  select 2 union all
  select 3 union all
  select 4 union all
  select 5 union all
  select 6 union all
  select 7 union all
  select 8)
order by a
--
ARRAY<STRUCT<a INT64, DOUBLE>>[
  {1, nan},
  {2, nan},
  {3, nan},
  {4, nan},
  {5, nan},
  {6, nan},
  {7, nan},
  {8, nan}
]
==

[name=analytic_stats_double_column_corr_return_nan_value_3]
[labels=analytic_stat_double_column]
SELECT a,
       CORR(99.203917203408537, -235.84828348474082) OVER ()
FROM (
  select 1 a union all
  select 2 union all
  select 3 union all
  select 4 union all
  select 5 union all
  select 6 union all
  select 7 union all
  select 8)
order by a
--
ARRAY<STRUCT<a INT64, DOUBLE>>[
  {1, nan},
  {2, nan},
  {3, nan},
  {4, nan},
  {5, nan},
  {6, nan},
  {7, nan},
  {8, nan}
]
==

[name=analytic_stats_double_column_corr_return_nan_value_numeric_1]
[required_features=ANALYTIC_FUNCTIONS,NUMERIC_TYPE]
[labels=analytic_stat_double_column]
SELECT a,
       CORR(a, NUMERIC '-942.246636872') OVER ()
FROM (
  select NUMERIC '1' a union all
  select NUMERIC '2' union all
  select NUMERIC '3' union all
  select NUMERIC '4' union all
  select NUMERIC '5' union all
  select NUMERIC '6' union all
  select NUMERIC '7' union all
  select NUMERIC '8')
order by a
--
ARRAY<STRUCT<a NUMERIC, DOUBLE>>[
  {1, nan},
  {2, nan},
  {3, nan},
  {4, nan},
  {5, nan},
  {6, nan},
  {7, nan},
  {8, nan}
]
