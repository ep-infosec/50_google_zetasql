# The "set_operations" label applies to all set operations except UNION ALL.
#
# Table1 contains a column for each primitive data type.
# This means no enums, structs and arrays.
# Each column has 8 rows of data with different repeated counts.
# 1, 1, 1, 2, 2, 3, 4, and NULL
[default global_labels=set_operations]

[load_proto_files=zetasql/testdata/test_schema.proto]
[load_proto_names=zetasql_test__.KitchenSinkPB]
[load_enum_names=zetasql_test__.TestEnum]

[prepare_database]
CREATE TABLE Table1 AS
SELECT cast(1 as int64) as primary_key, cast(true as bool) as bool_val,
       cast(-1 as int32) as int32_val, cast(-1 as int64) as int64_val,
       cast(1 as uint32) as uint32_val, cast(1 as uint64) as uint64_val,
       cast(0.1 as float) as float_val, cast(0.1 as double) as double_val,
       cast("1" as string) as str_val, CAST("1" as bytes) as bytes_val
UNION ALL
SELECT cast(2 as int64) as primary_key, cast(true as bool) as bool_val,
       cast(-1 as int32) as int32_val, cast(-1 as int64) as int64_val,
       cast(1 as uint32) as uint32_val, cast(1 as uint64) as uint64_val,
       cast(0.1 as float) as float_val, cast(0.1 as double) as double_val,
       cast("1" as string) as str_val, CAST("1" as bytes) as bytes_val
UNION ALL
SELECT cast(3 as int64) as primary_key, cast(true as bool) as bool_val,
       cast(-1 as int32) as int32_val, cast(-1 as int64) as int64_val,
       cast(1 as uint32) as uint32_val, cast(1 as uint64) as uint64_val,
       cast(0.1 as float) as float_val, cast(0.1 as double) as double_val,
       cast("1" as string) as str_val, CAST("1" as bytes) as bytes_val
UNION ALL
SELECT cast(4 as int64) as primary_key, cast(false as bool) as bool_val,
       cast(-2 as int32) as int32_val, cast(-2 as int64) as int64_val,
       cast(2 as uint32) as uint32_val, cast(2 as uint64) as uint64_val,
       cast(0.2 as float) as float_val, cast(0.2 as double) as double_val,
       cast("2" as string) as str_val, CAST("2" as bytes) as bytes_val
UNION ALL
SELECT cast(5 as int64) as primary_key, cast(false as bool) as bool_val,
       cast(-2 as int32) as int32_val, cast(-2 as int64) as int64_val,
       cast(2 as uint32) as uint32_val, cast(2 as uint64) as uint64_val,
       cast(0.2 as float) as float_val, cast(0.2 as double) as double_val,
       cast("2" as string) as str_val, CAST("2" as bytes) as bytes_val
UNION ALL
SELECT cast(6 as int64) as primary_key, cast(true as bool) as bool_val,
       cast(-3 as int32) as int32_val, cast(-3 as int64) as int64_val,
       cast(3 as uint32) as uint32_val, cast(3 as uint64) as uint64_val,
       cast(0.3 as float) as float_val, cast(0.3 as double) as double_val,
       cast("3" as string) as str_val, CAST("3" as bytes) as bytes_val
UNION ALL
SELECT cast(7 as int64) as primary_key, cast(false as bool) as bool_val,
       cast(-4 as int32) as int32_val, cast(-4 as int64) as int64_val,
       cast(4 as uint32) as uint32_val, cast(4 as uint64) as uint64_val,
       cast(0.4 as float) as float_val, cast(0.4 as double) as double_val,
       cast("4" as string) as str_val, CAST("4" as bytes) as bytes_val
UNION ALL
SELECT cast(8 as int64) as primary_key, cast(NULL as bool) as bool_val,
       cast(NULL as int32) as int32_val, cast(NULL as int64) as int64_val,
       cast(NULL as uint32) as uint32_val, cast(NULL as uint64) as uint64_val,
       cast(NULL as float) as float_val, cast(NULL as double) as double_val,
       cast(NULL as string) as str_val, CAST(NULL as bytes) as bytes_val
--
ARRAY<STRUCT<primary_key INT64,
             bool_val BOOL,
             int32_val INT32,
             int64_val INT64,
             uint32_val UINT32,
             uint64_val UINT64,
             float_val FLOAT,
             double_val DOUBLE,
             str_val STRING,
             bytes_val BYTES>>
[
  {1, true, -1, -1, 1, 1, 0.1, 0.1, "1", b"1"},
  {2, true, -1, -1, 1, 1, 0.1, 0.1, "1", b"1"},
  {3, true, -1, -1, 1, 1, 0.1, 0.1, "1", b"1"},
  {4, false, -2, -2, 2, 2, 0.2, 0.2, "2", b"2"},
  {5, false, -2, -2, 2, 2, 0.2, 0.2, "2", b"2"},
  {6, true, -3, -3, 3, 3, 0.3, 0.3, "3", b"3"},
  {7, false, -4, -4, 4, 4, 0.4, 0.4, "4", b"4"},
  {8, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL}
]
==
# Table2 contains a column for each primitive data type.
# This means no enums, structs and arrays.
# Each column has 8 rows of data with different repeated counts.
# 3, 3, 3, 2, 2, 1, 0, NULL
[prepare_database]
CREATE TABLE Table2 AS
SELECT cast(1 as int64) as primary_key, cast(true as bool) as bool_val,
       cast(-3 as int32) as int32_val, cast(-3 as int64) as int64_val,
       cast(3 as uint32) as uint32_val, cast(3 as uint64) as uint64_val,
       cast(0.3 as float) as float_val, cast(0.3 as double) as double_val,
       cast("3" as string) as str_val, CAST("3" as bytes) as bytes_val
UNION ALL
SELECT cast(2 as int64) as primary_key, cast(true as bool) as bool_val,
       cast(-3 as int32) as int32_val, cast(-3 as int64) as int64_val,
       cast(3 as uint32) as uint32_val, cast(3 as uint64) as uint64_val,
       cast(0.3 as float) as float_val, cast(0.3 as double) as double_val,
       cast("3" as string) as str_val, CAST("3" as bytes) as bytes_val
UNION ALL
SELECT cast(3 as int64) as primary_key, cast(true as bool) as bool_val,
       cast(-3 as int32) as int32_val, cast(-3 as int64) as int64_val,
       cast(3 as uint32) as uint32_val, cast(3 as uint64) as uint64_val,
       cast(0.3 as float) as float_val, cast(0.3 as double) as double_val,
       cast("3" as string) as str_val, CAST("3" as bytes) as bytes_val
UNION ALL
SELECT cast(4 as int64) as primary_key, cast(false as bool) as bool_val,
       cast(-2 as int32) as int32_val, cast(-2 as int64) as int64_val,
       cast(2 as uint32) as uint32_val, cast(2 as uint64) as uint64_val,
       cast(0.2 as float) as float_val, cast(0.2 as double) as double_val,
       cast("2" as string) as str_val, CAST("2" as bytes) as bytes_val
UNION ALL
SELECT cast(5 as int64) as primary_key, cast(false as bool) as bool_val,
       cast(-2 as int32) as int32_val, cast(-2 as int64) as int64_val,
       cast(2 as uint32) as uint32_val, cast(2 as uint64) as uint64_val,
       cast(0.2 as float) as float_val, cast(0.2 as double) as double_val,
       cast("2" as string) as str_val, CAST("2" as bytes) as bytes_val
UNION ALL
SELECT cast(6 as int64) as primary_key, cast(true as bool) as bool_val,
       cast(-1 as int32) as int32_val, cast(-1 as int64) as int64_val,
       cast(1 as uint32) as uint32_val, cast(1 as uint64) as uint64_val,
       cast(0.1 as float) as float_val, cast(0.1 as double) as double_val,
       cast("1" as string) as str_val, CAST("1" as bytes) as bytes_val
UNION ALL
SELECT cast(7 as int64) as primary_key, cast(false as bool) as bool_val,
       cast(0 as int32) as int32_val, cast(0 as int64) as int64_val,
       cast(0 as uint32) as uint32_val, cast(0 as uint64) as uint64_val,
       cast(0.0 as float) as float_val, cast(0.0 as double) as double_val,
       cast("0" as string) as str_val, CAST("0" as bytes) as bytes_val
UNION ALL
SELECT cast(8 as int64) as primary_key, cast(NULL as bool) as bool_val,
       cast(NULL as int32) as int32_val, cast(NULL as int64) as int64_val,
       cast(NULL as uint32) as uint32_val, cast(NULL as uint64) as uint64_val,
       cast(NULL as float) as float_val, cast(NULL as double) as double_val,
       cast(NULL as string) as str_val, CAST(NULL as bytes) as bytes_val
--
ARRAY<STRUCT<primary_key INT64,
             bool_val BOOL,
             int32_val INT32,
             int64_val INT64,
             uint32_val UINT32,
             uint64_val UINT64,
             float_val FLOAT,
             double_val DOUBLE,
             str_val STRING,
             bytes_val BYTES>>
[
  {1, true, -3, -3, 3, 3, 0.3, 0.3, "3", b"3"},
  {2, true, -3, -3, 3, 3, 0.3, 0.3, "3", b"3"},
  {3, true, -3, -3, 3, 3, 0.3, 0.3, "3", b"3"},
  {4, false, -2, -2, 2, 2, 0.2, 0.2, "2", b"2"},
  {5, false, -2, -2, 2, 2, 0.2, 0.2, "2", b"2"},
  {6, true, -1, -1, 1, 1, 0.1, 0.1, "1", b"1"},
  {7, false, 0, 0, 0, 0, 0, 0, "0", b"0"},
  {8, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL}
]
==
# UNION DISTINCT over same simple constants
[name=union_distinct_constants_simple_same]
SELECT 1 UNION DISTINCT SELECT 1
--
ARRAY<STRUCT<INT64>>[{1}]
==
# UNION DISTINCT over different simple constants
[name=union_distinct_constants_simple_distinct]
SELECT 1 UNION DISTINCT SELECT 1 UNION DISTINCT SELECT 2
--
ARRAY<STRUCT<INT64>>[{1}, {2}]
==
# UNION DISTINCT over multi-column same constants
[name=union_distinct_constants_complex_same]
SELECT 1, 2 UNION DISTINCT SELECT 1, 2
--
ARRAY<STRUCT<INT64, INT64>>[{1, 2}]
==
# UNION DISTINCT over multi-column different constants
[name=union_distinct_constants_complex_distinct]
SELECT 1, 0 UNION DISTINCT
SELECT 1, 1 UNION DISTINCT
SELECT 1, 1 UNION DISTINCT
SELECT 1, 2
--
ARRAY<STRUCT<INT64, INT64>>[{1, 0}, {1, 1}, {1, 2}]
==
# UNION DISTINCT over multi-column constants with null values
[name=union_distinct_constants_null]
SELECT 1, 0 UNION DISTINCT
SELECT 1, NULL UNION DISTINCT
SELECT 1, NULL UNION DISTINCT
SELECT 2, NULL UNION DISTINCT
SELECT NULL, 0 UNION DISTINCT
SELECT NULL, 0 UNION DISTINCT
SELECT NULL, 1 UNION DISTINCT
SELECT NULL, NULL UNION DISTINCT
SELECT NULL, NULL
--
ARRAY<STRUCT<INT64, INT64>>[
  {NULL, NULL},
  {NULL, 0},
  {NULL, 1},
  {1, NULL},
  {1, 0},
  {2, NULL}
]
==
# UNION DISTINCT on enum column
[name=union_distinct_datatype_enum]
SELECT CAST(0 AS `zetasql_test__.TestEnum`) as enum_val
UNION DISTINCT
SELECT CAST(0 AS `zetasql_test__.TestEnum`)
UNION DISTINCT
SELECT CAST(1 AS `zetasql_test__.TestEnum`);
--
ARRAY<STRUCT<enum_val ENUM<zetasql_test__.TestEnum>>>[
  {TESTENUM0},
  {TESTENUM1}
]
==
# UNION DISTINCT on struct column
[name=union_distinct_datatype_struct]
[required_features=V_1_2_GROUP_BY_STRUCT]
SELECT AS STRUCT 1, 2
UNION DISTINCT
SELECT AS STRUCT 1, 2
UNION DISTINCT
SELECT AS STRUCT 1, 3
--
ARRAY<STRUCT<INT64, INT64>>[{1, 2}, {1, 3}]
==
# UNION DISTINCT on differently typed columns from multiple Tables
[name=union_all_multiple_columns_multiple_tables]
SELECT bool_val, int32_val, int64_val, uint32_val, uint64_val,
       str_val, bytes_val FROM Table1
UNION DISTINCT
SELECT bool_val, int32_val, int64_val, uint32_val, uint64_val,
       str_val, bytes_val FROM Table2
UNION DISTINCT
SELECT bool_val, int32_val, int64_val, uint32_val, uint64_val,
       str_val, bytes_val FROM Table1
--
ARRAY<STRUCT<bool_val BOOL,
             int32_val INT32,
             int64_val INT64,
             uint32_val UINT32,
             uint64_val UINT64,
             str_val STRING,
             bytes_val BYTES>>
[
  {NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {false, -4, -4, 4, 4, "4", b"4"},
  {false, -2, -2, 2, 2, "2", b"2"},
  {false, 0, 0, 0, 0, "0", b"0"},
  {true, -3, -3, 3, 3, "3", b"3"},
  {true, -1, -1, 1, 1, "1", b"1"}
]
==
[name=union_all_multiple_columns_multiple_tables_float]
[test_features1=DISALLOW_GROUP_BY_FLOAT]
SELECT int32_val, float_val, double_val FROM Table1
UNION DISTINCT
SELECT int32_val, float_val, double_val FROM Table2
UNION DISTINCT
SELECT int32_val, float_val, double_val FROM Table1
--
WITH FEATURES: <none>
ARRAY<STRUCT<int32_val INT32, float_val FLOAT, double_val DOUBLE>>[
  {NULL, NULL, NULL},
  {-4, 0.4, 0.4},
  {-3, 0.3, 0.3},
  {-2, 0.2, 0.2},
  {-1, 0.1, 0.1},
  {0, 0, 0}
]
--
WITH FEATURES: DISALLOW_GROUP_BY_FLOAT
ERROR: generic::invalid_argument: Column 2 in UNION DISTINCT has type that does not support set operation comparisons: FLOAT [at 3:1]
SELECT int32_val, float_val, double_val FROM Table2
^
==
# UNION DISTINCT with mismatched types
[name=union_distinct_invalid_types]
SELECT bool_val FROM Table1
UNION DISTINCT
SELECT str_val FROM Table2
--
ERROR: generic::invalid_argument: Column 1 in UNION DISTINCT has incompatible types: BOOL, STRING [at 3:1]
SELECT str_val FROM Table2
^
==
# UNION DISTINCT on mismatched row lengths
[name=union_distinct_invalid_length]
SELECT bool_val, str_val FROM Table1
UNION DISTINCT
SELECT bool_val FROM Table2
--
ERROR: generic::invalid_argument: Queries in UNION DISTINCT have mismatched column count; query 1 has 2 columns, query 2 has 1 column [at 3:1]
SELECT bool_val FROM Table2
^
==
# @nan_01 and @nan02 are both nans with different bitwise representation.
[name=union_distinct_nan_different_bitwise_representation]
[parameters=CAST(b"\x08\x00\x10\x00\x49\x01\x00\x00\x00\x00\x00\xf0\x7f" as zetasql_test__.KitchenSinkPB).double_val as nan_01, CAST(b"\x08\x00\x10\x00\x49\x02\x00\x00\x00\x00\x00\xf0\x7f" as zetasql_test__.KitchenSinkPB).double_val as nan_02]
SELECT * FROM UNNEST([@nan_01])
UNION DISTINCT
SELECT * FROM UNNEST([@nan_02]);
--
ARRAY<STRUCT<DOUBLE>>[{nan}]
