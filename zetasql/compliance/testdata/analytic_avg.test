[prepare_database]
CREATE TABLE TestTable AS
SELECT cast(1 as int64) as row_id,
       cast(null as bool) as bool_val,
       cast(null as int64) as int64_val,
       cast(null as uint64) as uint64_val,
       cast(null as double) as double_val UNION ALL
  SELECT 2,  true,  2,    3,    1.5  UNION ALL
  SELECT 3,  false, 1,    6,    1.5  UNION ALL
  SELECT 4,  true,  null, 2,    2.5  UNION ALL
  SELECT 5,  false, 1,    null, 3.5  UNION ALL
  SELECT 6,  true,  2,    2,    null UNION ALL
  SELECT 7,  false, 1,    5,    -0.5 UNION ALL
  SELECT 8,  true,  4,    2,    -1.5 UNION ALL
  SELECT 9,  false, 2,    3,    1.5  UNION ALL
  SELECT 10, true,  3,    1,    2.5
--
ARRAY<STRUCT<row_id INT64,
             bool_val BOOL,
             int64_val INT64,
             uint64_val UINT64,
             double_val DOUBLE>>
[
  {1, NULL, NULL, NULL, NULL},
  {2, true, 2, 3, 1.5},
  {3, false, 1, 6, 1.5},
  {4, true, NULL, 2, 2.5},
  {5, false, 1, NULL, 3.5},
  {6, true, 2, 2, NULL},
  {7, false, 1, 5, -0.5},
  {8, true, 4, 2, -1.5},
  {9, false, 2, 3, 1.5},
  {10, true, 3, 1, 2.5}
]
==

[default required_features=ANALYTIC_FUNCTIONS]
[name=analytic_avg]
[labels=analytic_avg_over_rows_between_unbounded_and_preceding,analytic_avg_over_rows_between_preceding_and_following,analytic_avg_over_range_between_current_and_following]
SELECT bool_val, row_id, int64_val,
       AVG(int64_val) OVER (PARTITION BY bool_val),
       AVG(int64_val) OVER (ORDER BY row_id
                            ROWS BETWEEN UNBOUNDED PRECEDING AND 2 PRECEDING),
       AVG(int64_val) OVER (PARTITION BY bool_val ORDER BY row_id),
       AVG(uint64_val) OVER (ORDER BY row_id
                             ROWS BETWEEN 2 PRECEDING AND 1 FOLLOWING),
       AVG(double_val) OVER (PARTITION BY bool_val
                             ORDER BY row_id
                             RANGE BETWEEN CURRENT ROW AND 2 FOLLOWING)
FROM TestTable
--
ARRAY<STRUCT<bool_val BOOL,
             row_id INT64,
             int64_val INT64,
             DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE>>
[
  {NULL, 1, NULL, NULL, NULL, NULL, 3, NULL},
  {false, 3, 1, 1.25, NULL, 1, 3.6666666666666665, 2.5},
  {false, 5, 1, 1.25, 1.5, 1, 3.3333333333333335, 1.5},
  {false, 7, 1, 1.25, 1.3333333333333333, 1, 3, 0.5},
  {false, 9, 2, 1.25, 1.4, 1.25, 2.75, 1.5},
  {true, 2, 2, 2.75, NULL, 2, 4.5, 2},
  {true, 4, NULL, 2.75, 2, 2, 3.6666666666666665, 2.5},
  {true, 6, 2, 2.75, 1.5, 2, 3, -1.5},
  {true, 8, 4, 2.75, 1.5, 2.6666666666666665, 3, 0.5},
  {true, 10, 3, 2.75, 1.8333333333333333, 2.75, 2, 2.5}
]
==

# The same as above but with all columns converted to NUMERIC.
[required_features=ANALYTIC_FUNCTIONS,NUMERIC_TYPE]
[name=analytic_avg_numeric]
[labels=analytic_avg_over_rows_between_unbounded_and_preceding,analytic_avg_over_rows_between_preceding_and_following,analytic_avg_over_range_between_current_and_following]
SELECT bool_val, row_id, numeric_val1,
       AVG(numeric_val1) OVER (PARTITION BY bool_val),
       AVG(numeric_val1) OVER (ORDER BY row_id
                               ROWS BETWEEN UNBOUNDED PRECEDING AND 2 PRECEDING),
       AVG(numeric_val1) OVER (PARTITION BY bool_val ORDER BY row_id),
       AVG(numeric_val2) OVER (ORDER BY row_id
                               ROWS BETWEEN 2 PRECEDING AND 1 FOLLOWING),
       AVG(numeric_val3) OVER (PARTITION BY bool_val
                               ORDER BY row_id
                               RANGE BETWEEN CURRENT ROW AND 2 FOLLOWING)
FROM (SELECT row_id,
             bool_val,
             cast(int64_val as NUMERIC) as numeric_val1,
             cast(uint64_val as NUMERIC) as numeric_val2,
             cast(double_val as NUMERIC) as numeric_val3
      FROM TestTable)
--
ARRAY<STRUCT<bool_val BOOL,
             row_id INT64,
             numeric_val1 NUMERIC,
             NUMERIC,
             NUMERIC,
             NUMERIC,
             NUMERIC,
             NUMERIC>>
[
  {NULL, 1, NULL, NULL, NULL, NULL, 3, NULL},
  {false, 3, 1, 1.25, NULL, 1, 3.666666667, 2.5},
  {false, 5, 1, 1.25, 1.5, 1, 3.333333333, 1.5},
  {false, 7, 1, 1.25, 1.333333333, 1, 3, 0.5},
  {false, 9, 2, 1.25, 1.4, 1.25, 2.75, 1.5},
  {true, 2, 2, 2.75, NULL, 2, 4.5, 2},
  {true, 4, NULL, 2.75, 2, 2, 3.666666667, 2.5},
  {true, 6, 2, 2.75, 1.5, 2, 3, -1.5},
  {true, 8, 4, 2.75, 1.5, 2.666666667, 3, 0.5},
  {true, 10, 3, 2.75, 1.833333333, 2.75, 2, 2.5}
]
==

# According to the compliance test for the aggregate AVG, AVG can produce either
# INF or NAN depending on the algorithm it uses.
# TODO: See compliance test 'aggregate_avg_6'.  Examine the ZetaSQL
# spec for AVG.  Do the compliance tests reflect the spec?  Is the spec clear
# on how INFs and NaNs behave for AVG?
[name=analytic_avg_inf]
[labels=analytic_avg_over_rows_between_preceding_and_current]
[parameters=cast("+inf" as double) as pos_inf,
            cast("-inf" as double) as neg_inf]
SELECT row_id, val, IS_INF(avg_val) OR IS_NAN(avg_val)
FROM (SELECT row_id, val,
             AVG(val) OVER (ORDER BY row_id
                            ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) avg_val
      FROM (SELECT 1 row_id, 1.0 val UNION ALL
            SELECT 2, @pos_inf UNION ALL
            SELECT 3, @neg_inf UNION ALL
            SELECT 4, @neg_inf UNION ALL
            SELECT 5, @pos_inf UNION ALL
            SELECT 6, @pos_inf))
--
ARRAY<STRUCT<row_id INT64, val DOUBLE, BOOL>>[
  {2, inf, true},
  {4, -inf, true},
  {6, inf, true},
  {1, 1, false},
  {3, -inf, true},
  {5, inf, true}
]
==

[name=analytic_avg_nan_1]
[labels=analytic_avg_over_rows_between_preceding_and_following,analytic_avg_over_rows_between_preceding_and_current]
[parameters=cast("NaN" as double) as nan]
SELECT row_id, val,
       AVG(val) OVER (ORDER BY row_id
                      ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING),
       AVG(val) OVER (ORDER BY row_id
                      ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)
FROM (SELECT 1 row_id, cast(1 as int64) val UNION ALL
      SELECT 2, @nan  UNION ALL
      SELECT 3, 2     UNION ALL
      SELECT 4, @nan  UNION ALL
      SELECT 5, @nan  UNION ALL
      SELECT 6, @nan  UNION ALL
      SELECT 7, @nan  UNION ALL
      SELECT 8, @nan  UNION ALL
      SELECT 9, @nan  UNION ALL
      SELECT 10, @nan UNION ALL
      SELECT 11, 1)
--
ARRAY<STRUCT<row_id INT64, val DOUBLE, DOUBLE, DOUBLE>>[
  {1, 1, nan, 1},
  {2, nan, nan, nan},
  {3, 2, nan, nan},
  {4, nan, nan, nan},
  {5, nan, nan, nan},
  {6, nan, nan, nan},
  {7, nan, nan, nan},
  {8, nan, nan, nan},
  {9, nan, nan, nan},
  {10, nan, nan, nan},
  {11, 1, nan, nan}
]
==


# An implementation can have a wrong answer for the third row if it computes the
# average based on the result for the second row rather than doing the
# computation over the entire window from scratch.
[name=analytic_avg_possible_error_by_subtraction_1]
[labels=analytic_avg_over_rows_between_preceding_and_current]
[parameters=cast("+inf" as double) as pos_inf]
SELECT row_id, val, IS_INF(avg_val) OR IS_NAN(avg_val) FROM
  (SELECT row_id, val,
          AVG(val) OVER (ORDER BY row_id
                         ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) avg_val
   FROM (SELECT 1 row_id, @pos_inf val UNION ALL
         SELECT 2, 2 UNION ALL
         SELECT 3, 3))
--
ARRAY<STRUCT<row_id INT64, val DOUBLE, BOOL>>[
  {2, 2, true},
  {1, inf, true},
  {3, 3, false}
]
==

# Similar to the previous one, we will have an incorrect result if the algorithm
# is not chosen correctly.
[name=analytic_avg_possible_error_by_subtraction_2]
[labels=analytic_avg_over_rows_between_preceding_and_current]
[parameters=cast("-inf" as double) as neg_inf]
SELECT row_id, val, IS_INF(avg_val) OR IS_NAN(avg_val) FROM
  (SELECT row_id, val,
          AVG(val) OVER (ORDER BY row_id
                         ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) avg_val
   FROM (SELECT 1 row_id, @neg_inf val UNION ALL
         SELECT 2, 2 UNION ALL
         SELECT 3, 3))
--
ARRAY<STRUCT<row_id INT64, val DOUBLE, BOOL>>[
  {2, 2, true},
  {1, -inf, true},
  {3, 3, false}
]
==

# Similar to the previous one, we will have an incorrect result if the algorithm
# is not chosen correctly.
[name=analytic_avg_possible_error_by_subtraction_3]
[labels=analytic_avg_over_rows_between_preceding_and_current]
[parameters=cast("NaN" as double) as nan]
SELECT row_id, val,
       AVG(val) OVER (ORDER BY row_id
                      ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)
FROM (SELECT 1 row_id, @nan val UNION ALL
      SELECT 2, 2 UNION ALL
      SELECT 3, 3)
--
ARRAY<STRUCT<row_id INT64, val DOUBLE, DOUBLE>>[
  {1, nan, nan},
  {2, 2, nan},
  {3, 3, 2.5}
]
==

[name=analytic_avg_possible_error_by_subtraction_4]
[labels=analytic_avg_over_rows_between_preceding_and_current]
[parameters=1.79769e+308 as max_val]
SELECT row_id, val,
       AVG(val) OVER (ORDER BY row_id
                      ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)
FROM (SELECT 1 row_id, @max_val val UNION ALL
      SELECT 2, 2 UNION ALL
      SELECT 3, 3)
--
ARRAY<STRUCT<row_id INT64, val DOUBLE, DOUBLE>>[
  {1, 1.79769e+308, 1.79769e+308},
  {2, 2, 8.98845e+307},
  {3, 3, 2.5}
]
==

[name=analytic_avg_possible_error_by_subtraction_5]
[labels=analytic_avg_over_rows_between_preceding_and_current]
[parameters=-1.79769e+308 as min_val]
SELECT row_id, val,
       AVG(val) OVER (ORDER BY row_id
                      ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)
FROM (SELECT 1 row_id, @min_val val UNION ALL
      SELECT 2, 2 UNION ALL
      SELECT 3, 3)
--
ARRAY<STRUCT<row_id INT64, val DOUBLE, DOUBLE>>[
  {1, -1.79769e+308, -1.79769e+308},
  {2, 2, -8.98845e+307},
  {3, 3, 2.5}
]
==

[name=analytic_moving_avg_numeric_no_overflow_1]
[required_features=ANALYTIC_FUNCTIONS,NUMERIC_TYPE]
[labels=analytic_avg_over_rows_between_following_and_following]
[parameters="99999999999999999999999999999.999999999" as max_val]
SELECT row_id, val, AVG(val) OVER (ORDER BY row_id
                                   RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING)
FROM (SELECT 1 row_id, CAST(@max_val AS NUMERIC) val UNION ALL
      SELECT 2, CAST(@max_val AS NUMERIC) UNION ALL
      SELECT 3, CAST(@max_val AS NUMERIC) UNION ALL
      SELECT 4, CAST(@max_val AS NUMERIC))
--
ARRAY<STRUCT<row_id INT64, val NUMERIC, NUMERIC>>[
  {
    1,
    99999999999999999999999999999.999999999,
    99999999999999999999999999999.999999999
  },
  {
    2,
    99999999999999999999999999999.999999999,
    99999999999999999999999999999.999999999
  },
  {
    3,
    99999999999999999999999999999.999999999,
    99999999999999999999999999999.999999999
  },
  {
    4,
    99999999999999999999999999999.999999999,
    99999999999999999999999999999.999999999
  }
]
==

[name=analytic_moving_avg_numeric_no_overflow_2]
[required_features=ANALYTIC_FUNCTIONS,NUMERIC_TYPE]
[labels=analytic_avg_over_rows_between_following_and_following]
[parameters="-99999999999999999999999999999.999999999" as min_val]
SELECT row_id, val, AVG(val) OVER (ORDER BY row_id
                                   RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING)
FROM (SELECT 1 row_id, CAST(@min_val AS NUMERIC) val UNION ALL
      SELECT 2, CAST(@min_val AS NUMERIC) UNION ALL
      SELECT 3, CAST(@min_val AS NUMERIC) UNION ALL
      SELECT 4, CAST(@min_val AS NUMERIC))
--
ARRAY<STRUCT<row_id INT64, val NUMERIC, NUMERIC>>[
  {
    1,
    -99999999999999999999999999999.999999999,
    -99999999999999999999999999999.999999999
  },
  {
    2,
    -99999999999999999999999999999.999999999,
    -99999999999999999999999999999.999999999
  },
  {
    3,
    -99999999999999999999999999999.999999999,
    -99999999999999999999999999999.999999999
  },
  {
    4,
    -99999999999999999999999999999.999999999,
    -99999999999999999999999999999.999999999
  }
]
==

[name=analytic_moving_avg_numeric_no_overflow_3]
[required_features=ANALYTIC_FUNCTIONS,NUMERIC_TYPE]
[labels=analytic_avg_over_rows_between_following_and_following]
[parameters="99999999999999999999999999999.999999999" as max_val,
            "-99999999999999999999999999999.999999999" as min_val]
SELECT row_id, val, AVG(val) OVER (ORDER BY row_id
                                   RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING)
FROM (SELECT 1 row_id, CAST(@max_val AS NUMERIC) val UNION ALL
      SELECT 2, CAST(@min_val AS NUMERIC) UNION ALL
      SELECT 3, CAST(@min_val AS NUMERIC) UNION ALL
      SELECT 4, CAST(@min_val AS NUMERIC) UNION ALL
      SELECT 5, CAST(@max_val AS NUMERIC) UNION ALL
      SELECT 6, CAST(@max_val AS NUMERIC) UNION ALL
      SELECT 7, CAST(@max_val AS NUMERIC) UNION ALL
      SELECT 8, CAST(@min_val AS NUMERIC))
--
ARRAY<STRUCT<row_id INT64, val NUMERIC, NUMERIC>>[
  {
    1,
    99999999999999999999999999999.999999999,
    0
  },
  {
    2,
    -99999999999999999999999999999.999999999,
    -33333333333333333333333333333.333333333
  },
  {
    3,
    -99999999999999999999999999999.999999999,
    -99999999999999999999999999999.999999999
  },
  {
    4,
    -99999999999999999999999999999.999999999,
    -33333333333333333333333333333.333333333
  },
  {
    5,
    99999999999999999999999999999.999999999,
    33333333333333333333333333333.333333333
  },
  {
    6,
    99999999999999999999999999999.999999999,
    99999999999999999999999999999.999999999
  },
  {
    7,
    99999999999999999999999999999.999999999,
    33333333333333333333333333333.333333333
  },
  {
    8,
    -99999999999999999999999999999.999999999,
    0
  }
]
==

[name=analytic_avg_with_unbounded_window_1]
[labels=analytic_avg_with_unbounded_window]
SELECT bool_val, row_id, int64_val, uint64_val, double_val,
       AVG(int64_val) OVER (PARTITION BY bool_val),
       AVG(uint64_val) OVER (PARTITION BY bool_val),
       AVG(uint64_val) OVER (),
       AVG(double_val) OVER ()
FROM TestTable
--
ARRAY<STRUCT<bool_val BOOL,
             row_id INT64,
             int64_val INT64,
             uint64_val UINT64,
             double_val DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE>>
[
  {NULL, 1, NULL, NULL, NULL, NULL, NULL, 3, 1.375},
  {false, 5, 1, NULL, 3.5, 1.25, 4.666666666666667, 3, 1.375},
  {false, 3, 1, 6, 1.5, 1.25, 4.666666666666667, 3, 1.375},
  {false, 9, 2, 3, 1.5, 1.25, 4.666666666666667, 3, 1.375},
  {false, 7, 1, 5, -0.5, 1.25, 4.666666666666667, 3, 1.375},
  {true, 4, NULL, 2, 2.5, 2.75, 2, 3, 1.375},
  {true, 2, 2, 3, 1.5, 2.75, 2, 3, 1.375},
  {true, 10, 3, 1, 2.5, 2.75, 2, 3, 1.375},
  {true, 8, 4, 2, -1.5, 2.75, 2, 3, 1.375},
  {true, 6, 2, 2, NULL, 2.75, 2, 3, 1.375}
]
==

# The same as above but with all columns converted to NUMERIC.
[required_features=ANALYTIC_FUNCTIONS,NUMERIC_TYPE]
[name=analytic_avg_numeric_with_unbounded_window_1]
[labels=analytic_avg_with_unbounded_window]
SELECT bool_val, row_id, numeric_val1, numeric_val2, numeric_val3,
       AVG(numeric_val1) OVER (PARTITION BY bool_val),
       AVG(numeric_val2) OVER (PARTITION BY bool_val),
       AVG(numeric_val2) OVER (),
       AVG(numeric_val3) OVER ()
FROM (SELECT row_id,
             bool_val,
             cast(int64_val as NUMERIC) as numeric_val1,
             cast(uint64_val as NUMERIC) as numeric_val2,
             cast(double_val as NUMERIC) as numeric_val3
      FROM TestTable)
--
ARRAY<STRUCT<bool_val BOOL,
             row_id INT64,
             numeric_val1 NUMERIC,
             numeric_val2 NUMERIC,
             numeric_val3 NUMERIC,
             NUMERIC,
             NUMERIC,
             NUMERIC,
             NUMERIC>>
[
  {NULL, 1, NULL, NULL, NULL, NULL, NULL, 3, 1.375},
  {false, 9, 2, 3, 1.5, 1.25, 4.666666667, 3, 1.375},
  {false, 5, 1, NULL, 3.5, 1.25, 4.666666667, 3, 1.375},
  {false, 7, 1, 5, -0.5, 1.25, 4.666666667, 3, 1.375},
  {false, 3, 1, 6, 1.5, 1.25, 4.666666667, 3, 1.375},
  {true, 8, 4, 2, -1.5, 2.75, 2, 3, 1.375},
  {true, 4, NULL, 2, 2.5, 2.75, 2, 3, 1.375},
  {true, 10, 3, 1, 2.5, 2.75, 2, 3, 1.375},
  {true, 6, 2, 2, NULL, 2.75, 2, 3, 1.375},
  {true, 2, 2, 3, 1.5, 2.75, 2, 3, 1.375}
]
==

# When partitioning by int64_val, some of the partitions now take the AVG
# over all NULL values.
[name=analytic_avg_with_unbounded_window_2]
[labels=analytic_avg_with_unbounded_window]
SELECT bool_val, row_id, int64_val, uint64_val, double_val,
       AVG(int64_val) OVER (PARTITION BY int64_val),
       AVG(uint64_val) OVER (PARTITION BY int64_val),
       AVG(double_val) OVER (PARTITION BY int64_val)
FROM TestTable
--
ARRAY<STRUCT<bool_val BOOL,
             row_id INT64,
             int64_val INT64,
             uint64_val UINT64,
             double_val DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE>>
[
  {true, 4, NULL, 2, 2.5, NULL, 2, 2.5},
  {NULL, 1, NULL, NULL, NULL, NULL, 2, 2.5},
  {false, 3, 1, 6, 1.5, 1, 5.5, 1.5},
  {false, 5, 1, NULL, 3.5, 1, 5.5, 1.5},
  {false, 7, 1, 5, -0.5, 1, 5.5, 1.5},
  {true, 6, 2, 2, NULL, 2, 2.6666666666666665, 1.5},
  {false, 9, 2, 3, 1.5, 2, 2.6666666666666665, 1.5},
  {true, 2, 2, 3, 1.5, 2, 2.6666666666666665, 1.5},
  {true, 10, 3, 1, 2.5, 3, 1, 2.5},
  {true, 8, 4, 2, -1.5, 4, 2, -1.5}
]
==

# The ORDER BY row_id is unique, so RANGE and ROWS behave the same.
[name=analytic_avg_with_cumulative_window_1]
[labels=analytic_avg_with_cumulative_window]
SELECT bool_val, row_id, int64_val, uint64_val, double_val,
       AVG(int64_val) OVER (PARTITION BY bool_val ORDER BY row_id
                            RANGE BETWEEN UNBOUNDED PRECEDING
                                      AND CURRENT ROW),
       AVG(int64_val) OVER (PARTITION BY bool_val ORDER BY row_id
                            ROWS BETWEEN UNBOUNDED PRECEDING
                                     AND CURRENT ROW),
       AVG(uint64_val) OVER (PARTITION BY bool_val ORDER BY row_id),
       AVG(double_val) OVER (ORDER BY row_id
                             RANGE BETWEEN UNBOUNDED PRECEDING
                                       AND CURRENT ROW),
       AVG(double_val) OVER (ORDER BY row_id
                             ROWS BETWEEN UNBOUNDED PRECEDING
                                      AND CURRENT ROW)
FROM TestTable
--
ARRAY<STRUCT<bool_val BOOL,
             row_id INT64,
             int64_val INT64,
             uint64_val UINT64,
             double_val DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE>>
[{NULL, 1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
 {true, 2, 2, 3, 1.5, 2, 2, 3, 1.5, 1.5},
 {false, 3, 1, 6, 1.5, 1, 1, 6, 1.5, 1.5},
 {true, 4, NULL, 2, 2.5, 2, 2, 2.5, 1.8333333333333333, 1.8333333333333333},
 {false, 5, 1, NULL, 3.5, 1, 1, 6, 2.25, 2.25},
 {true, 6, 2, 2, NULL, 2, 2, 2.3333333333333335, 2.25, 2.25},
 {false, 7, 1, 5, -0.5, 1, 1, 5.5, 1.7, 1.7},
 {true,
  8,
  4,
  2,
  -1.5,
  2.6666666666666665,
  2.6666666666666665,
  2.25,
  1.1666666666666665,
  1.1666666666666665},
 {false,
  9,
  2,
  3,
  1.5,
  1.25,
  1.25,
  4.666666666666667,
  1.2142857142857142,
  1.2142857142857142},
 {true, 10, 3, 1, 2.5, 2.75, 2.75, 2, 1.375, 1.375}]
==

# This test does ORDER BY with 'row_id / 2', so the ORDER BY values are no
# longer unique and therefore ROWS and RANGE behave differently.
[name=analytic_avg_with_cumulative_window_range_2]
[labels=analytic_avg_with_cumulative_window]
SELECT bool_val, row_id, int64_val, uint64_val, double_val,
       AVG(int64_val) OVER (PARTITION BY bool_val ORDER BY row_id / 2
                            RANGE BETWEEN UNBOUNDED PRECEDING
                                      AND CURRENT ROW),
       AVG(uint64_val) OVER (PARTITION BY bool_val ORDER BY row_id / 2
                             RANGE BETWEEN UNBOUNDED PRECEDING
                                       AND CURRENT ROW),
       AVG(double_val) OVER (ORDER BY row_id / 2
                             RANGE BETWEEN UNBOUNDED PRECEDING
                                       AND CURRENT ROW)
FROM TestTable
--
ARRAY<STRUCT<bool_val BOOL,
             row_id INT64,
             int64_val INT64,
             uint64_val UINT64,
             double_val DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE>>
[
  {NULL, 1, NULL, NULL, NULL, NULL, NULL, NULL},
  {true, 2, 2, 3, 1.5, 2, 3, 1.5},
  {false, 3, 1, 6, 1.5, 1, 6, 1.5},
  {true, 4, NULL, 2, 2.5, 2, 2.5, 1.8333333333333333},
  {false, 5, 1, NULL, 3.5, 1, 6, 2.25},
  {true, 6, 2, 2, NULL, 2, 2.3333333333333335, 2.25},
  {false, 7, 1, 5, -0.5, 1, 5.5, 1.7},
  {true, 8, 4, 2, -1.5, 2.6666666666666665, 2.25, 1.1666666666666665},
  {false, 9, 2, 3, 1.5, 1.25, 4.666666666666667, 1.2142857142857142},
  {true, 10, 3, 1, 2.5, 2.75, 2, 1.375}
]
==

# Same test as previous, but with ROWS instead of RANGE.
[name=analytic_avg_with_cumulative_window_rows_2]
[labels=analytic_avg_with_cumulative_window]
SELECT bool_val, row_id, int64_val, uint64_val, double_val,
       AVG(int64_val) OVER (PARTITION BY bool_val ORDER BY row_id / 2
                            ROWS BETWEEN UNBOUNDED PRECEDING
                                     AND CURRENT ROW),
       AVG(uint64_val) OVER (PARTITION BY bool_val ORDER BY row_id / 2
                             ROWS BETWEEN UNBOUNDED PRECEDING
                                      AND CURRENT ROW),
       AVG(double_val) OVER (ORDER BY row_id / 2
                             ROWS BETWEEN UNBOUNDED PRECEDING
                                      AND CURRENT ROW)
FROM TestTable
--
ARRAY<STRUCT<bool_val BOOL,
             row_id INT64,
             int64_val INT64,
             uint64_val UINT64,
             double_val DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE>>
[
  {NULL, 1, NULL, NULL, NULL, NULL, NULL, NULL},
  {true, 2, 2, 3, 1.5, 2, 3, 1.5},
  {false, 3, 1, 6, 1.5, 1, 6, 1.5},
  {true, 4, NULL, 2, 2.5, 2, 2.5, 1.8333333333333333},
  {false, 5, 1, NULL, 3.5, 1, 6, 2.25},
  {true, 6, 2, 2, NULL, 2, 2.3333333333333335, 2.25},
  {false, 7, 1, 5, -0.5, 1, 5.5, 1.7},
  {true, 8, 4, 2, -1.5, 2.6666666666666665, 2.25, 1.1666666666666665},
  {false, 9, 2, 3, 1.5, 1.25, 4.666666666666667, 1.2142857142857142},
  {true, 10, 3, 1, 2.5, 2.75, 2, 1.375}
]
==

[name=analytic_avg_distinct_1]
[labels=analytic_avg_distinct]
SELECT bool_val, row_id, int64_val, uint64_val, double_val,
       AVG(DISTINCT int64_val) OVER (PARTITION BY bool_val),
       AVG(DISTINCT uint64_val) OVER (PARTITION BY bool_val),
       AVG(DISTINCT double_val) OVER ()
FROM TestTable
--
ARRAY<STRUCT<bool_val BOOL,
             row_id INT64,
             int64_val INT64,
             uint64_val UINT64,
             double_val DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE>>
[
  {NULL, 1, NULL, NULL, NULL, NULL, NULL, 1.1},
  {false, 5, 1, NULL, 3.5, 1.5, 4.666666666666667, 1.1},
  {false, 3, 1, 6, 1.5, 1.5, 4.666666666666667, 1.1},
  {false, 9, 2, 3, 1.5, 1.5, 4.666666666666667, 1.1},
  {false, 7, 1, 5, -0.5, 1.5, 4.666666666666667, 1.1},
  {true, 4, NULL, 2, 2.5, 3, 2, 1.1},
  {true, 2, 2, 3, 1.5, 3, 2, 1.1},
  {true, 10, 3, 1, 2.5, 3, 2, 1.1},
  {true, 8, 4, 2, -1.5, 3, 2, 1.1},
  {true, 6, 2, 2, NULL, 3, 2, 1.1}
]
==

[name=analytic_avg_distinct_numeric_no_overflow_1]
[required_features=ANALYTIC_FUNCTIONS,NUMERIC_TYPE]
[parameters="-99999999999999999999999999999.999999999" as min_val]
SELECT row_id, val, AVG(DISTINCT val) OVER ()
FROM (SELECT 1 row_id, CAST(NULL as NUMERIC) val UNION ALL
      SELECT 2, 0                         UNION ALL
      SELECT 3, NULL                      UNION ALL
      SELECT 4, CAST(@min_val AS NUMERIC) UNION ALL
      SELECT 5, -2                        UNION ALL
      SELECT 6, 1.999999999               UNION ALL
      SELECT 7, CAST(@min_val AS NUMERIC) UNION ALL
      SELECT 8, 2)
--
ARRAY<STRUCT<row_id INT64, val NUMERIC, NUMERIC>>[
  {
    2,
    0,
    -19999999999999999999999999999.6
  },
  {
    4,
    -99999999999999999999999999999.999999999,
    -19999999999999999999999999999.6
  },
  {
    6,
    1.999999999,
    -19999999999999999999999999999.6
  },
  {
    8,
    2,
    -19999999999999999999999999999.6
  },
  {
    1,
    NULL,
    -19999999999999999999999999999.6
  },
  {
    3,
    NULL,
    -19999999999999999999999999999.6
  },
  {
    5,
    -2,
    -19999999999999999999999999999.6
  },
  {
    7,
    -99999999999999999999999999999.999999999,
    -19999999999999999999999999999.6
  }
]
==

[name=analytic_avg_trailing_rows_moving_avg_1]
[labels=analytic_avg_over_rows_between_unbounded_and_preceding]
[parameters=9223372036854775807 as int64_max]
SELECT int64_val,
       AVG(int64_val) OVER (ORDER BY row_id
                            ROWS BETWEEN 0 PRECEDING AND CURRENT ROW),
       AVG(int64_val) OVER (ORDER BY row_id
                            ROWS BETWEEN 1 PRECEDING AND CURRENT ROW),
       AVG(int64_val) OVER (ORDER BY row_id
                            ROWS BETWEEN 2 PRECEDING AND CURRENT ROW),
       AVG(int64_val) OVER (ORDER BY row_id
                            ROWS BETWEEN 3 PRECEDING AND CURRENT ROW),
       AVG(int64_val) OVER (ORDER BY row_id
                            ROWS BETWEEN @int64_max PRECEDING AND CURRENT ROW)
FROM TestTable
--
ARRAY<STRUCT<int64_val INT64, DOUBLE, DOUBLE, DOUBLE, DOUBLE, DOUBLE>>[
  {NULL, NULL, NULL, NULL, NULL, NULL},
  {2, 2, 2, 2, 2, 2},
  {1, 1, 1.5, 1.5, 1.5, 1.5},
  {NULL, NULL, 1, 1.5, 1.5, 1.5},
  {1, 1, 1, 1, 1.3333333333333333, 1.3333333333333333},
  {2, 2, 1.5, 1.5, 1.3333333333333333, 1.5},
  {1, 1, 1.5, 1.3333333333333333, 1.3333333333333333, 1.4},
  {4, 4, 2.5, 2.3333333333333335, 2, 1.8333333333333333},
  {2, 2, 3, 2.3333333333333335, 2.25, 1.857142857142857},
  {3, 3, 2.5, 3, 2.5, 1.9999999999999998}
]
==

[name=analytic_avg_trailing_rows_moving_avg_2]
[labels=analytic_avg_over_rows_between_unbounded_and_preceding]
[parameters=-9223372036854775808 as int64_min]
SELECT int64_val,
       AVG(int64_val) OVER (ORDER BY row_id
                            ROWS BETWEEN @int64_min PRECEDING AND CURRENT ROW)
FROM TestTable
--
ERROR: generic::out_of_range: Window frame offset for PRECEDING or FOLLOWING must be non-negative, but was -9223372036854775808
==

[name=analytic_avg_trailing_rows_moving_avg_3]
[labels=analytic_avg_over_rows_between_unbounded_and_preceding]
[parameters=-1 as offset_preceding]
SELECT int64_val,
       AVG(int64_val) OVER (ORDER BY row_id
                            ROWS BETWEEN @offset_preceding PRECEDING
                                     AND CURRENT ROW)
FROM TestTable
--
ERROR: generic::out_of_range: Window frame offset for PRECEDING or FOLLOWING must be non-negative, but was -1
==

# Tests for RANGE-based trailing moving AVG.
[name=analytic_avg_trailing_range_moving_avg_1]
[labels=analytic_avg_over_range_between_preceding_and_current]
select row_id, val,
       avg(val) over (order by row_id
                      RANGE BETWEEN 1 PRECEDING
                                AND CURRENT ROW)
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 4, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, NULL},
  {2, 2, 2},
  {3, 3, 2.5},
  {4, 4, 3.5}
]
==

# With a single ordering group.
[name=analytic_avg_trailing_range_moving_avg_2]
[labels=analytic_avg_over_range_between_preceding_and_current]
select row_id, val,
       avg(val) over (order by row_id RANGE 1 PRECEDING)
FROM (SELECT 1 row_id, 1 val UNION ALL
      SELECT 1, 3            UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 1, 4            UNION ALL
      SELECT 1, 2            UNION ALL
      SELECT 1, 5)
order by row_id, val
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, 3},
  {1, 1, 3},
  {1, 2, 3},
  {1, 3, 3},
  {1, 4, 3},
  {1, 5, 3}
]
==

[name=analytic_avg_trailing_range_moving_avg_3a]
[labels=analytic_avg_over_range_between_preceding_and_current]
select row_id, val,
       avg(val) over (order by row_id DESC RANGE 1 PRECEDING)
FROM (SELECT 1 row_id, NULL val UNION ALL
      SELECT 1, NULL            UNION ALL
      SELECT 1, NULL            UNION ALL
      SELECT 2, NULL            UNION ALL
      SELECT 2, 10              UNION ALL
      SELECT 2, 20              UNION ALL
      SELECT 3, NULL            UNION ALL
      SELECT 4, NULL            UNION ALL
      SELECT 4, 40              UNION ALL
      SELECT 5, -40             UNION ALL
      SELECT 6, 100)
order by row_id, val
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {1, NULL, 15},
  {1, NULL, 15},
  {1, NULL, 15},
  {2, NULL, 15},
  {2, 10, 15},
  {2, 20, 15},
  {3, NULL, 40},
  {4, NULL, 0},
  {4, 40, 0},
  {5, -40, 30},
  {6, 100, 100}
]
==

# Same as previous, but aggregating INT32 values.
[name=analytic_avg_trailing_range_moving_avg_3b]
[labels=analytic_avg_over_range_between_preceding_and_current]
select row_id, val,
       avg(val) over (order by row_id DESC RANGE 1 PRECEDING)
FROM (SELECT 1 row_id, NULL val UNION ALL
      SELECT 1, NULL            UNION ALL
      SELECT 1, NULL            UNION ALL
      SELECT 2, NULL            UNION ALL
      SELECT 2, 10              UNION ALL
      SELECT 2, 20              UNION ALL
      SELECT 3, NULL            UNION ALL
      SELECT 4, NULL            UNION ALL
      SELECT 4, 40              UNION ALL
      SELECT 5, -40             UNION ALL
      SELECT 6, cast(100 as INT32))
order by row_id, val
--
ARRAY<STRUCT<row_id INT64, val INT32, DOUBLE>>[
  {1, NULL, 15},
  {1, NULL, 15},
  {1, NULL, 15},
  {2, NULL, 15},
  {2, 10, 15},
  {2, 20, 15},
  {3, NULL, 40},
  {4, NULL, 0},
  {4, 40, 0},
  {5, -40, 30},
  {6, 100, 100}
]
==

# Mostly the same as previous (without the negative 'val'),
# but aggregating UINT64 values.
[name=analytic_avg_trailing_range_moving_avg_3c]
[labels=analytic_avg_over_range_between_preceding_and_current]
select row_id, val,
       avg(val) over (order by row_id DESC RANGE 1 PRECEDING)
FROM (SELECT 1 row_id, NULL val UNION ALL
      SELECT 1, NULL            UNION ALL
      SELECT 1, NULL            UNION ALL
      SELECT 2, NULL            UNION ALL
      SELECT 2, 10              UNION ALL
      SELECT 2, 20              UNION ALL
      SELECT 3, NULL            UNION ALL
      SELECT 4, NULL            UNION ALL
      SELECT 4, 40              UNION ALL
      SELECT 5, 40              UNION ALL
      SELECT 6, cast(100 as UINT64))
order by row_id, val
--
ARRAY<STRUCT<row_id INT64, val UINT64, DOUBLE>>[
  {1, NULL, 15},
  {1, NULL, 15},
  {1, NULL, 15},
  {2, NULL, 15},
  {2, 10, 15},
  {2, 20, 15},
  {3, NULL, 40},
  {4, NULL, 40},
  {4, 40, 40},
  {5, 40, 70},
  {6, 100, 100}
]
==

# Mostly the same as previous (without the negative 'val'),
# but aggregating UINT32 values.
[name=analytic_avg_trailing_range_moving_avg_3d]
[labels=analytic_avg_over_range_between_preceding_and_current]
select row_id, val,
       avg(val) over (order by row_id DESC RANGE 1 PRECEDING)
FROM (SELECT 1 row_id, NULL val UNION ALL
      SELECT 1, NULL            UNION ALL
      SELECT 1, NULL            UNION ALL
      SELECT 2, NULL            UNION ALL
      SELECT 2, 10              UNION ALL
      SELECT 2, 20              UNION ALL
      SELECT 3, NULL            UNION ALL
      SELECT 4, NULL            UNION ALL
      SELECT 4, 40              UNION ALL
      SELECT 5, 40              UNION ALL
      SELECT 6, cast(100 as UINT32))
order by row_id, val
--
ARRAY<STRUCT<row_id INT64, val UINT32, DOUBLE>>[
  {1, NULL, 15},
  {1, NULL, 15},
  {1, NULL, 15},
  {2, NULL, 15},
  {2, 10, 15},
  {2, 20, 15},
  {3, NULL, 40},
  {4, NULL, 40},
  {4, 40, 40},
  {5, 40, 70},
  {6, 100, 100}
]
==

# Same as previous, but aggregating FLOAT values.
[name=analytic_avg_trailing_range_moving_avg_3e]
[labels=analytic_avg_over_range_between_preceding_and_current]
select row_id, val,
       avg(val) over (order by row_id DESC RANGE 1 PRECEDING)
FROM (SELECT 1 row_id, NULL val UNION ALL
      SELECT 1, NULL            UNION ALL
      SELECT 1, NULL            UNION ALL
      SELECT 2, NULL            UNION ALL
      SELECT 2, 10              UNION ALL
      SELECT 2, 20              UNION ALL
      SELECT 3, NULL            UNION ALL
      SELECT 4, NULL            UNION ALL
      SELECT 4, 40              UNION ALL
      SELECT 5, -40             UNION ALL
      SELECT 6, cast(100.0 as FLOAT))
order by row_id, val
--
ARRAY<STRUCT<row_id INT64, val FLOAT, DOUBLE>>[
  {1, NULL, 15},
  {1, NULL, 15},
  {1, NULL, 15},
  {2, NULL, 15},
  {2, 10, 15},
  {2, 20, 15},
  {3, NULL, 40},
  {4, NULL, 0},
  {4, 40, 0},
  {5, -40, 30},
  {6, 100, 100}
]
==

# Same as previous, but aggregating DOUBLE values.
[name=analytic_avg_trailing_range_moving_avg_3f]
[labels=analytic_avg_over_range_between_preceding_and_current]
select row_id, val,
       avg(val) over (order by row_id DESC RANGE 1 PRECEDING)
FROM (SELECT 1 row_id, NULL val UNION ALL
      SELECT 1, NULL            UNION ALL
      SELECT 1, NULL            UNION ALL
      SELECT 2, NULL            UNION ALL
      SELECT 2, 10              UNION ALL
      SELECT 2, 20              UNION ALL
      SELECT 3, NULL            UNION ALL
      SELECT 4, NULL            UNION ALL
      SELECT 4, 40              UNION ALL
      SELECT 5, -40             UNION ALL
      SELECT 6, 100.0)
order by row_id, val
--
ARRAY<STRUCT<row_id INT64, val DOUBLE, DOUBLE>>[
  {1, NULL, 15},
  {1, NULL, 15},
  {1, NULL, 15},
  {2, NULL, 15},
  {2, 10, 15},
  {2, 20, 15},
  {3, NULL, 40},
  {4, NULL, 0},
  {4, 40, 0},
  {5, -40, 30},
  {6, 100, 100}
]
==

[name=analytic_avg_trailing_range_moving_avg_4]
[labels=analytic_avg_over_range_between_preceding_and_current]
select row_id, val,
       avg(val) over (order by row_id DESC RANGE 1000 PRECEDING)
FROM (SELECT NULL row_id, 10 val UNION ALL
      SELECT 1, 10               UNION ALL
      SELECT 1, 10               UNION ALL
      SELECT 2, 10               UNION ALL
      SELECT 2, 10               UNION ALL
      SELECT 2, 10               UNION ALL
      SELECT 3, 10               UNION ALL
      SELECT 4, 20               UNION ALL
      SELECT 4, 40               UNION ALL
      SELECT 5, -40              UNION ALL
      SELECT 6, 100)
ORDER BY row_id DESC, val DESC
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE>>[
  {6, 100, 100},
  {5, -40, 30},
  {4, 40, 30},
  {4, 20, 30},
  {3, 10, 26},
  {2, 10, 20},
  {2, 10, 20},
  {2, 10, 20},
  {1, 10, 18},
  {1, 10, 18},
  {NULL, 10, 10}
]
==

# AVG OVER RANGE BETWEEN <m> PRECEDING AND <n> PRECEDING
# Note that these tests don't exhaustively cover every variation
# of ordering key types and values, and special values being
# averaged - those are tested extensively elsewhere, largely
# in the trailing moving window (RANGE BETWEEN <n> PRECEDING
# AND CURRENT ROW) tests above.
#
# So these tests primarily focus on ensuring that this frame
# works in basic cases, and handles corner cases with empty
# window frames appropriately (for both statically empty frames,
# and frames that are outside the partition).

# Since all the row_ids are the same, all rows are peers and all
# window frames include all rows.
[name=analytic_avg_range_preceding_preceding_1]
[labels=analytic_avg_over_range_between_preceding_and_preceding]
SELECT row_id, val,
       avg(val) over (order_by RANGE BETWEEN 0 PRECEDING AND 0 PRECEDING),
       avg(val) OVER (order_by RANGE BETWEEN 1 PRECEDING AND 0 PRECEDING),
       avg(val) OVER (order_by RANGE BETWEEN 1 PRECEDING AND 1 PRECEDING)
FROM (SELECT 1 row_id, 1 val UNION ALL
      SELECT 1, 3            UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 1, 4            UNION ALL
      SELECT 1, 2            UNION ALL
      SELECT 1, 5)
WINDOW order_by as (ORDER BY row_id)
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE, DOUBLE, DOUBLE>>[
  {1, 4, 3, 3, NULL},
  {1, 1, 3, 3, NULL},
  {1, 2, 3, 3, NULL},
  {1, 3, 3, 3, NULL},
  {1, 5, 3, 3, NULL},
  {1, NULL, 3, 3, NULL}
]
==

# RANGE BETWEEN <n> PRECEDING and <m> PRECEDING with <n> less than <m> is
# always empty for a tuple with a finite key.
[name=analytic_avg_range_preceding_preceding_2]
[labels=analytic_avg_over_range_between_preceding_and_preceding]
SELECT row_id, val,
       avg(val) over (order_by RANGE BETWEEN 0 PRECEDING AND 1 PRECEDING),
       avg(val) OVER (order_by RANGE BETWEEN 1 PRECEDING AND 3 PRECEDING),
       avg(val) over (order_by RANGE BETWEEN 2 PRECEDING AND 3 PRECEDING)
FROM (SELECT 1 row_id, 1 val UNION ALL
      SELECT 1, 2            UNION ALL
      SELECT 1, 3            UNION ALL
      SELECT 2, 4            UNION ALL
      SELECT 2, 5            UNION ALL
      SELECT 2, 6            UNION ALL
      SELECT 3, 7            UNION ALL
      SELECT 4, 8            UNION ALL
      SELECT 4, 9            UNION ALL
      SELECT 5, 10           UNION ALL
      SELECT 6, 11           UNION ALL
      SELECT 8, 12           UNION ALL
      SELECT 11, 13          UNION ALL
      SELECT 18, 14)
WINDOW order_by as (ORDER BY row_id)
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE, DOUBLE, DOUBLE>>[
  {1, 1, NULL, NULL, NULL},
  {1, 2, NULL, NULL, NULL},
  {1, 3, NULL, NULL, NULL},
  {2, 6, NULL, NULL, NULL},
  {2, 4, NULL, NULL, NULL},
  {2, 5, NULL, NULL, NULL},
  {3, 7, NULL, NULL, NULL},
  {4, 9, NULL, NULL, NULL},
  {4, 8, NULL, NULL, NULL},
  {5, 10, NULL, NULL, NULL},
  {6, 11, NULL, NULL, NULL},
  {8, 12, NULL, NULL, NULL},
  {11, 13, NULL, NULL, NULL},
  {18, 14, NULL, NULL, NULL}
]
==

# The basic cases
[name=analytic_avg_range_preceding_preceding_3]
[labels=analytic_avg_over_range_between_preceding_and_preceding]
SELECT row_id, val,
       avg(val) over (order_by
                      RANGE BETWEEN 0 PRECEDING AND 0 PRECEDING),
       avg(val) over (order_by
                      RANGE BETWEEN 2 PRECEDING AND 0 PRECEDING),
       avg(val) over (order_by
                      RANGE BETWEEN 2 PRECEDING AND 1 PRECEDING),
       avg(val) over (order_by
                      RANGE BETWEEN 2 PRECEDING AND 2 PRECEDING),
       avg(val) over (order_by
                      RANGE BETWEEN 3 PRECEDING AND 1 PRECEDING),
       avg(val) over (order_by
                      RANGE BETWEEN 200 PRECEDING AND 100 PRECEDING)
FROM (SELECT 1 row_id, 1 val UNION ALL
      SELECT 1, 2            UNION ALL
      SELECT 1, 3            UNION ALL
      SELECT 2, 4            UNION ALL
      SELECT 2, 5            UNION ALL
      SELECT 2, 6            UNION ALL
      SELECT 3, 7            UNION ALL
      SELECT 4, 8            UNION ALL
      SELECT 4, 9            UNION ALL
      SELECT 5, 10           UNION ALL
      SELECT 6, 11           UNION ALL
      SELECT 8, 12           UNION ALL
      SELECT 11, 13          UNION ALL
      SELECT 18, 14)
WINDOW order_by as (ORDER BY row_id DESC)
--
ARRAY<STRUCT<row_id INT64,
             val INT64,
             DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE>>
[
  {18, 14, 14, 14, NULL, NULL, NULL, NULL},
  {11, 13, 13, 13, NULL, NULL, NULL, NULL},
  {8, 12, 12, 12, NULL, NULL, 13, NULL},
  {6, 11, 11, 11.5, 12, 12, 12, NULL},
  {5, 10, 10, 10.5, 11, NULL, 11.5, NULL},
  {4, 9, 8.5, 9.5, 10.5, 11, 10.5, NULL},
  {4, 8, 8.5, 9.5, 10.5, 11, 10.5, NULL},
  {3, 7, 7, 8.5, 9, 10, 9.5, NULL},
  {2, 6, 5, 6.5, 8, 8.5, 8.5, NULL},
  {2, 4, 5, 6.5, 8, 8.5, 8.5, NULL},
  {2, 5, 5, 6.5, 8, 8.5, 8.5, NULL},
  {1, 1, 2, 3.9999999999999996, 5.5, 7, 6.5, NULL},
  {1, 2, 2, 3.9999999999999996, 5.5, 7, 6.5, NULL},
  {1, 3, 2, 3.9999999999999996, 5.5, 7, 6.5, NULL}
]
==

[name=analytic_avg_range_preceding_preceding_4]
[labels=analytic_avg_over_range_between_preceding_and_preceding]
[parameters=9223372036854775807 as int64_max]
SELECT row_id, val,
       avg(val) OVER (order by row_id
                      RANGE BETWEEN @int64_max PRECEDING AND 0 PRECEDING),
       avg(val) OVER (order by row_id
                      RANGE BETWEEN @int64_max PRECEDING
                                AND @int64_max PRECEDING)
FROM (SELECT 1 row_id, 1 val UNION ALL
      SELECT 1, 2            UNION ALL
      SELECT 1, 3            UNION ALL
      SELECT 2, 4            UNION ALL
      SELECT 2, 5            UNION ALL
      SELECT 2, 6            UNION ALL
      SELECT 3, 7            UNION ALL
      SELECT 4, 8            UNION ALL
      SELECT 4, 9            UNION ALL
      SELECT 5, 10           UNION ALL
      SELECT 6, 11           UNION ALL
      SELECT 8, 12           UNION ALL
      SELECT 11, 13          UNION ALL
      SELECT 18, 14)
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE, DOUBLE>>[
  {1, 2, 2, NULL},
  {1, 1, 2, NULL},
  {1, 3, 2, NULL},
  {2, 6, 3.5, NULL},
  {2, 5, 3.5, NULL},
  {2, 4, 3.5, NULL},
  {3, 7, 4, NULL},
  {4, 9, 5, NULL},
  {4, 8, 5, NULL},
  {5, 10, 5.5, NULL},
  {6, 11, 6, NULL},
  {8, 12, 6.5, NULL},
  {11, 13, 7, NULL},
  {18, 14, 7.5, NULL}
]
==

[name=analytic_avg_range_preceding_preceding_5]
[labels=analytic_avg_over_range_between_preceding_and_preceding]
[parameters=9223372036854775807 as int64_max,
            -9223372036854775808 as int64_min]
SELECT row_id, val,
       avg(val) OVER (order by row_id
                      RANGE BETWEEN @int64_max PRECEDING AND 0 PRECEDING),
       avg(val) OVER (order by row_id
                      RANGE BETWEEN @int64_max PRECEDING
                                AND @int64_max PRECEDING)
FROM (SELECT @int64_min row_id, -1 val UNION ALL
      SELECT @int64_min + 1, -3        UNION ALL
      SELECT -100, -5                  UNION ALL
      SELECT -2, -7                    UNION ALL
      SELECT -1, -9                    UNION ALL
      SELECT 0, -11)
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE, DOUBLE>>[
  {-9223372036854775808, -1, -1, NULL},
  {-9223372036854775807, -3, -2, NULL},
  {-100, -5, -3, NULL},
  {-2, -7, -4, NULL},
  {-1, -9, -5, -1},
  {0, -11, -7, -3}
]
==

[name=analytic_avg_range_preceding_preceding_6]
[labels=analytic_avg_over_range_between_preceding_and_preceding]
[parameters=-1 as offset_preceding]
SELECT int64_val,
       AVG(int64_val) OVER (ORDER BY row_id
                            range BETWEEN 100 PRECEDING
                                      AND @offset_preceding PRECEDING)
FROM TestTable
--
ERROR: generic::out_of_range: Window frame offset for PRECEDING or FOLLOWING must be non-negative, but was -1
==

[name=analytic_avg_range_preceding_following_one_ordering_group_asc]
[labels=analytic_avg_over_range_between_preceding_and_following]
SELECT row_id, val,
       avg(val) over (order_by RANGE BETWEEN 0 PRECEDING AND 0 FOLLOWING),
       avg(val) OVER (order_by RANGE BETWEEN 1 PRECEDING AND 0 FOLLOWING),
       avg(val) OVER (order_by RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING),
       avg(val) OVER (order_by RANGE BETWEEN 2 PRECEDING AND 1 FOLLOWING)
FROM (SELECT 1 row_id, 1 val UNION ALL
      SELECT 1, 3            UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 1, 4            UNION ALL
      SELECT 1, 2            UNION ALL
      SELECT 1, 5)
WINDOW order_by as (ORDER BY row_id)
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE, DOUBLE, DOUBLE, DOUBLE>>[
  {1, 4, 3, 3, 3, 3},
  {1, 1, 3, 3, 3, 3},
  {1, 2, 3, 3, 3, 3},
  {1, 3, 3, 3, 3, 3},
  {1, 5, 3, 3, 3, 3},
  {1, NULL, 3, 3, 3, 3}
]
==

[name=analytic_avg_range_preceding_following_one_ordering_group_desc]
[labels=analytic_avg_over_range_between_preceding_and_following]
SELECT row_id, val,
       avg(val) over (order_by RANGE BETWEEN 0 PRECEDING AND 0 FOLLOWING),
       avg(val) OVER (order_by RANGE BETWEEN 1 PRECEDING AND 0 FOLLOWING),
       avg(val) OVER (order_by RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING),
       avg(val) OVER (order_by RANGE BETWEEN 2 PRECEDING AND 1 FOLLOWING)
FROM (SELECT 1 row_id, 1 val UNION ALL
      SELECT 1, 3            UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 1, 4            UNION ALL
      SELECT 1, 2            UNION ALL
      SELECT 1, 5)
WINDOW order_by as (ORDER BY row_id DESC)
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE, DOUBLE, DOUBLE, DOUBLE>>[
  {1, 4, 3, 3, 3, 3},
  {1, 1, 3, 3, 3, 3},
  {1, 2, 3, 3, 3, 3},
  {1, 3, 3, 3, 3, 3},
  {1, 5, 3, 3, 3, 3},
  {1, NULL, 3, 3, 3, 3}
]
==

[name=analytic_avg_range_preceding_following_with_partitionby_asc]
[labels=analytic_avg_over_range_between_preceding_and_following]
SELECT bool_val, int64_val, double_val,
       avg(double_val) OVER (PARTITION BY bool_val ORDER BY int64_val
                             RANGE BETWEEN 1 PRECEDING AND 2 FOLLOWING),
       avg(double_val) OVER (PARTITION BY bool_val ORDER BY int64_val
                             RANGE BETWEEN 2 PRECEDING AND 1 FOLLOWING)
FROM TestTable
--
ARRAY<STRUCT<bool_val BOOL, int64_val INT64, double_val DOUBLE, DOUBLE, DOUBLE>>[
  {NULL, NULL, NULL, NULL, NULL},
  {false, 1, 3.5, 1.5, 1.5},
  {false, 1, -0.5, 1.5, 1.5},
  {false, 1, 1.5, 1.5, 1.5},
  {false, 2, 1.5, 1.5, 1.5},
  {true, NULL, 2.5, 2.5, 2.5},
  {true, 2, 1.5, 0.83333333333333326, 2},
  {true, 2, NULL, 0.83333333333333326, 2},
  {true, 3, 2.5, 0.83333333333333326, 0.83333333333333326},
  {true, 4, -1.5, 0.5, 0.83333333333333326}
]
==

[name=analytic_avg_range_preceding_following_with_partitionby_desc]
[labels=analytic_avg_over_range_between_preceding_and_following]
SELECT bool_val, int64_val, double_val,
       avg(double_val) OVER (PARTITION BY bool_val ORDER BY int64_val DESC
                             RANGE BETWEEN 1 PRECEDING AND 2 FOLLOWING),
       avg(double_val) OVER (PARTITION BY bool_val ORDER BY int64_val DESC
                             RANGE BETWEEN 2 PRECEDING AND 1 FOLLOWING)
FROM TestTable
--
ARRAY<STRUCT<bool_val BOOL, int64_val INT64, double_val DOUBLE, DOUBLE, DOUBLE>>[
  {NULL, NULL, NULL, NULL, NULL},
  {false, 2, 1.5, 1.5, 1.5},
  {false, 1, 1.5, 1.5, 1.5},
  {false, 1, 3.5, 1.5, 1.5},
  {false, 1, -0.5, 1.5, 1.5},
  {true, 4, -1.5, 0.83333333333333326, 0.5},
  {true, 3, 2.5, 0.83333333333333326, 0.83333333333333326},
  {true, 2, NULL, 2, 0.83333333333333326},
  {true, 2, 1.5, 2, 0.83333333333333326},
  {true, NULL, 2.5, 2.5, 2.5}
]
==

[name=analytic_avg_range_preceding_following_large_offset_asc]
[labels=analytic_avg_over_range_between_preceding_and_following]
SELECT bool_val, int64_val, double_val,
       avg(double_val) OVER (PARTITION BY bool_val ORDER BY int64_val
                             RANGE BETWEEN 100 PRECEDING AND 2 FOLLOWING),
       avg(double_val) OVER (PARTITION BY bool_val ORDER BY int64_val
                             RANGE BETWEEN 2 PRECEDING AND 100 FOLLOWING),
       avg(double_val) OVER (PARTITION BY bool_val ORDER BY int64_val
                             RANGE BETWEEN 200 PRECEDING AND 100 FOLLOWING)
FROM TestTable
--
ARRAY<STRUCT<bool_val BOOL,
             int64_val INT64,
             double_val DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE>>
[
  {NULL, NULL, NULL, NULL, NULL, NULL},
  {false, 1, 3.5, 1.5, 1.5, 1.5},
  {false, 1, -0.5, 1.5, 1.5, 1.5},
  {false, 1, 1.5, 1.5, 1.5, 1.5},
  {false, 2, 1.5, 1.5, 1.5, 1.5},
  {true, NULL, 2.5, 2.5, 2.5, 2.5},
  {true, 2, 1.5, 0.83333333333333326, 0.83333333333333326, 0.83333333333333326},
  {true, 2, NULL, 0.83333333333333326, 0.83333333333333326, 0.83333333333333326},
  {true, 3, 2.5, 0.83333333333333326, 0.83333333333333326, 0.83333333333333326},
  {true, 4, -1.5, 0.83333333333333326, 0.83333333333333326, 0.83333333333333326}
]
==

[name=analytic_avg_range_preceding_following_large_offset_desc]
[labels=analytic_avg_over_range_between_preceding_and_following]
SELECT bool_val, int64_val, double_val,
       avg(double_val) OVER (PARTITION BY bool_val ORDER BY int64_val DESC
                             RANGE BETWEEN 100 PRECEDING AND 2 FOLLOWING),
       avg(double_val) OVER (PARTITION BY bool_val ORDER BY int64_val DESC
                             RANGE BETWEEN 2 PRECEDING AND 100 FOLLOWING),
       avg(double_val) OVER (PARTITION BY bool_val ORDER BY int64_val DESC
                             RANGE BETWEEN 200 PRECEDING AND 100 FOLLOWING)
FROM TestTable
--
ARRAY<STRUCT<bool_val BOOL,
             int64_val INT64,
             double_val DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE>>
[
  {NULL, NULL, NULL, NULL, NULL, NULL},
  {false, 2, 1.5, 1.5, 1.5, 1.5},
  {false, 1, 1.5, 1.5, 1.5, 1.5},
  {false, 1, 3.5, 1.5, 1.5, 1.5},
  {false, 1, -0.5, 1.5, 1.5, 1.5},
  {true, 4, -1.5, 0.83333333333333326, 0.83333333333333326, 0.83333333333333326},
  {true, 3, 2.5, 0.83333333333333326, 0.83333333333333326, 0.83333333333333326},
  {true, 2, NULL, 0.83333333333333326, 0.83333333333333326, 0.83333333333333326},
  {true, 2, 1.5, 0.83333333333333326, 0.83333333333333326, 0.83333333333333326},
  {true, NULL, 2.5, 2.5, 2.5, 2.5}
]
==

[name=analytic_avg_range_preceding_following_special_order_keys_asc]
[labels=analytic_avg_over_range_between_preceding_and_following]
[parameters=cast("NaN" as double) as nan,
            cast("+inf" as double) as pos_inf,
            cast("-inf" as double) as neg_inf]
SELECT row_id, val,
       avg(val) OVER (ORDER BY row_id
                      RANGE BETWEEN 1 PRECEDING AND 2 FOLLOWING)
FROM (SELECT null row_id, 1 val UNION ALL
      SELECT 2, 2 UNION ALL
      SELECT 1, 3 UNION ALL
      SELECT @nan, 4 UNION ALL
      SELECT @pos_inf, 5 UNION ALL
      SELECT @nan, 6 UNION ALL
      SELECT @pos_inf, 7 UNION ALL
      SELECT 2, 8 UNION ALL
      SELECT @neg_inf, 9 UNION ALL
      SELECT null, 10 UNION ALL
      SELECT 1, 11 UNION ALL
      SELECT @nan, 12 UNION ALL
      SELECT 3, 13 UNION ALL
      SELECT @neg_inf, 14)
--
ARRAY<STRUCT<row_id DOUBLE, val INT64, DOUBLE>>[
  {NULL, 1, 5.5},
  {NULL, 10, 5.5},
  {nan, 6, 7.3333333333333339},
  {nan, 4, 7.3333333333333339},
  {nan, 12, 7.3333333333333339},
  {-inf, 9, 11.5},
  {-inf, 14, 11.5},
  {1, 11, 7.4},
  {1, 3, 7.4},
  {2, 8, 7.4},
  {2, 2, 7.4},
  {3, 13, 7.6666666666666661},
  {inf, 7, 6},
  {inf, 5, 6}
]
==

[name=analytic_avg_range_preceding_following_special_order_keys_desc]
[labels=analytic_avg_over_range_between_preceding_and_following]
[parameters=cast("NaN" as double) as nan,
            cast("+inf" as double) as pos_inf,
            cast("-inf" as double) as neg_inf]
SELECT row_id, val,
       avg(val) OVER (ORDER BY row_id DESC
                      RANGE BETWEEN 1 PRECEDING AND 2 FOLLOWING)
FROM (SELECT null row_id, 1 val UNION ALL
      SELECT 2, 2 UNION ALL
      SELECT 1, 3 UNION ALL
      SELECT @nan, 4 UNION ALL
      SELECT @pos_inf, 5 UNION ALL
      SELECT @nan, 6 UNION ALL
      SELECT @pos_inf, 7 UNION ALL
      SELECT 2, 8 UNION ALL
      SELECT @neg_inf, 9 UNION ALL
      SELECT null, 10 UNION ALL
      SELECT 1, 11 UNION ALL
      SELECT @nan, 12 UNION ALL
      SELECT 3, 13 UNION ALL
      SELECT @neg_inf, 14)
--
ARRAY<STRUCT<row_id DOUBLE, val INT64, DOUBLE>>[
  {inf, 7, 6},
  {inf, 5, 6},
  {3, 13, 7.4},
  {2, 8, 7.4},
  {2, 2, 7.4},
  {1, 11, 6},
  {1, 3, 6},
  {-inf, 9, 11.5},
  {-inf, 14, 11.5},
  {nan, 6, 7.3333333333333339},
  {nan, 4, 7.3333333333333339},
  {nan, 12, 7.3333333333333339},
  {NULL, 1, 5.5},
  {NULL, 10, 5.5}
]
==

[name=analytic_avg_range_preceding_following_small_order_keys_and_null_asc]
[labels=analytic_avg_over_range_between_preceding_and_following]
SELECT uint32_val, double_val,
       avg(double_val) OVER (
         ORDER BY uint32_val
         RANGE BETWEEN 1 PRECEDING AND 2 FOLLOWING
       )
FROM (SELECT CAST(0 AS uint32) uint32_val, NULL double_val UNION ALL
      SELECT CAST(1 AS uint32),            1.0 UNION ALL
      SELECT CAST(2 AS uint32),            2.0 UNION ALL
      SELECT CAST(3 AS uint32),            3.0 UNION ALL
      SELECT NULL,                         4.0)
--
ARRAY<STRUCT<uint32_val UINT32, double_val DOUBLE, DOUBLE>>[
  {NULL, 4, 4},
  {0, NULL, 1.5},
  {1, 1, 2},
  {2, 2, 2},
  {3, 3, 2.5}
]
==

[name=analytic_avg_range_preceding_following_small_order_keys_and_null_desc]
[labels=analytic_avg_over_range_between_preceding_and_following]
SELECT uint32_val, double_val,
       avg(double_val) OVER (
         ORDER BY uint32_val DESC
         RANGE BETWEEN 1 PRECEDING AND 2 FOLLOWING
       )
FROM (SELECT CAST(0 AS uint32) uint32_val, NULL double_val UNION ALL
      SELECT CAST(1 AS uint32),            1.0 UNION ALL
      SELECT CAST(2 AS uint32),            2.0 UNION ALL
      SELECT CAST(3 AS uint32),            3.0 UNION ALL
      SELECT NULL,                         4.0)
--
ARRAY<STRUCT<uint32_val UINT32, double_val DOUBLE, DOUBLE>>[
  {3, 3, 2},
  {2, 2, 2},
  {1, 1, 1.5},
  {0, NULL, 1},
  {NULL, 4, 4}
]
==

[name=analytic_avg_range_preceding_following_small_order_keys_and_nan_asc]
[labels=analytic_avg_over_range_between_preceding_and_following]
[parameters=-1.79769e+308 as min_double_val,
            cast("nan" as double) as nan]
SELECT double_val, int64_val,
       avg(int64_val) OVER (
         ORDER BY double_val
         RANGE BETWEEN 1 PRECEDING AND 9223372036854775807 FOLLOWING
       ),
       avg(int64_val) OVER (
         ORDER BY double_val
         RANGE BETWEEN 9223372036854775807 PRECEDING AND 1 FOLLOWING
       )
FROM (SELECT @min_double_val double_val, NULL int64_val UNION ALL
      SELECT 1,                          1 UNION ALL
      SELECT 2,                          2 UNION ALL
      SELECT 3,                          3 UNION ALL
      SELECT @nan,                       4)
--
ARRAY<STRUCT<double_val DOUBLE, int64_val INT64, DOUBLE, DOUBLE>>[
  {nan, 4, 4, 4},
  {-1.79769e+308, NULL, NULL, NULL},
  {1, 1, 2, 1.5},
  {2, 2, 2, 2},
  {3, 3, 2.5, 2}
]
==

[name=analytic_avg_range_preceding_following_small_order_keys_and_nan_desc]
[labels=analytic_avg_over_range_between_preceding_and_following]
[parameters=-1.79769e+308 as min_double_val,
            cast("nan" as double) as nan]
SELECT double_val, int64_val,
       avg(int64_val) OVER (
         ORDER BY double_val DESC
         RANGE BETWEEN 1 PRECEDING AND 9223372036854775807 FOLLOWING
       ),
       avg(int64_val) OVER (
         ORDER BY double_val DESC
         RANGE BETWEEN 9223372036854775807 PRECEDING AND 1 FOLLOWING
       )
FROM (SELECT @min_double_val double_val, NULL int64_val UNION ALL
      SELECT 1,                          1 UNION ALL
      SELECT 2,                          2 UNION ALL
      SELECT 3,                          3 UNION ALL
      SELECT @nan,                       4)
--
ARRAY<STRUCT<double_val DOUBLE, int64_val INT64, DOUBLE, DOUBLE>>[
  {3, 3, 2, 2.5},
  {2, 2, 2, 2},
  {1, 1, 1.5, 2},
  {-1.79769e+308, NULL, NULL, NULL},
  {nan, 4, 4, 4}
]
==

[name=analytic_avg_range_preceding_following_small_order_keys_and_neg_inf_asc]
[labels=analytic_avg_over_range_between_preceding_and_following]
[parameters=-1.79769e+308 as min_double_val,
            cast("-inf" as double) as neg_inf]
SELECT double_val, int64_val,
       avg(int64_val) OVER (
         ORDER BY double_val
         RANGE BETWEEN 1 PRECEDING AND 9223372036854775807 FOLLOWING
       ),
       avg(int64_val) OVER (
         ORDER BY double_val
         RANGE BETWEEN 9223372036854775807 PRECEDING AND 1 FOLLOWING
       )
FROM (SELECT @min_double_val double_val, NULL int64_val UNION ALL
      SELECT 1,                          1 UNION ALL
      SELECT 2,                          2 UNION ALL
      SELECT 3,                          3 UNION ALL
      SELECT @neg_inf,                       4)
--
ARRAY<STRUCT<double_val DOUBLE, int64_val INT64, DOUBLE, DOUBLE>>[
  {-inf, 4, 4, 4},
  {-1.79769e+308, NULL, NULL, NULL},
  {1, 1, 2, 1.5},
  {2, 2, 2, 2},
  {3, 3, 2.5, 2}
]
==

[name=analytic_avg_range_preceding_following_small_order_keys_and_neg_inf_desc]
[labels=analytic_avg_over_range_between_preceding_and_following]
[parameters=-1.79769e+308 as min_double_val,
            cast("-inf" as double) as neg_inf]
SELECT double_val, int64_val,
       avg(int64_val) OVER (
         ORDER BY double_val DESC
         RANGE BETWEEN 1 PRECEDING AND 9223372036854775807 FOLLOWING
       ),
       avg(int64_val) OVER (
         ORDER BY double_val DESC
         RANGE BETWEEN 9223372036854775807 PRECEDING AND 1 FOLLOWING
       )
FROM (SELECT @min_double_val double_val, NULL int64_val UNION ALL
      SELECT 1,                          1 UNION ALL
      SELECT 2,                          2 UNION ALL
      SELECT 3,                          3 UNION ALL
      SELECT @neg_inf,                       4)
--
ARRAY<STRUCT<double_val DOUBLE, int64_val INT64, DOUBLE, DOUBLE>>[
  {3, 3, 2, 2.5},
  {2, 2, 2, 2},
  {1, 1, 1.5, 2},
  {-1.79769e+308, NULL, NULL, NULL},
  {-inf, 4, 4, 4}
]
==

[name=analytic_avg_range_preceding_following_small_and_special_order_keys_asc]
[labels=analytic_avg_over_range_between_preceding_and_following]
[parameters=-1.79769e+308 as min_double_val,
            cast("nan" as double) as nan,
            cast("-inf" as double) as neg_inf]
SELECT double_val, int64_val,
       avg(int64_val) OVER (
         ORDER BY double_val
         RANGE BETWEEN 1 PRECEDING AND 9223372036854775807 FOLLOWING
       ),
       avg(int64_val) OVER (
         ORDER BY double_val
         RANGE BETWEEN 9223372036854775807 PRECEDING AND 1 FOLLOWING
       )
FROM (SELECT @min_double_val double_val, NULL int64_val UNION ALL
      SELECT 1,                          1 UNION ALL
      SELECT 2,                          2 UNION ALL
      SELECT 3,                          3 UNION ALL
      SELECT @nan,                       4 UNION ALL
      SELECT @neg_inf,                   5 UNION ALL
      SELECT @neg_inf,                   6 UNION ALL
      SELECT NULL,                       8)
--
ARRAY<STRUCT<double_val DOUBLE, int64_val INT64, DOUBLE, DOUBLE>>[
  {NULL, 8, 8, 8},
  {nan, 4, 4, 4},
  {-inf, 5, 5.5, 5.5},
  {-inf, 6, 5.5, 5.5},
  {-1.79769e+308, NULL, NULL, NULL},
  {1, 1, 2, 1.5},
  {2, 2, 2, 2},
  {3, 3, 2.5, 2}
]
==

[name=analytic_avg_range_preceding_following_small_and_special_order_keys_desc]
[labels=analytic_avg_over_range_between_preceding_and_following]
[parameters=1.79769e+308 as max_double_val,
            cast("+inf" as double) as pos_inf]
SELECT double_val, int64_val,
       avg(int64_val) OVER (
         ORDER BY double_val DESC
         RANGE BETWEEN 1 PRECEDING AND 9223372036854775807 FOLLOWING
       ),
       avg(int64_val) OVER (
         ORDER BY double_val DESC
         RANGE BETWEEN 9223372036854775807 PRECEDING AND 1 FOLLOWING
       )
FROM (SELECT @max_double_val double_val, NULL int64_val UNION ALL
      SELECT 1,                          1 UNION ALL
      SELECT 2,                          2 UNION ALL
      SELECT 3,                          3 UNION ALL
      SELECT @pos_inf,                   4)
--
ARRAY<STRUCT<double_val DOUBLE, int64_val INT64, DOUBLE, DOUBLE>>[
  {inf, 4, 4, 4},
  {1.79769e+308, NULL, NULL, NULL},
  {3, 3, 2, 2.5},
  {2, 2, 2, 2},
  {1, 1, 1.5, 2}
]
==

[name=analytic_avg_range_preceding_following_large_order_keys_asc]
[labels=analytic_avg_over_range_between_preceding_and_following]
[parameters=1.79769e+308 as max_double_val,
            cast("+inf" as double) as pos_inf]
SELECT double_val, int64_val,
       avg(int64_val) OVER (
         ORDER BY double_val
         RANGE BETWEEN 1 PRECEDING AND 9223372036854775807 FOLLOWING
       ),
       avg(int64_val) OVER (
         ORDER BY double_val
         RANGE BETWEEN 9223372036854775807 PRECEDING AND 1 FOLLOWING
       )
FROM (SELECT @max_double_val double_val, NULL int64_val UNION ALL
      SELECT 1,                          1 UNION ALL
      SELECT 2,                          2 UNION ALL
      SELECT 3,                          3 UNION ALL
      SELECT @pos_inf,                   4)
--
ARRAY<STRUCT<double_val DOUBLE, int64_val INT64, DOUBLE, DOUBLE>>[
  {1, 1, 2, 1.5},
  {2, 2, 2, 2},
  {3, 3, 2.5, 2},
  {1.79769e+308, NULL, NULL, NULL},
  {inf, 4, 4, 4}
]
==

[name=analytic_avg_range_preceding_following_large_order_keys_desc]
[labels=analytic_avg_over_range_between_preceding_and_following]
[parameters=1.79769e+308 as max_double_val,
            cast("+inf" as double) as pos_inf]
SELECT double_val, int64_val,
       avg(int64_val) OVER (
         ORDER BY double_val DESC
         RANGE BETWEEN 1 PRECEDING AND 9223372036854775807 FOLLOWING
       ),
       avg(int64_val) OVER (
         ORDER BY double_val DESC
         RANGE BETWEEN 9223372036854775807 PRECEDING AND 1 FOLLOWING
       )
FROM (SELECT @max_double_val double_val, NULL int64_val UNION ALL
      SELECT 1,                          1 UNION ALL
      SELECT 2,                          2 UNION ALL
      SELECT 3,                          3 UNION ALL
      SELECT @pos_inf,                   4)
--
ARRAY<STRUCT<double_val DOUBLE, int64_val INT64, DOUBLE, DOUBLE>>[
  {inf, 4, 4, 4},
  {1.79769e+308, NULL, NULL, NULL},
  {3, 3, 2, 2.5},
  {2, 2, 2, 2},
  {1, 1, 1.5, 2}
]
==

[name=analytic_avg_range_current_and_following_double_asc]
[labels=analytic_avg_over_range_between_current_and_following]
[parameters=1.79769e+308 as max_double_val,
            -1.79769e+308 as min_double_val,
            cast("NaN" as double) as nan,
            cast("+inf" as double) as pos_inf,
            cast("-inf" as double) as neg_inf]
SELECT row_id, val,
       avg(val) OVER (ORDER BY row_id
                      RANGE BETWEEN CURRENT ROW AND 0 FOLLOWING),
       avg(val) OVER (ORDER BY row_id
                      RANGE BETWEEN CURRENT ROW AND 1 FOLLOWING),
       avg(val) OVER (ORDER BY row_id
                      RANGE BETWEEN CURRENT ROW AND 2 FOLLOWING),
       avg(val) OVER (ORDER BY row_id
                      RANGE BETWEEN CURRENT ROW AND @max_double_val FOLLOWING)
FROM (SELECT null row_id, 1 val UNION ALL
      SELECT 2, 2 UNION ALL
      SELECT 1, 3 UNION ALL
      SELECT @nan, 3 UNION ALL
      SELECT @pos_inf, 5 UNION ALL
      SELECT @nan, 6 UNION ALL
      SELECT @pos_inf, 7 UNION ALL
      SELECT 2, 8 UNION ALL
      SELECT @neg_inf, 9 UNION ALL
      SELECT null, 10 UNION ALL
      SELECT 1, 11 UNION ALL
      SELECT @nan, 12 UNION ALL
      SELECT 3, 13 UNION ALL
      SELECT 3, 15 UNION ALL
      SELECT @neg_inf, 14 UNION ALL
      SELECT 20, 16 UNION ALL
      SELECT @max_double_val, 17 UNION ALL
      SELECT @min_double_val, 18)
--
ARRAY<STRUCT<row_id DOUBLE, val INT64, DOUBLE, DOUBLE, DOUBLE, DOUBLE>>[
  {NULL, 10, 5.5, 5.5, 5.5, 5.5},
  {NULL, 1, 5.5, 5.5, 5.5, 5.5},
  {nan, 3, 7, 7, 7, 7},
  {nan, 6, 7, 7, 7, 7},
  {nan, 12, 7, 7, 7, 7},
  {-inf, 14, 11.5, 11.5, 11.5, 11.5},
  {-inf, 9, 11.5, 11.5, 11.5, 11.5},
  {-1.79769e+308, 18, 18, 18, 18, 18},
  {1, 3, 7, 6, 8.6666666666666661, 10.625},
  {1, 11, 7, 6, 8.6666666666666661, 10.625},
  {2, 2, 5, 9.5, 9.5, 11.833333333333334},
  {2, 8, 5, 9.5, 9.5, 11.833333333333334},
  {3, 15, 14, 14, 14, 15.25},
  {3, 13, 14, 14, 14, 15.25},
  {20, 16, 16, 16, 16, 16.5},
  {1.79769e+308, 17, 17, 17, 17, 17},
  {inf, 5, 6, 6, 6, 6},
  {inf, 7, 6, 6, 6, 6}
]
==

[name=analytic_avg_range_current_and_following_double_desc]
[labels=analytic_avg_over_range_between_current_and_following]
[parameters=1.79769e+308 as max_double_val,
            -1.79769e+308 as min_double_val,
            cast("NaN" as double) as nan,
            cast("+inf" as double) as pos_inf,
            cast("-inf" as double) as neg_inf]
SELECT row_id, val,
       avg(val) OVER (ORDER BY row_id DESC
                      RANGE BETWEEN CURRENT ROW AND 0 FOLLOWING),
       avg(val) OVER (ORDER BY row_id DESC
                      RANGE BETWEEN CURRENT ROW AND 1 FOLLOWING),
       avg(val) OVER (ORDER BY row_id DESC
                      RANGE BETWEEN CURRENT ROW AND 2 FOLLOWING),
       avg(val) OVER (ORDER BY row_id DESC
                      RANGE BETWEEN CURRENT ROW AND @max_double_val FOLLOWING)
FROM (SELECT null row_id, 1 val UNION ALL
      SELECT 2, 2 UNION ALL
      SELECT 1, 3 UNION ALL
      SELECT @nan, 3 UNION ALL
      SELECT @pos_inf, 5 UNION ALL
      SELECT @nan, 6 UNION ALL
      SELECT @pos_inf, 7 UNION ALL
      SELECT 2, 8 UNION ALL
      SELECT @neg_inf, 9 UNION ALL
      SELECT null, 10 UNION ALL
      SELECT 1, 11 UNION ALL
      SELECT @nan, 12 UNION ALL
      SELECT 3, 13 UNION ALL
      SELECT 3, 15 UNION ALL
      SELECT @neg_inf, 14 UNION ALL
      SELECT 20, 16 UNION ALL
      SELECT @max_double_val, 17 UNION ALL
      SELECT @min_double_val, 18)
--
ARRAY<STRUCT<row_id DOUBLE, val INT64, DOUBLE, DOUBLE, DOUBLE, DOUBLE>>[
  {inf, 5, 6, 6, 6, 6},
  {inf, 7, 6, 6, 6, 6},
  {1.79769e+308, 17, 17, 17, 17, 10.625},
  {20, 16, 16, 16, 16, 10.75},
  {3, 15, 14, 9.5, 8.6666666666666661, 10},
  {3, 13, 14, 9.5, 8.6666666666666661, 10},
  {2, 2, 5, 6, 6, 8.4},
  {2, 8, 5, 6, 6, 8.4},
  {1, 3, 7, 7, 7, 10.666666666666666},
  {1, 11, 7, 7, 7, 10.666666666666666},
  {-1.79769e+308, 18, 18, 18, 18, 18},
  {-inf, 14, 11.5, 11.5, 11.5, 11.5},
  {-inf, 9, 11.5, 11.5, 11.5, 11.5},
  {nan, 6, 7, 7, 7, 7},
  {nan, 12, 7, 7, 7, 7},
  {nan, 3, 7, 7, 7, 7},
  {NULL, 10, 5.5, 5.5, 5.5, 5.5},
  {NULL, 1, 5.5, 5.5, 5.5, 5.5}
]
==

[name=analytic_avg_range_current_and_following_int64_asc]
[labels=analytic_avg_over_range_between_current_and_following]
SELECT row_id, val,
       avg(val) OVER (order by row_id
                      RANGE BETWEEN CURRENT ROW AND 0 FOLLOWING),
       avg(val) OVER (order by row_id
                      RANGE BETWEEN CURRENT ROW AND 1 FOLLOWING),
       avg(val) OVER (order by row_id
                      RANGE BETWEEN CURRENT ROW AND 5 FOLLOWING)
FROM (SELECT 1 row_id, 1 val UNION ALL
      SELECT 1, 2            UNION ALL
      SELECT 1, 3            UNION ALL
      SELECT 2, 4            UNION ALL
      SELECT 2, 5            UNION ALL
      SELECT 2, 6            UNION ALL
      SELECT 3, 7            UNION ALL
      SELECT 4, 8            UNION ALL
      SELECT 4, 9            UNION ALL
      SELECT 5, 10           UNION ALL
      SELECT 6, 11           UNION ALL
      SELECT 8, 12           UNION ALL
      SELECT 11, 13          UNION ALL
      SELECT 18, 14)
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE, DOUBLE, DOUBLE>>[
  {1, 2, 2, 3.5, 6},
  {1, 1, 2, 3.5, 6},
  {1, 3, 2, 3.5, 6},
  {2, 6, 5, 5.5, 7.5},
  {2, 5, 5, 5.5, 7.5},
  {2, 4, 5, 5.5, 7.5},
  {3, 7, 7, 8, 9.5},
  {4, 9, 8.5, 9, 10},
  {4, 8, 8.5, 9, 10},
  {5, 10, 10, 10.5, 11},
  {6, 11, 11, 11, 12},
  {8, 12, 12, 12, 12.5},
  {11, 13, 13, 13, 13},
  {18, 14, 14, 14, 14}
]
==

[name=analytic_avg_range_current_and_following_int64_desc]
[labels=analytic_avg_over_range_between_current_and_following]
SELECT row_id, val,
       avg(val) OVER (order by row_id DESC
                      RANGE BETWEEN CURRENT ROW AND 0 FOLLOWING),
       avg(val) OVER (order by row_id DESC
                      RANGE BETWEEN CURRENT ROW AND 1 FOLLOWING),
       avg(val) OVER (order by row_id DESC
                      RANGE BETWEEN CURRENT ROW AND 5 FOLLOWING)
FROM (SELECT 1 row_id, 1 val UNION ALL
      SELECT 1, 2            UNION ALL
      SELECT 1, 3            UNION ALL
      SELECT 2, 4            UNION ALL
      SELECT 2, 5            UNION ALL
      SELECT 2, 6            UNION ALL
      SELECT 3, 7            UNION ALL
      SELECT 4, 8            UNION ALL
      SELECT 4, 9            UNION ALL
      SELECT 5, 10           UNION ALL
      SELECT 6, 11           UNION ALL
      SELECT 8, 12           UNION ALL
      SELECT 11, 13          UNION ALL
      SELECT 18, 14)
--
ARRAY<STRUCT<row_id INT64, val INT64, DOUBLE, DOUBLE, DOUBLE>>[
  {18, 14, 14, 14, 14},
  {11, 13, 13, 13, 12},
  {8, 12, 12, 12, 9.5},
  {6, 11, 11, 10.5, 6},
  {5, 10, 10, 9, 5.5},
  {4, 9, 8.5, 8, 5},
  {4, 8, 8.5, 8, 5},
  {3, 7, 7, 5.5, 3.9999999999999996},
  {2, 4, 5, 3.5, 3.5},
  {2, 6, 5, 3.5, 3.5},
  {2, 5, 5, 3.5, 3.5},
  {1, 1, 2, 2, 2},
  {1, 3, 2, 2, 2},
  {1, 2, 2, 2, 2}
]
