[load_proto_files=zetasql/testdata/test_schema.proto]
[load_proto_names=zetasql_test__.KitchenSinkPB]
[default test_features1=V_1_1_ORDER_BY_IN_AGGREGATE,V_1_1_LIMIT_IN_AGGREGATE]
[prepare_database]
CREATE TABLE TestTable AS
SELECT cast(1 as int64) as row_id,
       cast(null as bool) as bool_val,
       cast(null as int64) as int64_val,
       cast(null as uint64) as uint64_val,
       cast(null as double) as double_val,
       cast(null as string) as string_val UNION ALL
  SELECT 2,  true,  2,    3,    1.5,    "abc"  UNION ALL
  SELECT 3,  false, 1,    6,    1.5,    "def"  UNION ALL
  SELECT 4,  true,  null, 2,    2.5,    "ghi"  UNION ALL
  SELECT 5,  false, 1,    null, 3.5,    "abc"  UNION ALL
  SELECT 6,  true,  2,    2,    null,   "xyz"  UNION ALL
  SELECT 7,  false, 1,    5,    -0.5,   "zyx"  UNION ALL
  SELECT 8,  true,  4,    2,    -1.5,   "ijk"  UNION ALL
  SELECT 9,  false, 2,    3,    1.5,    "nvm"  UNION ALL
  SELECT 10, true,  3,    1,    2.5,    "goo"
--
ARRAY<STRUCT<row_id INT64,
             bool_val BOOL,
             int64_val INT64,
             uint64_val UINT64,
             double_val DOUBLE,
             string_val STRING>>
[
  {1, NULL, NULL, NULL, NULL, NULL},
  {2, true, 2, 3, 1.5, "abc"},
  {3, false, 1, 6, 1.5, "def"},
  {4, true, NULL, 2, 2.5, "ghi"},
  {5, false, 1, NULL, 3.5, "abc"},
  {6, true, 2, 2, NULL, "xyz"},
  {7, false, 1, 5, -0.5, "zyx"},
  {8, true, 4, 2, -1.5, "ijk"},
  {9, false, 2, 3, 1.5, "nvm"},
  {10, true, 3, 1, 2.5, "goo"}
]
==

[prepare_database]
CREATE TABLE TestTableSameValues AS
SELECT cast(1 as int64) as row_id,
       1 as key,
       10 as int64_val,
       "abc" as string_val UNION ALL
  SELECT 2,   1,  10,  "abc"  UNION ALL
  SELECT 3,   1,  10,  "abc"  UNION ALL
  SELECT 4,   1,  10,  "abc"  UNION ALL
  SELECT 5,   1,  10,  "abc"  UNION ALL
  SELECT 6,   2,  10,  "abc"  UNION ALL
  SELECT 7,   2,  10,  "abc"  UNION ALL
  SELECT 8,   2,  10,  "abc"  UNION ALL
  SELECT 9,   2,  10,  "abc"  UNION ALL
  SELECT 10,  2,  10,  "abc"
--

ARRAY<STRUCT<row_id INT64, key INT64, int64_val INT64, string_val STRING>>[
  {1, 1, 10, "abc"},
  {2, 1, 10, "abc"},
  {3, 1, 10, "abc"},
  {4, 1, 10, "abc"},
  {5, 1, 10, "abc"},
  {6, 2, 10, "abc"},
  {7, 2, 10, "abc"},
  {8, 2, 10, "abc"},
  {9, 2, 10, "abc"},
  {10, 2, 10, "abc"}
]
==

[required_features=NUMERIC_TYPE]
[prepare_database]
CREATE TABLE TestTableNumericValues AS
SELECT cast(1 as int64) as row_id,
       "abc" as string_val,
       [1, 2, 3] as array_val,
       cast(1 as numeric) as numeric_val UNION ALL
  SELECT 2,  "def", [4, 5, 6], cast(NULL as numeric) UNION ALL
  SELECT 3,  "ghi", [7, 8, 9], cast(1.123456789 as numeric)   UNION ALL
  SELECT 4,  "abc", [10, 11, 12],  cast(10 as numeric)   UNION ALL
  SELECT 5,  "jkl", [NULL], cast(-0.000000001 as numeric)   UNION ALL
  SELECT 6,  NULL, [16, 17, 18], cast(0 as numeric)   UNION ALL
  SELECT 7,  "jkl", NULL, cast(99999999999999999999999999999.999999999 as numeric)   UNION ALL
  SELECT 8,  "foo", [22, 23, 24], cast(-99999999999999999999999999999.999999999 as numeric)   UNION ALL
  SELECT 9,  "bar", [25, 26, 27], cast(1.000000001 as numeric)   UNION ALL
  SELECT 10, "baz", [28, 29, 30], cast(100 as numeric)
--

ARRAY<STRUCT<row_id INT64,
             string_val STRING,
             array_val ARRAY<>,
             numeric_val NUMERIC>>
[{
   1,
   "abc",
   ARRAY<INT64>[1, 2, 3],
   1
 },
 {
   2,
   "def",
   ARRAY<INT64>[4, 5, 6],
   NULL
 },
 {
   3,
   "ghi",
   ARRAY<INT64>[7, 8, 9],
   1.123456789
 },
 {
   4,
   "abc",
   ARRAY<INT64>[10, 11, 12],
   10
 },
 {5, "jkl", ARRAY<INT64>[NULL], -0.000000001},
 {
   6,
   NULL,
   ARRAY<INT64>[16, 17, 18],
   0
 },
 {
   7,
   "jkl",
   ARRAY<INT64>(NULL),
   99999999999999999999999999999.999999999
 },
 {
   8,
   "foo",
   ARRAY<INT64>[22, 23, 24],
   -99999999999999999999999999999.999999999
 },
 {
   9,
   "bar",
   ARRAY<INT64>[25, 26, 27],
   1.000000001
 },
 {
   10,
   "baz",
   ARRAY<INT64>[28, 29, 30],
   100
 }]
==

[required_features=BIGNUMERIC_TYPE]
[prepare_database]
CREATE TABLE TestTableBigNumericValues AS
SELECT cast(1 as int64) as row_id,
       "abc" as string_val,
       [1, 2, 3] as array_val,
       cast(1 as bignumeric) as bignumeric_val UNION ALL
  SELECT 2,  "def", [4, 5, 6], cast(NULL as bignumeric) UNION ALL
  SELECT 3,  "ghi", [7, 8, 9], cast(1.12345678901234567890123456789012345678 as bignumeric)   UNION ALL
  SELECT 4,  "abc", [10, 11, 12],  cast(10 as bignumeric)   UNION ALL
  SELECT 5,  "jkl", [NULL],  cast(-0.00000000000000000000000000000000000001 as bignumeric)   UNION ALL
  SELECT 6,  NULL, [16, 17, 18], cast(0 as bignumeric)   UNION ALL
  SELECT 7,  "jkl", NULL, cast(578960446186580977117854925043439539266.34992332820282019728792003956564819967 as bignumeric)   UNION ALL
  SELECT 8,  "foo", [22, 23, 24], cast(-578960446186580977117854925043439539266.34992332820282019728792003956564819968 as bignumeric)   UNION ALL
  SELECT 9,  "bar", [25, 26, 27], cast(1.00000000000000000000000000000000000001 as bignumeric)   UNION ALL
  SELECT 10, "baz", [28, 29, 30], cast(100 as bignumeric)
--

ARRAY<STRUCT<
        row_id INT64,
        string_val STRING,
        array_val ARRAY<>,
        bignumeric_val BIGNUMERIC
      >>
[
  {
    1,
    "abc",
    ARRAY<INT64>[1, 2, 3],
    1
  },
  {
    2,
    "def",
    ARRAY<INT64>[4, 5, 6],
    NULL
  },
  {
    3,
    "ghi",
    ARRAY<INT64>[7, 8, 9],
    1.12345678901234567890123456789012345678
  },
  {
    4,
    "abc",
    ARRAY<INT64>[10, 11, 12],
    10
  },
  {
    5,
    "jkl",
    ARRAY<INT64>[NULL],
    -0.00000000000000000000000000000000000001
  },
  {
    6,
    NULL,
    ARRAY<INT64>[16, 17, 18],
    0
  },
  {
    7,
    "jkl",
    ARRAY<INT64>(NULL),
    578960446186580977117854925043439539266.34992332820282019728792003956564819967
  },
  {
    8,
    "foo",
    ARRAY<INT64>[22, 23, 24],
    -578960446186580977117854925043439539266.34992332820282019728792003956564819968
  },
  {
    9,
    "bar",
    ARRAY<INT64>[25, 26, 27],
    1.00000000000000000000000000000000000001
  },
  {
    10,
    "baz",
    ARRAY<INT64>[28, 29, 30],
    100
  }
]
==

[name=aggregation_order_by_array_agg]
SELECT ARRAY_AGG(x ORDER BY x)
FROM ((SELECT "abc" x) UNION ALL (SELECT "def") UNION ALL (SELECT "xyz"))
--
WITH FEATURES: V_1_1_ORDER_BY_IN_AGGREGATE,V_1_1_LIMIT_IN_AGGREGATE
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<STRING>["abc", "def", "xyz"]}]
--
WITH FEATURES: <none>
ERROR: generic::invalid_argument: ORDER BY in aggregate function is not supported [at 1:20]
SELECT ARRAY_AGG(x ORDER BY x)
                   ^
==

[name=aggregation_order_by_array_agg_desc]
SELECT ARRAY_AGG(x ORDER BY x DESC)
FROM ((SELECT "abc" x) UNION ALL (SELECT "def") UNION ALL (SELECT "xyz"))
--
WITH FEATURES: V_1_1_ORDER_BY_IN_AGGREGATE,V_1_1_LIMIT_IN_AGGREGATE
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<STRING>["xyz", "def", "abc"]}]
--
WITH FEATURES: <none>
ERROR: generic::invalid_argument: ORDER BY in aggregate function is not supported [at 1:20]
SELECT ARRAY_AGG(x ORDER BY x DESC)
                   ^

==

[name=aggregation_order_by_string_agg]
SELECT STRING_AGG(x ORDER BY x)
FROM ((SELECT "abc" x) UNION ALL (SELECT "def") UNION ALL (SELECT "xyz"))
--
WITH FEATURES: V_1_1_ORDER_BY_IN_AGGREGATE,V_1_1_LIMIT_IN_AGGREGATE
ARRAY<STRUCT<STRING>>[{"abc,def,xyz"}]
--
WITH FEATURES: <none>
ERROR: generic::invalid_argument: ORDER BY in aggregate function is not supported [at 1:21]
SELECT STRING_AGG(x ORDER BY x)
                    ^

==

[name=aggregation_order_by_string_agg_delimiter]
SELECT STRING_AGG(x, "|" ORDER BY x)
FROM ((SELECT "xyz" x) UNION ALL (SELECT "def") UNION ALL(SELECT "abc"))
--
WITH FEATURES: V_1_1_ORDER_BY_IN_AGGREGATE,V_1_1_LIMIT_IN_AGGREGATE
ARRAY<STRUCT<STRING>>[{"abc|def|xyz"}]
--
WITH FEATURES: <none>
ERROR: generic::invalid_argument: ORDER BY in aggregate function is not supported [at 1:26]
SELECT STRING_AGG(x, "|" ORDER BY x)
                         ^

==

[test_features1=V_1_1_ORDER_BY_IN_AGGREGATE]
[test_features2=V_1_1_LIMIT_IN_AGGREGATE]
[name=aggregation_order_by_test_table]
SELECT int64_val,
       ARRAY_AGG(bool_val ORDER BY bool_val),
       ARRAY_AGG(uint64_val ORDER BY uint64_val),
       ARRAY_AGG(double_val ORDER BY double_val),
       STRING_AGG(string_val ORDER BY string_val)
FROM TestTable
GROUP BY int64_val
--
WITH FEATURES: V_1_1_ORDER_BY_IN_AGGREGATE
WITH FEATURES: V_1_1_ORDER_BY_IN_AGGREGATE,V_1_1_LIMIT_IN_AGGREGATE
ARRAY<STRUCT<int64_val INT64, ARRAY<>, ARRAY<>, ARRAY<>, STRING>>[
  {
    NULL,
    ARRAY<BOOL>[NULL, true],
    ARRAY<UINT64>[NULL, 2],
    ARRAY<DOUBLE>[NULL, 2.5],
    "ghi"
  },
  {
    1,
    ARRAY<BOOL>[false, false, false],
    ARRAY<UINT64>[NULL, 5, 6],
    ARRAY<DOUBLE>[-0.5, 1.5, 3.5],
    "abc,def,zyx"
  },
  {
    2,
    ARRAY<BOOL>[false, true, true],
    ARRAY<UINT64>[2, 3, 3],
    ARRAY<DOUBLE>[NULL, 1.5, 1.5],
    "abc,nvm,xyz"
  },
  {3, ARRAY<BOOL>[true], ARRAY<UINT64>[1], ARRAY<DOUBLE>[2.5], "goo"},
  {4, ARRAY<BOOL>[true], ARRAY<UINT64>[2], ARRAY<DOUBLE>[-1.5], "ijk"}
]
--
WITH FEATURES: <none>
WITH FEATURES: V_1_1_LIMIT_IN_AGGREGATE
ERROR: generic::invalid_argument: ORDER BY in aggregate function is not supported [at 2:27]
       ARRAY_AGG(bool_val ORDER BY bool_val),
                          ^

==

[name=aggregation_order_by_array_asc]
[test_features1=V_1_1_ORDER_BY_IN_AGGREGATE]
[test_features2=V_1_3_ARRAY_ORDERING]
SELECT ARRAY_AGG(int64_val ORDER BY array_val asc)
FROM (SELECT 1 AS int64_val, [0] AS array_val
      UNION ALL
      SELECT 2 AS int64_val, [1] AS array_val)
--
WITH FEATURES: V_1_1_ORDER_BY_IN_AGGREGATE,V_1_3_ARRAY_ORDERING
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<INT64>[1, 2]}]
--
WITH FEATURES: V_1_1_ORDER_BY_IN_AGGREGATE
ERROR: generic::invalid_argument: ORDER BY does not support expressions of type ARRAY<INT64> [at 1:37]
SELECT ARRAY_AGG(int64_val ORDER BY array_val asc)
                                    ^
--
WITH FEATURES: <none>
WITH FEATURES: V_1_3_ARRAY_ORDERING
ERROR: generic::invalid_argument: ORDER BY in aggregate function is not supported [at 1:28]
SELECT ARRAY_AGG(int64_val ORDER BY array_val asc)
                           ^
==

[name=aggregation_order_by_array_desc]
[test_features1=V_1_1_ORDER_BY_IN_AGGREGATE]
[test_features2=V_1_3_ARRAY_ORDERING]
SELECT ARRAY_AGG(int64_val ORDER BY array_val desc)
FROM (SELECT 1 AS int64_val, [0] AS array_val
      UNION ALL
      SELECT 2 AS int64_val, [1] AS array_val)
--
WITH FEATURES: V_1_1_ORDER_BY_IN_AGGREGATE,V_1_3_ARRAY_ORDERING
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<INT64>[2, 1]}]
--
WITH FEATURES: V_1_1_ORDER_BY_IN_AGGREGATE
ERROR: generic::invalid_argument: ORDER BY does not support expressions of type ARRAY<INT64> [at 1:37]
SELECT ARRAY_AGG(int64_val ORDER BY array_val desc)
                                    ^
--
WITH FEATURES: <none>
WITH FEATURES: V_1_3_ARRAY_ORDERING
ERROR: generic::invalid_argument: ORDER BY in aggregate function is not supported [at 1:28]
SELECT ARRAY_AGG(int64_val ORDER BY array_val desc)
                           ^
==

[name=aggregation_order_by_computed_order_by_exprs]
SELECT int64_val,
       ARRAY_AGG(uint64_val ORDER BY uint64_val + 10),
       ARRAY_AGG(double_val ORDER BY double_val * -2.0)
FROM TestTable
GROUP BY int64_val
--
WITH FEATURES: V_1_1_ORDER_BY_IN_AGGREGATE,V_1_1_LIMIT_IN_AGGREGATE
ARRAY<STRUCT<int64_val INT64, ARRAY<>, ARRAY<>>>[
  {
    NULL,
    ARRAY<UINT64>[NULL, 2],
    ARRAY<DOUBLE>[NULL, 2.5]
  },
  {
    1,
    ARRAY<UINT64>[NULL, 5, 6],
    ARRAY<DOUBLE>[3.5, 1.5, -0.5]
  },
  {
    2,
    ARRAY<UINT64>[2, 3, 3],
    ARRAY<DOUBLE>[NULL, 1.5, 1.5]
  },
  {3, ARRAY<UINT64>[1], ARRAY<DOUBLE>[2.5]},
  {4, ARRAY<UINT64>[2], ARRAY<DOUBLE>[-1.5]}
]
--
WITH FEATURES: <none>
ERROR: generic::invalid_argument: ORDER BY in aggregate function is not supported [at 2:29]
       ARRAY_AGG(uint64_val ORDER BY uint64_val + 10),
                            ^

==

[name=aggregation_order_by_distinct]
SELECT int64_val,
       ARRAY_AGG(DISTINCT uint64_val ORDER BY uint64_val)
FROM TestTable
GROUP BY int64_val
--
WITH FEATURES: V_1_1_ORDER_BY_IN_AGGREGATE,V_1_1_LIMIT_IN_AGGREGATE
ARRAY<STRUCT<int64_val INT64, ARRAY<>>>[
  {
    NULL,
    ARRAY<UINT64>[NULL, 2]
  },
  {
    1,
    ARRAY<UINT64>[NULL, 5, 6]
  },
  {2, ARRAY<UINT64>[2, 3]},
  {3, ARRAY<UINT64>[1]},
  {4, ARRAY<UINT64>[2]}
]
--
WITH FEATURES: <none>
ERROR: generic::invalid_argument: ORDER BY in aggregate function is not supported [at 2:38]
       ARRAY_AGG(DISTINCT uint64_val ORDER BY uint64_val)
                                     ^
==

[name=array_concat_agg_order_by_array]
[test_features1=V_1_1_ORDER_BY_IN_AGGREGATE]
[test_features2=V_1_3_ARRAY_ORDERING]
SELECT ARRAY_CONCAT_AGG(x ORDER BY x)
FROM ((SELECT [6, 1] x) UNION ALL (SELECT [2]) UNION ALL (SELECT [5, 4]))
--
WITH FEATURES: V_1_1_ORDER_BY_IN_AGGREGATE,V_1_3_ARRAY_ORDERING
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<INT64>[2, 5, 4, 6, 1]}]
--
WITH FEATURES: V_1_1_ORDER_BY_IN_AGGREGATE
ERROR: generic::invalid_argument: ORDER BY does not support expressions of type ARRAY<INT64> [at 1:36]
SELECT ARRAY_CONCAT_AGG(x ORDER BY x)
                                   ^
--
WITH FEATURES: <none>
WITH FEATURES: V_1_3_ARRAY_ORDERING
ERROR: generic::invalid_argument: ORDER BY in aggregate function is not supported [at 1:27]
SELECT ARRAY_CONCAT_AGG(x ORDER BY x)
                          ^
==

[name=array_concat_agg_order_by_different_column]
SELECT ARRAY_CONCAT_AGG(x ORDER BY y)
FROM ((SELECT [6, 1] x, 2 y) UNION ALL (SELECT [2], 7) UNION ALL
      (SELECT [5, 4], 5))
--
WITH FEATURES: V_1_1_ORDER_BY_IN_AGGREGATE,V_1_1_LIMIT_IN_AGGREGATE
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<INT64>[6, 1, 5, 4, 2]}]
--
WITH FEATURES: <none>
ERROR: generic::invalid_argument: ORDER BY in aggregate function is not supported [at 1:27]
SELECT ARRAY_CONCAT_AGG(x ORDER BY y)
                          ^
==

[name=array_concat_agg_order_by_different_column_asc]
SELECT ARRAY_CONCAT_AGG(x ORDER BY y ASC)
FROM ((SELECT [6, 1] x, 2 y) UNION ALL (SELECT [2], 7) UNION ALL
      (SELECT [5, 4], 5))
--
WITH FEATURES: V_1_1_ORDER_BY_IN_AGGREGATE,V_1_1_LIMIT_IN_AGGREGATE
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<INT64>[6, 1, 5, 4, 2]}]
--
WITH FEATURES: <none>
ERROR: generic::invalid_argument: ORDER BY in aggregate function is not supported [at 1:27]
SELECT ARRAY_CONCAT_AGG(x ORDER BY y ASC)
                          ^
==

[name=array_concat_agg_order_by_different_column_desc]
SELECT ARRAY_CONCAT_AGG(x ORDER BY y DESC)
FROM ((SELECT [6, 1] x, 2 y) UNION ALL (SELECT [2], 7) UNION ALL
      (SELECT [5, 4], 5))
--
WITH FEATURES: V_1_1_ORDER_BY_IN_AGGREGATE,V_1_1_LIMIT_IN_AGGREGATE
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<INT64>[2, 5, 4, 6, 1]}]
--
WITH FEATURES: <none>
ERROR: generic::invalid_argument: ORDER BY in aggregate function is not supported [at 1:27]
SELECT ARRAY_CONCAT_AGG(x ORDER BY y DESC)
                          ^
==

[name=array_concat_agg_order_by_computed_column]
SELECT ARRAY_CONCAT_AGG(x ORDER BY y+10)
FROM ((SELECT [6, 1] x, 2 y) UNION ALL (SELECT [2], 7) UNION ALL
      (SELECT [5, 4], 5))
--
WITH FEATURES: V_1_1_ORDER_BY_IN_AGGREGATE,V_1_1_LIMIT_IN_AGGREGATE
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<INT64>[6, 1, 5, 4, 2]}]
--
WITH FEATURES: <none>
ERROR: generic::invalid_argument: ORDER BY in aggregate function is not supported [at 1:27]
SELECT ARRAY_CONCAT_AGG(x ORDER BY y+10)
                          ^
==

[name=array_concat_agg_with_group_by_order_by]
SELECT w, ARRAY_CONCAT_AGG(x ORDER BY y)
FROM (SELECT 1 as w, [1, NULL] as x, 2 as y UNION ALL SELECT 2, [NULL, 2], 3
      UNION ALL SELECT 1, [3], 1 UNION ALL SELECT 3, NULL, 5
      UNION ALL SELECT 2, [4], 4) foo
GROUP BY w;
--
WITH FEATURES: V_1_1_ORDER_BY_IN_AGGREGATE,V_1_1_LIMIT_IN_AGGREGATE
ARRAY<STRUCT<w INT64, ARRAY<>>>[
  {
    1,
    ARRAY<INT64>[3, 1, NULL]
  },
  {
    2,
    ARRAY<INT64>[NULL, 2, 4]
  },
  {3, ARRAY<INT64>(NULL)}
]
--
WITH FEATURES: <none>
ERROR: generic::invalid_argument: ORDER BY in aggregate function is not supported [at 1:30]
SELECT w, ARRAY_CONCAT_AGG(x ORDER BY y)
                             ^
==

[name=aggregate_order_by_correlated_column_1]
SELECT b, (SELECT ARRAY_AGG(outer_table.b ORDER BY outer_table.b)
           FROM outer_table.a.repeated_uint32_val)
FROM (SELECT NEW zetasql_test__.KitchenSinkPB(
                     1 AS int64_key_1,
                     2 AS int64_key_2,
                     ARRAY<UINT32>[7, 8, 9]
                         as repeated_uint32_val) AS a, "abc" b UNION ALL
      SELECT NEW zetasql_test__.KitchenSinkPB(
                     1 AS int64_key_1,
                     2 AS int64_key_2) AS a, "def" b) AS outer_table
--
WITH FEATURES: V_1_1_ORDER_BY_IN_AGGREGATE,V_1_1_LIMIT_IN_AGGREGATE
ARRAY<STRUCT<b STRING, ARRAY<>>>[
  {"def", ARRAY<STRING>(NULL)},
  {
    "abc",
    ARRAY<STRING>["abc", "abc", "abc"]
  }
]
--
WITH FEATURES: <none>
ERROR: generic::invalid_argument: ORDER BY in aggregate function is not supported [at 1:43]
SELECT b, (SELECT ARRAY_AGG(outer_table.b ORDER BY outer_table.b)
                                          ^
==

[name=aggregate_order_by_correlated_column_2]
SELECT b, (SELECT ARRAY_AGG(CAST(r AS string) ORDER BY outer_table.b, r)
           FROM outer_table.a.repeated_uint32_val r)
FROM (SELECT NEW zetasql_test__.KitchenSinkPB(
                     1 AS int64_key_1,
                     2 AS int64_key_2,
                     ARRAY<uint32>[8, 7, 9]
                         as repeated_uint32_val) AS a, "abc" b UNION ALL
      SELECT NEW zetasql_test__.KitchenSinkPB(
                     1 AS int64_key_1,
                     2 AS int64_key_2) AS a, "def" b) AS outer_table
--
WITH FEATURES: V_1_1_ORDER_BY_IN_AGGREGATE,V_1_1_LIMIT_IN_AGGREGATE
ARRAY<STRUCT<b STRING, ARRAY<>>>[
  {"def", ARRAY<STRING>(NULL)},
  {
    "abc",
    ARRAY<STRING>["7", "8", "9"]
  }
]
--
WITH FEATURES: <none>
ERROR: generic::invalid_argument: ORDER BY in aggregate function is not supported [at 1:47]
SELECT b, (SELECT ARRAY_AGG(CAST(r AS string) ORDER BY outer_table.b, r)
                                              ^
==

[name=aggregation_order_by_limit_test_table]
SELECT int64_val,
       ARRAY_AGG(bool_val ORDER BY bool_val LIMIT 0),
       ARRAY_AGG(uint64_val ORDER BY uint64_val LIMIT 2),
       ARRAY_AGG(double_val ORDER BY double_val LIMIT 4),
       STRING_AGG(string_val ORDER BY string_val LIMIT 0),
       STRING_AGG(string_val ORDER BY string_val LIMIT 2),
       STRING_AGG(string_val ORDER BY string_val LIMIT 100)
FROM TestTable
GROUP BY int64_val
--
WITH FEATURES: V_1_1_ORDER_BY_IN_AGGREGATE,V_1_1_LIMIT_IN_AGGREGATE
ARRAY<STRUCT<int64_val INT64, ARRAY<>, ARRAY<>, ARRAY<>, STRING, STRING, STRING>>[
  {
    NULL,
    ARRAY<BOOL>(NULL),
    ARRAY<UINT64>[NULL, 2],
    ARRAY<DOUBLE>[NULL, 2.5],
    NULL,
    "ghi",
    "ghi"
  },
  {
    1,
    ARRAY<BOOL>(NULL),
    ARRAY<UINT64>[NULL, 5],
    ARRAY<DOUBLE>[-0.5, 1.5, 3.5],
    NULL,
    "abc,def",
    "abc,def,zyx"
  },
  {
    2,
    ARRAY<BOOL>(NULL),
    ARRAY<UINT64>[2, 3],
    ARRAY<DOUBLE>[NULL, 1.5, 1.5],
    NULL,
    "abc,nvm",
    "abc,nvm,xyz"
  },
  {3,
   ARRAY<BOOL>(NULL),
   ARRAY<UINT64>[1],
   ARRAY<DOUBLE>[2.5],
   NULL,
   "goo",
   "goo"},
  {4,
   ARRAY<BOOL>(NULL),
   ARRAY<UINT64>[2],
   ARRAY<DOUBLE>[-1.5],
   NULL,
   "ijk",
   "ijk"}
]
--
WITH FEATURES: <none>
ERROR: generic::invalid_argument: ORDER BY in aggregate function is not supported [at 2:27]
       ARRAY_AGG(bool_val ORDER BY bool_val LIMIT 0),
                          ^
==

[name=aggregation_order_by_limit_order_by_different_columns]
SELECT int64_val,
       ARRAY_AGG(bool_val ORDER BY uint64_val LIMIT 1),
       ARRAY_AGG(uint64_val ORDER BY double_val LIMIT 3),
       ARRAY_AGG(double_val ORDER BY string_val LIMIT 2),
       STRING_AGG(string_val ORDER BY bool_val LIMIT 3),
       STRING_AGG(string_val ORDER BY uint64_val LIMIT 1),
       STRING_AGG(string_val ORDER BY double_val LIMIT 3)
FROM TestTable
GROUP BY int64_val
--

WITH FEATURES: V_1_1_ORDER_BY_IN_AGGREGATE,V_1_1_LIMIT_IN_AGGREGATE
ARRAY<STRUCT<int64_val INT64, ARRAY<>, ARRAY<>, ARRAY<>, STRING, STRING, STRING>>[
  {
    NULL,
    ARRAY<BOOL>[NULL],
    ARRAY<UINT64>[NULL, 2],
    ARRAY<DOUBLE>[NULL, 2.5],
    "ghi",
    "ghi",
    "ghi"
  },
  {
    1,
    ARRAY<BOOL>[false],
    ARRAY<UINT64>[5, 6, NULL],
    ARRAY<DOUBLE>[3.5, 1.5],
    "def,abc,zyx",
    "abc",
    "zyx,def,abc"
  },
  {
    2,
    ARRAY<BOOL>[true],
    ARRAY<UINT64>[2, 3, 3],
    ARRAY<DOUBLE>[1.5, 1.5],
    "nvm,abc,xyz",
    "xyz",
    "xyz,abc,nvm"
  },
  {3,
   ARRAY<BOOL>[true],
   ARRAY<UINT64>[1],
   ARRAY<DOUBLE>[2.5],
   "goo",
   "goo",
   "goo"},
  {4,
   ARRAY<BOOL>[true],
   ARRAY<UINT64>[2],
   ARRAY<DOUBLE>[-1.5],
   "ijk",
   "ijk",
   "ijk"}
]
--
WITH FEATURES: <none>
ERROR: generic::invalid_argument: ORDER BY in aggregate function is not supported [at 2:27]
       ARRAY_AGG(bool_val ORDER BY uint64_val LIMIT 1),
                          ^
==

# LIMIT in aggregates will be applied after filtering out NULLs if the
# aggregate function ignores NULL. As shown in the result below,
# ARRAY_AGG keeps NULLs in the output but STRING_AGG does not.
[name=aggregation_order_by_limit_without_group_by]
SELECT ARRAY_AGG(int64_val ORDER BY int64_val LIMIT 0),
       ARRAY_AGG(int64_val ORDER BY int64_val LIMIT 2),
       ARRAY_AGG(int64_val ORDER BY int64_val LIMIT 4),
       ARRAY_AGG(string_val ORDER BY string_val LIMIT 0),
       ARRAY_AGG(string_val ORDER BY string_val LIMIT 1),
       ARRAY_AGG(string_val ORDER BY string_val LIMIT 2),
       ARRAY_AGG(string_val ORDER BY string_val LIMIT 100),
       STRING_AGG(string_val ORDER BY string_val LIMIT 0),
       STRING_AGG(string_val ORDER BY string_val LIMIT 1),
       STRING_AGG(string_val ORDER BY string_val LIMIT 2),
       STRING_AGG(string_val ORDER BY string_val LIMIT 100)
FROM TestTable
--
WITH FEATURES: V_1_1_ORDER_BY_IN_AGGREGATE,V_1_1_LIMIT_IN_AGGREGATE
ARRAY<STRUCT<ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             STRING,
             STRING,
             STRING,
             STRING>>
[{ARRAY<INT64>(NULL),
  ARRAY<INT64>[NULL, NULL],
  ARRAY<INT64>[NULL, NULL, 1, 1],
  ARRAY<STRING>(NULL),
  ARRAY<STRING>[NULL],
  ARRAY<STRING>[NULL, "abc"],
  ARRAY<STRING>[NULL,
                "abc",
                "abc",
                "def",
                "ghi",
                "goo",
                "ijk",
                "nvm",
                "xyz",
                "zyx"],
  NULL,
  "abc",
  "abc,abc",
  "abc,abc,def,ghi,goo,ijk,nvm,xyz,zyx"}]
--
WITH FEATURES: <none>
ERROR: generic::invalid_argument: ORDER BY in aggregate function is not supported [at 1:28]
SELECT ARRAY_AGG(int64_val ORDER BY int64_val LIMIT 0),
                           ^
==

[name=aggregation_order_by_limit_desc]
SELECT ARRAY_AGG(int64_val ORDER BY int64_val DESC LIMIT 0),
       ARRAY_AGG(int64_val ORDER BY int64_val DESC LIMIT 2),
       ARRAY_AGG(int64_val ORDER BY int64_val DESC LIMIT 4),
       STRING_AGG(string_val ORDER BY string_val DESC LIMIT 0),
       STRING_AGG(string_val ORDER BY string_val DESC LIMIT 2),
       STRING_AGG(string_val ORDER BY string_val DESC LIMIT 100)
FROM TestTable
--
WITH FEATURES: V_1_1_ORDER_BY_IN_AGGREGATE,V_1_1_LIMIT_IN_AGGREGATE
ARRAY<STRUCT<ARRAY<>, ARRAY<>, ARRAY<>, STRING, STRING, STRING>>[
  {
    ARRAY<INT64>(NULL),
    ARRAY<INT64>[4, 3],
    ARRAY<INT64>[4, 3, 2, 2],
    NULL,
    "zyx,xyz",
    "zyx,xyz,nvm,ijk,goo,ghi,def,abc,abc"
  }
]
--
WITH FEATURES: <none>
ERROR: generic::invalid_argument: ORDER BY in aggregate function is not supported [at 1:28]
SELECT ARRAY_AGG(int64_val ORDER BY int64_val DESC LIMIT 0),
                           ^
==

[name=aggregation_order_by_limit_computed_order_by_exprs]
SELECT int64_val,
       ARRAY_AGG(uint64_val ORDER BY uint64_val + 10 LIMIT 2),
       ARRAY_AGG(double_val ORDER BY double_val * -2.0 LIMIT 5)
FROM TestTable
GROUP BY int64_val
--
WITH FEATURES: V_1_1_ORDER_BY_IN_AGGREGATE,V_1_1_LIMIT_IN_AGGREGATE
ARRAY<STRUCT<int64_val INT64, ARRAY<>, ARRAY<>>>[
  {
    NULL,
    ARRAY<UINT64>[NULL, 2],
    ARRAY<DOUBLE>[NULL, 2.5]
  },
  {
    1,
    ARRAY<UINT64>[NULL, 5],
    ARRAY<DOUBLE>[3.5, 1.5, -0.5]
  },
  {
    2,
    ARRAY<UINT64>[2, 3],
    ARRAY<DOUBLE>[NULL, 1.5, 1.5]
  },
  {3, ARRAY<UINT64>[1], ARRAY<DOUBLE>[2.5]},
  {4, ARRAY<UINT64>[2], ARRAY<DOUBLE>[-1.5]}
]
--
WITH FEATURES: <none>
ERROR: generic::invalid_argument: ORDER BY in aggregate function is not supported [at 2:29]
       ARRAY_AGG(uint64_val ORDER BY uint64_val + 10 LIMIT 2),
                            ^
==

[name=aggregation_order_by_distinct_limit]
SELECT int64_val,
       ARRAY_AGG(DISTINCT uint64_val ORDER BY uint64_val LIMIT 2)
FROM TestTable
GROUP BY int64_val
--
WITH FEATURES: V_1_1_ORDER_BY_IN_AGGREGATE,V_1_1_LIMIT_IN_AGGREGATE
ARRAY<STRUCT<int64_val INT64, ARRAY<>>>[
  {
    NULL,
    ARRAY<UINT64>[NULL, 2]
  },
  {
    1,
    ARRAY<UINT64>[NULL, 5]
  },
  {2, ARRAY<UINT64>[2, 3]},
  {3, ARRAY<UINT64>[1]},
  {4, ARRAY<UINT64>[2]}
]
--
WITH FEATURES: <none>
ERROR: generic::invalid_argument: ORDER BY in aggregate function is not supported [at 2:38]
       ARRAY_AGG(DISTINCT uint64_val ORDER BY uint64_val LIMIT 2)
                                     ^
==

[name=aggregation_order_by_distinct_limit_2]
SELECT ARRAY_AGG(DISTINCT int64_val ORDER BY int64_val),
       ARRAY_AGG(DISTINCT int64_val ORDER BY int64_val LIMIT 2)
FROM TestTable
--
WITH FEATURES: V_1_1_ORDER_BY_IN_AGGREGATE,V_1_1_LIMIT_IN_AGGREGATE
ARRAY<STRUCT<ARRAY<>, ARRAY<>>>[
  {
    ARRAY<INT64>[NULL, 1, 2, 3, 4],
    ARRAY<INT64>[NULL, 1]
  }
]
--
WITH FEATURES: <none>
ERROR: generic::invalid_argument: ORDER BY in aggregate function is not supported [at 1:37]
SELECT ARRAY_AGG(DISTINCT int64_val ORDER BY int64_val),
                                    ^
==

[name=aggregation_order_by_limit_param]
[parameters=2 as lmt]
SELECT int64_val,
       ARRAY_AGG(bool_val ORDER BY bool_val LIMIT @lmt),
       ARRAY_AGG(uint64_val ORDER BY uint64_val LIMIT @lmt),
       ARRAY_AGG(double_val ORDER BY double_val LIMIT @lmt),
       STRING_AGG(string_val ORDER BY string_val LIMIT @lmt)
FROM TestTable
GROUP BY int64_val
--
WITH FEATURES: V_1_1_ORDER_BY_IN_AGGREGATE,V_1_1_LIMIT_IN_AGGREGATE
ARRAY<STRUCT<int64_val INT64, ARRAY<>, ARRAY<>, ARRAY<>, STRING>>[
  {
    NULL,
    ARRAY<BOOL>[NULL, true],
    ARRAY<UINT64>[NULL, 2],
    ARRAY<DOUBLE>[NULL, 2.5],
    "ghi"
  },
  {
    1,
    ARRAY<BOOL>[false, false],
    ARRAY<UINT64>[NULL, 5],
    ARRAY<DOUBLE>[-0.5, 1.5],
    "abc,def"
  },
  {
    2,
    ARRAY<BOOL>[false, true],
    ARRAY<UINT64>[2, 3],
    ARRAY<DOUBLE>[NULL, 1.5],
    "abc,nvm"
  },
  {3, ARRAY<BOOL>[true], ARRAY<UINT64>[1], ARRAY<DOUBLE>[2.5], "goo"},
  {4, ARRAY<BOOL>[true], ARRAY<UINT64>[2], ARRAY<DOUBLE>[-1.5], "ijk"}
]
--
WITH FEATURES: <none>
ERROR: generic::invalid_argument: ORDER BY in aggregate function is not supported [at 2:27]
       ARRAY_AGG(bool_val ORDER BY bool_val LIMIT @lmt),
                          ^
==

[name=aggregation_order_by_limit_invalid]
SELECT int64_val,
       ARRAY_AGG(uint64_val ORDER BY uint64_val LIMIT -1),
       STRING_AGG(string_val ORDER BY string_val LIMIT -1)
FROM TestTable
GROUP BY int64_val
--
WITH FEATURES: <none>
WITH FEATURES: V_1_1_ORDER_BY_IN_AGGREGATE,V_1_1_LIMIT_IN_AGGREGATE
ERROR: generic::invalid_argument: Syntax error: Unexpected "-" [at 2:55]
       ARRAY_AGG(uint64_val ORDER BY uint64_val LIMIT -1),
                                                      ^
==

[name=aggregation_order_by_limit_param_invalid]
[parameters=-1 as lmt]
SELECT int64_val,
       ARRAY_AGG(uint64_val ORDER BY uint64_val LIMIT @lmt),
       STRING_AGG(string_val ORDER BY string_val LIMIT @lmt)
FROM TestTable
GROUP BY int64_val
--
WITH FEATURES: <none>
ERROR: generic::invalid_argument: ORDER BY in aggregate function is not supported [at 2:29]
       ARRAY_AGG(uint64_val ORDER BY uint64_val LIMIT @lmt),
                            ^

--
WITH FEATURES: V_1_1_ORDER_BY_IN_AGGREGATE,V_1_1_LIMIT_IN_AGGREGATE
ERROR: generic::out_of_range: Limit requires non-negative count
==

[test_features1=V_1_1_ORDER_BY_IN_AGGREGATE]
[test_features2=V_1_1_LIMIT_IN_AGGREGATE]
[name=aggregation_order_by_limit_same_values]
SELECT key,
       ARRAY_AGG(int64_val LIMIT 0),
       ARRAY_AGG(int64_val ORDER BY int64_val LIMIT 0),
       ARRAY_AGG(int64_val LIMIT 2),
       ARRAY_AGG(int64_val ORDER BY int64_val LIMIT 2),
       ARRAY_AGG(int64_val LIMIT 100),
       ARRAY_AGG(int64_val ORDER BY int64_val LIMIT 100),
       STRING_AGG(string_val LIMIT 0),
       STRING_AGG(string_val ORDER BY string_val LIMIT 0),
       STRING_AGG(string_val LIMIT 2),
       STRING_AGG(string_val ORDER BY string_val LIMIT 2),
       STRING_AGG(string_val LIMIT 100),
       STRING_AGG(string_val ORDER BY string_val LIMIT 100)
FROM TestTableSameValues
GROUP BY key
--
WITH FEATURES: V_1_1_ORDER_BY_IN_AGGREGATE,V_1_1_LIMIT_IN_AGGREGATE
ARRAY<STRUCT<key INT64,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             STRING,
             STRING,
             STRING,
             STRING,
             STRING,
             STRING>>
[{
   1,
   ARRAY<INT64>(NULL),
   ARRAY<INT64>(NULL),
   ARRAY<INT64>[10, 10],
   ARRAY<INT64>[10, 10],
   ARRAY<INT64>[10, 10, 10, 10, 10],
   ARRAY<INT64>[10, 10, 10, 10, 10],
   NULL,
   NULL,
   "abc,abc",
   "abc,abc",
   "abc,abc,abc,abc,abc",
   "abc,abc,abc,abc,abc"
 },
 {
   2,
   ARRAY<INT64>(NULL),
   ARRAY<INT64>(NULL),
   ARRAY<INT64>[10, 10],
   ARRAY<INT64>[10, 10],
   ARRAY<INT64>[10, 10, 10, 10, 10],
   ARRAY<INT64>[10, 10, 10, 10, 10],
   NULL,
   NULL,
   "abc,abc",
   "abc,abc",
   "abc,abc,abc,abc,abc",
   "abc,abc,abc,abc,abc"
 }]
--
WITH FEATURES: <none>
WITH FEATURES: V_1_1_ORDER_BY_IN_AGGREGATE
ERROR: generic::invalid_argument: LIMIT in aggregate function arguments is not supported [at 2:28]
       ARRAY_AGG(int64_val LIMIT 0),
                           ^
--
WITH FEATURES: V_1_1_LIMIT_IN_AGGREGATE
ERROR: generic::invalid_argument: ORDER BY in aggregate function is not supported [at 3:28]
       ARRAY_AGG(int64_val ORDER BY int64_val LIMIT 0),
                           ^
==

[test_features1=V_1_1_ORDER_BY_IN_AGGREGATE]
[test_features2=V_1_1_LIMIT_IN_AGGREGATE]
[name=aggregation_order_by_limit_only_same_values]
SELECT key,
       ARRAY_AGG(int64_val LIMIT 0),
       ARRAY_AGG(int64_val LIMIT 2),
       ARRAY_AGG(int64_val LIMIT 100),
       STRING_AGG(string_val LIMIT 0),
       STRING_AGG(string_val LIMIT 2),
       STRING_AGG(string_val LIMIT 100)
FROM TestTableSameValues
GROUP BY key
--
WITH FEATURES: V_1_1_ORDER_BY_IN_AGGREGATE,V_1_1_LIMIT_IN_AGGREGATE
WITH FEATURES: V_1_1_LIMIT_IN_AGGREGATE
ARRAY<STRUCT<key INT64, ARRAY<>, ARRAY<>, ARRAY<>, STRING, STRING, STRING>>[
  {
    1,
    ARRAY<INT64>(NULL),
    ARRAY<INT64>[10, 10],
    ARRAY<INT64>[10, 10, 10, 10, 10],
    NULL,
    "abc,abc",
    "abc,abc,abc,abc,abc"
  },
  {
    2,
    ARRAY<INT64>(NULL),
    ARRAY<INT64>[10, 10],
    ARRAY<INT64>[10, 10, 10, 10, 10],
    NULL,
    "abc,abc",
    "abc,abc,abc,abc,abc"
  }
]
--
WITH FEATURES: <none>
WITH FEATURES: V_1_1_ORDER_BY_IN_AGGREGATE
ERROR: generic::invalid_argument: LIMIT in aggregate function arguments is not supported [at 2:28]
       ARRAY_AGG(int64_val LIMIT 0),
                           ^
==

[name=aggregation_order_by_limit_array_concat_agg]
SELECT ARRAY_CONCAT_AGG(a ORDER BY int64_val),
       ARRAY_CONCAT_AGG(a ORDER BY int64_val DESC),
       ARRAY_CONCAT_AGG(a ORDER BY int64_val LIMIT 0),
       ARRAY_CONCAT_AGG(a ORDER BY int64_val LIMIT 2),
       ARRAY_CONCAT_AGG(a ORDER BY int64_val LIMIT 100),
       ARRAY_CONCAT_AGG(b ORDER BY int64_val),
       ARRAY_CONCAT_AGG(b ORDER BY int64_val DESC),
       ARRAY_CONCAT_AGG(b ORDER BY int64_val LIMIT 0),
       ARRAY_CONCAT_AGG(b ORDER BY int64_val LIMIT 2),
       ARRAY_CONCAT_AGG(b ORDER BY int64_val LIMIT 100)
FROM (
  SELECT int64_val,
         ARRAY_AGG(uint64_val ORDER BY uint64_val) AS a,
         ARRAY_AGG(string_val ORDER BY string_val) AS b
  FROM TestTable
  GROUP BY int64_val
)
--
WITH FEATURES: V_1_1_ORDER_BY_IN_AGGREGATE,V_1_1_LIMIT_IN_AGGREGATE
ARRAY<STRUCT<ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>>>
[{ARRAY<UINT64>[NULL, 2, NULL, 5, 6, 2, 3, 3, 1, 2],
  ARRAY<UINT64>[2, 1, 2, 3, 3, NULL, 5, 6, NULL, 2],
  ARRAY<UINT64>(NULL),
  ARRAY<UINT64>[NULL, 2, NULL, 5, 6],
  ARRAY<UINT64>[NULL, 2, NULL, 5, 6, 2, 3, 3, 1, 2],
  ARRAY<STRING>[NULL,
                "ghi",
                "abc",
                "def",
                "zyx",
                "abc",
                "nvm",
                "xyz",
                "goo",
                "ijk"],
  ARRAY<STRING>["ijk",
                "goo",
                "abc",
                "nvm",
                "xyz",
                "abc",
                "def",
                "zyx",
                NULL,
                "ghi"],
  ARRAY<STRING>(NULL),
  ARRAY<STRING>[NULL, "ghi", "abc", "def", "zyx"],
  ARRAY<STRING>[NULL,
                "ghi",
                "abc",
                "def",
                "zyx",
                "abc",
                "nvm",
                "xyz",
                "goo",
                "ijk"]}]
--
WITH FEATURES: <none>
ERROR: generic::invalid_argument: ORDER BY in aggregate function is not supported [at 13:31]
         ARRAY_AGG(uint64_val ORDER BY uint64_val) AS a,
                              ^
==

[required_features=V_1_1_ORDER_BY_IN_AGGREGATE,V_1_3_NULLS_FIRST_LAST_IN_ORDER_BY]
[name=aggregation_order_by_with_nulls_first_last]
SELECT MOD(IFNULL(int64_val, 0), 2),
       ARRAY_AGG(bool_val ORDER BY bool_val DESC NULLS FIRST),
       ARRAY_AGG(int64_val ORDER BY int64_val NULLS LAST),
       ARRAY_AGG(double_val ORDER BY double_val DESC NULLS LAST),
       STRING_AGG(string_val ORDER BY string_val NULLS FIRST)
FROM TestTable
GROUP BY 1
--
WITH FEATURES: V_1_1_ORDER_BY_IN_AGGREGATE,V_1_1_LIMIT_IN_AGGREGATE,V_1_3_NULLS_FIRST_LAST_IN_ORDER_BY
WITH FEATURES: V_1_1_ORDER_BY_IN_AGGREGATE,V_1_3_NULLS_FIRST_LAST_IN_ORDER_BY
ARRAY<STRUCT<INT64, ARRAY<>, ARRAY<>, ARRAY<>, STRING>>[
  {
    0,
    ARRAY<BOOL>[NULL, true, true, true, true, false],
    ARRAY<INT64>[2, 2, 2, 4, NULL, NULL],
    ARRAY<DOUBLE>[2.5, 1.5, 1.5, -1.5, NULL, NULL],
    "abc,ghi,ijk,nvm,xyz"
  },
  {
    1,
    ARRAY<BOOL>[true, false, false, false],
    ARRAY<INT64>[1, 1, 1, 3],
    ARRAY<DOUBLE>[3.5, 2.5, 1.5, -0.5],
    "abc,def,goo,zyx"
  }
]
==

[required_features=NUMERIC_TYPE]
[name=aggregation_order_by_numeric]
SELECT ARRAY_AGG(numeric_val ORDER BY numeric_val ASC),
       ARRAY_CONCAT_AGG(array_val ORDER BY numeric_val ASC),
       STRING_AGG(string_val ORDER BY numeric_val ASC),
       ARRAY_AGG(numeric_val ORDER BY numeric_val DESC),
       ARRAY_CONCAT_AGG(array_val ORDER BY numeric_val DESC),
       STRING_AGG(string_val ORDER BY numeric_val DESC),
       ARRAY_AGG(numeric_val ORDER BY numeric_val LIMIT 0),
       ARRAY_CONCAT_AGG(array_val ORDER BY numeric_val LIMIT 0),
       STRING_AGG(string_val ORDER BY numeric_val LIMIT 0),
       ARRAY_AGG(numeric_val ORDER BY numeric_val LIMIT 3),
       ARRAY_CONCAT_AGG(array_val ORDER BY numeric_val LIMIT 3),
       STRING_AGG(string_val ORDER BY numeric_val LIMIT 3)
FROM TestTableNumericValues
--
WITH FEATURES: NUMERIC_TYPE,V_1_1_ORDER_BY_IN_AGGREGATE,V_1_1_LIMIT_IN_AGGREGATE
ARRAY<STRUCT<ARRAY<>,
             ARRAY<>,
             STRING,
             ARRAY<>,
             ARRAY<>,
             STRING,
             ARRAY<>,
             ARRAY<>,
             STRING,
             ARRAY<>,
             ARRAY<>,
             STRING>>
[{ARRAY<NUMERIC>[
    NULL,
    -99999999999999999999999999999.999999999,
    -0.000000001,
    0,
    1,
    1.000000001,
    1.123456789,
    10,
    100,
    99999999999999999999999999999.999999999
  ],
  ARRAY<INT64>[4,
               5,
               6,
               22,
               23,
               24,
               NULL,
               16,
               17,
               18,
               1,
               2,
               3,
               25,
               26,
               27,
               7,
               8,
               9,
               10,
               11,
               12,
               28,
               29,
               30],
  "def,foo,jkl,abc,bar,ghi,abc,baz,jkl",
  ARRAY<NUMERIC>[
    99999999999999999999999999999.999999999,
    100,
    10,
    1.123456789,
    1.000000001,
    1,
    0,
    -0.000000001,
    -99999999999999999999999999999.999999999,
    NULL
  ],
  ARRAY<INT64>[28,
               29,
               30,
               10,
               11,
               12,
               7,
               8,
               9,
               25,
               26,
               27,
               1,
               2,
               3,
               16,
               17,
               18,
               NULL,
               22,
               23,
               24,
               4,
               5,
               6],
  "jkl,baz,abc,ghi,bar,abc,jkl,foo,def",
  ARRAY<NUMERIC>(NULL),
  ARRAY<INT64>(NULL),
  NULL,
  ARRAY<NUMERIC>[
    NULL,
    -99999999999999999999999999999.999999999,
    -0.000000001
  ],
  ARRAY<INT64>[4, 5, 6, 22, 23, 24, NULL],
  "def,foo,jkl"}]
--
WITH FEATURES: NUMERIC_TYPE
ERROR: generic::invalid_argument: ORDER BY in aggregate function is not supported [at 1:30]
SELECT ARRAY_AGG(numeric_val ORDER BY numeric_val ASC),
                             ^
==

[required_features=BIGNUMERIC_TYPE]
[name=aggregation_order_by_bignumeric]
SELECT ARRAY_AGG(bignumeric_val ORDER BY bignumeric_val ASC),
       ARRAY_CONCAT_AGG(array_val ORDER BY bignumeric_val ASC),
       STRING_AGG(string_val ORDER BY bignumeric_val ASC),
       ARRAY_AGG(bignumeric_val ORDER BY bignumeric_val DESC),
       ARRAY_CONCAT_AGG(array_val ORDER BY bignumeric_val DESC),
       STRING_AGG(string_val ORDER BY bignumeric_val DESC),
       ARRAY_AGG(bignumeric_val ORDER BY bignumeric_val LIMIT 0),
       ARRAY_CONCAT_AGG(array_val ORDER BY bignumeric_val LIMIT 0),
       STRING_AGG(string_val ORDER BY bignumeric_val LIMIT 0),
       ARRAY_AGG(bignumeric_val ORDER BY bignumeric_val LIMIT 3),
       ARRAY_CONCAT_AGG(array_val ORDER BY bignumeric_val LIMIT 3),
       STRING_AGG(string_val ORDER BY bignumeric_val LIMIT 3)
FROM TestTableBigNumericValues
--
WITH FEATURES: BIGNUMERIC_TYPE,V_1_1_ORDER_BY_IN_AGGREGATE,V_1_1_LIMIT_IN_AGGREGATE
ARRAY<STRUCT<ARRAY<>,
             ARRAY<>,
             STRING,
             ARRAY<>,
             ARRAY<>,
             STRING,
             ARRAY<>,
             ARRAY<>,
             STRING,
             ARRAY<>,
             ARRAY<>,
             STRING>>
[
  {
    ARRAY<BIGNUMERIC>[
      NULL,
      -578960446186580977117854925043439539266.34992332820282019728792003956564819968,
      -0.00000000000000000000000000000000000001,
      0,
      1,
      1.00000000000000000000000000000000000001,
      1.12345678901234567890123456789012345678,
      10,
      100,
      578960446186580977117854925043439539266.34992332820282019728792003956564819967
    ],
    ARRAY<INT64>[4,
                 5,
                 6,
                 22,
                 23,
                 24,
                 NULL,
                 16,
                 17,
                 18,
                 1,
                 2,
                 3,
                 25,
                 26,
                 27,
                 7,
                 8,
                 9,
                 10,
                 11,
                 12,
                 28,
                 29,
                 30],
    "def,foo,jkl,abc,bar,ghi,abc,baz,jkl",
    ARRAY<BIGNUMERIC>[
      578960446186580977117854925043439539266.34992332820282019728792003956564819967,
      100,
      10,
      1.12345678901234567890123456789012345678,
      1.00000000000000000000000000000000000001,
      1,
      0,
      -0.00000000000000000000000000000000000001,
      -578960446186580977117854925043439539266.34992332820282019728792003956564819968,
      NULL
    ],
    ARRAY<INT64>[28,
                 29,
                 30,
                 10,
                 11,
                 12,
                 7,
                 8,
                 9,
                 25,
                 26,
                 27,
                 1,
                 2,
                 3,
                 16,
                 17,
                 18,
                 NULL,
                 22,
                 23,
                 24,
                 4,
                 5,
                 6],
    "jkl,baz,abc,ghi,bar,abc,jkl,foo,def",
    ARRAY<BIGNUMERIC>(NULL),
    ARRAY<INT64>(NULL),
    NULL,
    ARRAY<BIGNUMERIC>[
      NULL,
      -578960446186580977117854925043439539266.34992332820282019728792003956564819968,
      -0.00000000000000000000000000000000000001
    ],
    ARRAY<INT64>[4, 5, 6, 22, 23, 24, NULL],
    "def,foo,jkl"
  }
]
--
WITH FEATURES: BIGNUMERIC_TYPE
ERROR: generic::invalid_argument: ORDER BY in aggregate function is not supported [at 1:33]
SELECT ARRAY_AGG(bignumeric_val ORDER BY bignumeric_val ASC),
                                ^
