[load_proto_files=zetasql/testdata/test_schema.proto]
[load_proto_names=zetasql_test__.TestNullabilityInnerPB]
[default required_features=V_1_1_HAVING_IN_AGGREGATE]
[prepare_database]
CREATE TABLE TableAllTypes AS
SELECT CAST(1 AS int64) as row_id,
       CAST(true AS bool) as bool_val,
       CAST(-1 AS int32) as int32_val,
       CAST(-1 AS int64) as int64_val,
       CAST(1 AS uint32) as uint32_val,
       CAST(1 AS uint64) as uint64_val,
       CAST(0.125 AS float) as float_val,
       CAST(0.125 AS double) as double_val,
       CAST("1" AS string) as str_val,
       CAST("1" AS BYTES) as bytes_val,
       CAST('2014-01-01' AS DATE) as date_val,
       TIMESTAMP '2014-01-01 00:00:01 UTC' as timestamp_val
UNION ALL
SELECT CAST(2 AS int64) as row_id,
       CAST(true AS bool) as bool_val,
       CAST(-1 AS int32) as int32_val,
       CAST(-1 AS int64) as int64_val,
       CAST(1 AS uint32) as uint32_val,
       CAST(1 AS uint64) as uint64_val,
       CAST("NaN" AS float) as float_val,
       CAST("+Inf" AS double) as double_val,
       CAST("1" AS string) as str_val,
       CAST("1" AS BYTES) as bytes_val,
       CAST('2014-01-01' AS DATE) as date_val,
       TIMESTAMP '2014-01-01 00:00:01 UTC' as timestamp_val
UNION ALL
SELECT CAST(3 AS int64) as row_id,
       CAST(true AS bool) as bool_val,
       CAST(-1 AS int32) as int32_val,
       CAST(-1 AS int64) as int64_val,
       CAST(1 AS uint32) as uint32_val,
       CAST(1 AS uint64) as uint64_val,
       CAST("+Inf" AS float) as float_val,
       CAST("-Inf" AS double) as double_val,
       CAST("1" AS string) as str_val,
       CAST("1" AS BYTES) as bytes_val,
       CAST('2014-01-01' AS DATE) as date_val,
       TIMESTAMP '2014-01-01 00:00:01 UTC' as timestamp_val
UNION ALL
SELECT CAST(4 AS int64) as row_id,
       CAST(false AS bool) as bool_val,
       CAST(-2 AS int32) as int32_val,
       CAST(-2 AS int64) as int64_val,
       CAST(2 AS uint32) as uint32_val,
       CAST(2 AS uint64) as uint64_val,
       CAST(0.25 AS float) as float_val,
       CAST(pow(0.1, 324) AS double) as double_val, #positive 0 of type double
       CAST("2" AS string) as str_val,
       CAST("2" AS BYTES) as bytes_val,
       CAST('2014-01-02' AS DATE) as date_val,
       TIMESTAMP '2014-01-02 00:00:02 UTC' as timestamp_val
UNION ALL
SELECT CAST(5 AS int64) as row_id,
       CAST(false AS bool) as bool_val,
       CAST(-2 AS int32) as int32_val,
       CAST(-2 AS int64) as int64_val,
       CAST(2 AS uint32) as uint32_val,
       CAST(2 AS uint64) as uint64_val,
       CAST("-Inf" AS float) as float_val,
       CAST(0.25 AS double) as double_val,
       CAST("2" AS string) as str_val,
       CAST("2" AS BYTES) as bytes_val,
       CAST('2014-01-02' AS DATE) as date_val,
       TIMESTAMP '2014-01-02 00:00:02 UTC' as timestamp_val
UNION ALL
SELECT CAST(6 AS int64) as row_id,
       CAST(true AS bool) as bool_val,
       CAST(-3 AS int32) as int32_val,
       CAST(-3 AS int64) as int64_val,
       CAST(3 AS uint32) as uint32_val,
       CAST(3 AS uint64) as uint64_val,
       CAST(0.375 AS float) as float_val,
       CAST(0.375 AS double) as double_val,
       CAST("3" AS string) as str_val,
       CAST("3" AS BYTES) as bytes_val,
       CAST('2014-01-03' AS DATE) as date_val,
       TIMESTAMP '2014-01-03 00:00:03 UTC' as timestamp_val
UNION ALL
SELECT CAST(7 AS int64) as row_id,
       CAST(false AS bool) as bool_val,
       CAST(-4 AS int32) as int32_val,
       CAST(-4 AS int64) as int64_val,
       CAST(4 AS uint32) as uint32_val,
       CAST(4 AS uint64) as uint64_val,
       CAST(0.5 AS float) as float_val,
       CAST(0.5 AS double) as double_val,
       CAST("4" AS string) as str_val,
       CAST("4" AS BYTES) as bytes_val,
       CAST('2014-01-04' AS DATE) as date_val,
       TIMESTAMP '2014-01-04 00:00:04 UTC' as timestamp_val
UNION ALL
SELECT CAST(8 AS int64) as row_id,
       CAST(NULL AS bool) as bool_val,
       CAST(NULL AS int32) as int32_val,
       CAST(NULL AS int64) as int64_val,
       CAST(NULL AS uint32) as uint32_val,
       CAST(NULL AS uint64) as uint64_val,
       CAST(NULL AS float) as float_val,
       CAST(NULL AS double) as double_val,
       CAST(NULL AS string) as str_val,
       CAST(NULL AS BYTES) as bytes_val,
       CAST(NULL AS DATE) as date_val,
       CAST(NULL AS TIMESTAMP) as timestamp_val
UNION ALL
SELECT CAST(9 AS int64) as row_id,
       CAST(NULL AS bool) as bool_val,
       CAST(NULL AS int32) as int32_val,
       CAST(NULL AS int64) as int64_val,
       CAST(NULL AS uint32) as uint32_val,
       CAST(NULL AS uint64) as uint64_val,
       CAST(-pow(0.1, 46) AS float) as float_val, #negative 0 of type float
       CAST("NaN" AS double) as double_val,
       CAST(NULL AS string) as str_val,
       CAST(NULL AS BYTES) as bytes_val,
       CAST(NULL AS DATE) as date_val,
       CAST(NULL AS TIMESTAMP) as timestamp_val
UNION ALL
SELECT CAST(10 AS int64) as row_id,
       CAST(true AS bool) as bool_val,
       CAST(1 AS int32) as int32_val,
       CAST(1 AS int64) as int64_val,
       CAST(11 AS uint32) as uint32_val,
       CAST(11 AS uint64) as uint64_val,
       CAST(0.625 AS float) as float_val,
       CAST(0.625 AS double) as double_val,
       CAST("6" AS string) as str_val,
       CAST("7" AS BYTES) as bytes_val,
       CAST('2014-01-08' AS DATE) as date_val,
       TIMESTAMP '2014-01-07 00:00:01 UTC' as timestamp_val
UNION ALL
SELECT CAST(11 AS int64) as row_id,
       CAST(false AS bool) as bool_val,
       CAST(5 AS int32) as int32_val,
       CAST(3 AS int64) as int64_val,
       CAST(11 AS uint32) as uint32_val,
       CAST(8 AS uint64) as uint64_val,
       CAST(-0.125 AS float) as float_val,
       CAST(-0.125 AS double) as double_val,
       CAST("123" AS string) as str_val,
       CAST("123" AS BYTES) as bytes_val,
       CAST('2014-02-01' AS DATE) as date_val,
       TIMESTAMP '2014-03-01 00:00:01 UTC' as timestamp_val
UNION ALL
SELECT CAST(12 AS int64) as row_id,
       CAST(false AS bool) as bool_val,
       CAST(2 AS int32) as int32_val,
       CAST(16 AS int64) as int64_val,
       CAST(5 AS uint32) as uint32_val,
       CAST(9 AS uint64) as uint64_val,
       CAST(0.75 AS float) as float_val,
       CAST(-0.25 AS double) as double_val,
       CAST("24" AS string) as str_val,
       CAST("22" AS BYTES) as bytes_val,
       CAST('2014-02-02' AS DATE) as date_val,
       TIMESTAMP '2014-03-02 00:00:02 UTC' as timestamp_val
UNION ALL
SELECT CAST(13 AS int64) as row_id,
       CAST(false AS bool) as bool_val,
       CAST(9 AS int32) as int32_val,
       CAST(9 AS int64) as int64_val,
       CAST(4 AS uint32) as uint32_val,
       CAST(8 AS uint64) as uint64_val,
       CAST(-0.25 AS float) as float_val,
       CAST(-0.75 AS double) as double_val,
       CAST("222" AS string) as str_val,
       CAST("234" AS BYTES) as bytes_val,
       CAST('2014-05-02' AS DATE) as date_val,
       TIMESTAMP '2014-05-02 00:00:02 UTC' as timestamp_val
UNION ALL
SELECT CAST(14 AS int64) as row_id,
       CAST(true AS bool) as bool_val,
       CAST(13 AS int32) as int32_val,
       CAST(23 AS int64) as int64_val,
       CAST(31 AS uint32) as uint32_val,
       CAST(32 AS uint64) as uint64_val,
       CAST(-0.375 AS float) as float_val,
       CAST(-0.375 AS double) as double_val,
       CAST("345" AS string) as str_val,
       CAST("345" AS BYTES) as bytes_val,
       CAST('2014-01-06' AS DATE) as date_val,
       TIMESTAMP '2014-02-03 00:00:03 UTC' as timestamp_val
UNION ALL
SELECT CAST(15 AS int64) as row_id,
       CAST(false AS bool) as bool_val,
       CAST(-24 AS int32) as int32_val,
       CAST(-14 AS int64) as int64_val,
       CAST(41 AS uint32) as uint32_val,
       CAST(54 AS uint64) as uint64_val,
       CAST(-0.5 AS float) as float_val,
       CAST(-0.5 AS double) as double_val,
       CAST("432" AS string) as str_val,
       CAST("433" AS BYTES) as bytes_val,
       CAST('2014-02-04' AS DATE) as date_val,
       TIMESTAMP '2014-02-04 00:00:04 UTC' as timestamp_val
UNION ALL
SELECT CAST(16 AS int64) as row_id,
       CAST(false AS bool) as bool_val,
       CAST(NULL AS int32) as int32_val,
       CAST(-1 AS int64) as int64_val,
       CAST(NULL AS uint32) as uint32_val,
       CAST(1 AS uint64) as uint64_val,
       CAST(NULL AS float) as float_val,
       CAST(-pow(0.1, 324) AS double) as double_val, #negative 0 of type double
       CAST(NULL AS string) as str_val,
       CAST("1" AS BYTES) as bytes_val,
       CAST(NULL AS DATE) as date_val,
       TIMESTAMP '2014-02-04 00:00:04 UTC' as timestamp_val
UNION ALL
SELECT CAST(17 AS int64) as row_id,
       CAST(NULL AS bool) as bool_val,
       CAST(-1 AS int32) as int32_val,
       CAST(NULL AS int64) as int64_val,
       CAST(1 AS uint32) as uint32_val,
       CAST(NULL AS uint64) as uint64_val,
       CAST(pow(0.1, 46) AS float) as float_val, #positive 0 of type float
       CAST(NULL AS double) as double_val,
       CAST("1" AS string) as str_val,
       CAST(NULL AS BYTES) as bytes_val,
       CAST('2014-02-04' AS DATE) as date_val,
       CAST(NULL AS TIMESTAMP) as timestamp_val
--
ARRAY<STRUCT<
        row_id INT64,
        bool_val BOOL,
        int32_val INT32,
        int64_val INT64,
        uint32_val UINT32,
        uint64_val UINT64,
        float_val FLOAT,
        double_val DOUBLE,
        str_val STRING,
        bytes_val BYTES,
        date_val DATE,
        timestamp_val TIMESTAMP
      >>
[{
   1,
   true,
   -1,
   -1,
   1,
   1,
   0.125,
   0.125,
   "1",
   b"1",
   2014-01-01,
   2014-01-01 00:00:01+00
 },
 {
   2,
   true,
   -1,
   -1,
   1,
   1,
   nan,
   inf,
   "1",
   b"1",
   2014-01-01,
   2014-01-01 00:00:01+00
 },
 {
   3,
   true,
   -1,
   -1,
   1,
   1,
   inf,
   -inf,
   "1",
   b"1",
   2014-01-01,
   2014-01-01 00:00:01+00
 },
 {
   4,
   false,
   -2,
   -2,
   2,
   2,
   0.25,
   0,
   "2",
   b"2",
   2014-01-02,
   2014-01-02 00:00:02+00
 },
 {
   5,
   false,
   -2,
   -2,
   2,
   2,
   -inf,
   0.25,
   "2",
   b"2",
   2014-01-02,
   2014-01-02 00:00:02+00
 },
 {
   6,
   true,
   -3,
   -3,
   3,
   3,
   0.375,
   0.375,
   "3",
   b"3",
   2014-01-03,
   2014-01-03 00:00:03+00
 },
 {
   7,
   false,
   -4,
   -4,
   4,
   4,
   0.5,
   0.5,
   "4",
   b"4",
   2014-01-04,
   2014-01-04 00:00:04+00
 },
 {8, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
 {9, NULL, NULL, NULL, NULL, NULL, -0, nan, NULL, NULL, NULL, NULL},
 {
   10,
   true,
   1,
   1,
   11,
   11,
   0.625,
   0.625,
   "6",
   b"7",
   2014-01-08,
   2014-01-07 00:00:01+00
 },
 {
   11,
   false,
   5,
   3,
   11,
   8,
   -0.125,
   -0.125,
   "123",
   b"123",
   2014-02-01,
   2014-03-01 00:00:01+00
 },
 {
   12,
   false,
   2,
   16,
   5,
   9,
   0.75,
   -0.25,
   "24",
   b"22",
   2014-02-02,
   2014-03-02 00:00:02+00
 },
 {
   13,
   false,
   9,
   9,
   4,
   8,
   -0.25,
   -0.75,
   "222",
   b"234",
   2014-05-02,
   2014-05-02 00:00:02+00
 },
 {
   14,
   true,
   13,
   23,
   31,
   32,
   -0.375,
   -0.375,
   "345",
   b"345",
   2014-01-06,
   2014-02-03 00:00:03+00
 },
 {
   15,
   false,
   -24,
   -14,
   41,
   54,
   -0.5,
   -0.5,
   "432",
   b"433",
   2014-02-04,
   2014-02-04 00:00:04+00
 },
 {
   16,
   false,
   NULL,
   -1,
   NULL,
   1,
   NULL,
   -0,
   NULL,
   b"1",
   NULL,
   2014-02-04 00:00:04+00
 },
 {17, NULL, -1, NULL, 1, NULL, 0, NULL, "1", NULL, 2014-02-04, NULL}]
==
[prepare_database]
CREATE TABLE TableLarge AS
SELECT CAST(1 AS int64) as row_id,
       CAST(NULL AS bool) as bool_val, CAST(NULL AS double) as double_val,
       CAST(NULL AS int64) as int64_val, CAST(NULL AS uint64) as uint64_val,
       CAST(NULL AS string) as str_val UNION ALL
  SELECT 2,  true,  NULL, NULL, NULL, NULL UNION ALL
  SELECT 3,  false, 0.2,  NULL, NULL, NULL UNION ALL
  SELECT 4,  true,  0.3,  3,    NULL, NULL UNION ALL
  SELECT 5,  false, 0.4,  4,    15, "4" UNION ALL
  SELECT 6,  true,  0.5,  5,    17, "5" UNION ALL
  SELECT 7,  false, 0.6,  6,    19,  "6" UNION ALL
  SELECT 8,  true,  0.7,  7,    21,  "7" UNION ALL
  SELECT 9,  false, 0.8,  8,    23, "8" UNION ALL
  SELECT 10, true,  0.9,  9,    25,  "9" UNION ALL
  SELECT 11, false, 1.0, 10,    27, "10" UNION ALL
  SELECT 12, true,  IEEE_DIVIDE(1, 0), 11, 29, "11" UNION ALL
  SELECT 13, false, IEEE_DIVIDE(-1, 0), 12, 31, "12" UNION ALL
  SELECT 14, true,  IEEE_DIVIDE(0, 0), 13, 33, "13"
--
ARRAY<STRUCT<row_id INT64,
             bool_val BOOL,
             double_val DOUBLE,
             int64_val INT64,
             uint64_val UINT64,
             str_val STRING>>
[
  {1, NULL, NULL, NULL, NULL, NULL},
  {2, true, NULL, NULL, NULL, NULL},
  {3, false, 0.2, NULL, NULL, NULL},
  {4, true, 0.3, 3, NULL, NULL},
  {5, false, 0.4, 4, 15, "4"},
  {6, true, 0.5, 5, 17, "5"},
  {7, false, 0.6, 6, 19, "6"},
  {8, true, 0.7, 7, 21, "7"},
  {9, false, 0.8, 8, 23, "8"},
  {10, true, 0.9, 9, 25, "9"},
  {11, false, 1, 10, 27, "10"},
  {12, true, inf, 11, 29, "11"},
  {13, false, -inf, 12, 31, "12"},
  {14, true, nan, 13, 33, "13"}
]
==
[name=aggregate_max_id_having_1]
SELECT MAX(row_id HAVING MIN 1), MAX(row_id HAVING MAX 1)
FROM TableAllTypes
--
ARRAY<STRUCT<INT64, INT64>>[{17, 17}]
==
[name=aggregate_max_1_having_id]
SELECT MAX(1 HAVING MIN row_id), MAX(1 HAVING MAX row_id)
FROM TableAllTypes
--
ARRAY<STRUCT<INT64, INT64>>[{1, 1}]
==
[name=aggregate_any_value_id_having_id]
SELECT ANY_VALUE(row_id HAVING MIN row_id), ANY_VALUE(row_id HAVING MAX row_id)
FROM TableAllTypes
--
ARRAY<STRUCT<INT64, INT64>>[{1, 17}]
==
[name=aggregate_array_agg_id_having_int64_val]
SELECT ARRAY_AGG(row_id HAVING MIN int64_val), ARRAY_AGG(row_id HAVING MAX int64_val)
FROM TableAllTypes
--
ARRAY<STRUCT<ARRAY<>, ARRAY<>>>[{ARRAY<INT64>[15], ARRAY<INT64>[14]}]
==
[name=aggregate_array_agg_id_having_int32_val]
SELECT ARRAY_AGG(row_id HAVING MIN int32_val), ARRAY_AGG(row_id HAVING MAX int32_val)
FROM TableAllTypes
--
ARRAY<STRUCT<ARRAY<>, ARRAY<>>>[{ARRAY<INT64>[15], ARRAY<INT64>[14]}]
==
[name=aggregate_max_id_having_uint32_val]
SELECT MAX(row_id HAVING MIN uint32_val), MAX(row_id HAVING MAX uint32_val)
FROM TableAllTypes
--
ARRAY<STRUCT<INT64, INT64>>[{17, 15}]
==
[name=aggregate_max_id_having_uint64_val]
SELECT MAX(row_id HAVING MIN uint64_val), MAX(row_id HAVING MAX uint64_val)
FROM TableAllTypes
--
ARRAY<STRUCT<INT64, INT64>>[{16, 15}]
==
[name=aggregate_array_agg_id_having_float_val]
SELECT ARRAY_AGG(row_id HAVING MIN float_val), ARRAY_AGG(row_id HAVING MAX float_val)
FROM TableAllTypes
WHERE NOT IS_NAN(float_val)
--
ARRAY<STRUCT<ARRAY<>, ARRAY<>>>[{ARRAY<INT64>[5], ARRAY<INT64>[3]}]
==
[name=aggregate_array_agg_id_having_double_val]
SELECT ARRAY_AGG(row_id HAVING MIN double_val), ARRAY_AGG(row_id HAVING MAX double_val)
FROM TableAllTypes
WHERE NOT IS_NAN(double_val)
--
ARRAY<STRUCT<ARRAY<>, ARRAY<>>>[{ARRAY<INT64>[3], ARRAY<INT64>[2]}]
==
[name=aggregate_max_id_having_str_val]
SELECT MAX(row_id HAVING MIN str_val), MAX(row_id HAVING MAX str_val)
FROM TableAllTypes
--
ARRAY<STRUCT<INT64, INT64>>[{17, 10}]
==
[name=aggregate_max_id_having_bytes_val]
SELECT MAX(row_id HAVING MIN bytes_val), MAX(row_id HAVING MAX bytes_val)
FROM TableAllTypes
--
ARRAY<STRUCT<INT64, INT64>>[{16, 10}]
==
[name=aggregate_max_id_having_date_val]
SELECT MAX(row_id HAVING MIN date_val), MAX(row_id HAVING MAX date_val)
FROM TableAllTypes
--
ARRAY<STRUCT<INT64, INT64>>[{3, 13}]
==
[name=aggregate_max_id_having_timestamp_val]
SELECT MAX(row_id HAVING MIN timestamp_val), MAX(row_id HAVING MAX timestamp_val)
FROM TableAllTypes
--
ARRAY<STRUCT<INT64, INT64>>[{3, 13}]
==
[name=aggregate_array_agg_id_having_bytes_val_order_by_limit]
[required_features=V_1_1_HAVING_IN_AGGREGATE,V_1_1_LIMIT_IN_AGGREGATE,V_1_1_ORDER_BY_IN_AGGREGATE]
SELECT ARRAY_AGG(row_id HAVING MIN bytes_val ORDER BY row_id DESC LIMIT 2),
       ARRAY_AGG(row_id HAVING MAX bytes_val ORDER BY row_id DESC LIMIT 2)
FROM TableAllTypes
--
ARRAY<STRUCT<ARRAY<>, ARRAY<>>>[{ARRAY<INT64>[16, 3], ARRAY<INT64>[10]}]
==
[name=aggregate_array_agg_id_having_bytes_val_order_by]
[required_features=V_1_1_HAVING_IN_AGGREGATE,V_1_1_ORDER_BY_IN_AGGREGATE]
SELECT ARRAY_AGG(row_id HAVING MIN bytes_val ORDER BY row_id ASC),
       ARRAY_AGG(row_id HAVING MAX bytes_val ORDER BY row_id ASC)
FROM TableAllTypes
--
ARRAY<STRUCT<ARRAY<>, ARRAY<>>>[
  {
    ARRAY<INT64>[1, 2, 3, 16],
    ARRAY<INT64>[10]
  }
]
==
[name=aggregate_count_id_having_bytes_val]
SELECT COUNT(row_id HAVING MIN bytes_val), COUNT(row_id HAVING MAX bytes_val)
FROM TableAllTypes
--
ARRAY<STRUCT<INT64, INT64>>[{4, 1}]
==
[name=aggregate_count_star_having_bytes_val]
SELECT COUNT(* HAVING MIN bytes_val), COUNT(* HAVING MAX bytes_val)
FROM TableAllTypes
--
ARRAY<STRUCT<INT64, INT64>>[{4, 1}]
==
[name=aggregate_approx_count_distinct_id_having_id]
SELECT APPROX_COUNT_DISTINCT(row_id HAVING MIN row_id),
       APPROX_COUNT_DISTINCT(row_id HAVING MAX row_id)
FROM TableAllTypes
--
ARRAY<STRUCT<INT64, INT64>>[{1, 1}]
==
[name=sum_distinct_int64_val_having_id]
SELECT SUM(DISTINCT int64_val HAVING MIN row_id),
       SUM(DISTINCT int64_val HAVING MAX row_id)
FROM TableAllTypes
WHERE row_id < 17
--
ARRAY<STRUCT<INT64, INT64>>[{-1, -1}]
==
[name=aggregate_count_id_having_double_ignore_null]
SELECT COUNT(row_id HAVING MIN double_val),
       COUNT(row_id HAVING MAX double_val)
FROM TableLarge
WHERE double_val IS NULL
--
ARRAY<STRUCT<INT64, INT64>>[{0, 0}]
==
[name=aggregate_count_distinct_id_having_double_ignore_null]
SELECT COUNT(DISTINCT row_id HAVING MIN double_val),
       COUNT(DISTINCT row_id HAVING MAX double_val)
FROM TableLarge
WHERE double_val IS NULL
--
ARRAY<STRUCT<INT64, INT64>>[{0, 0}]
==
[name=aggregate_count_distinct_id_having_double_include_nan_inf]
SELECT COUNT(DISTINCT row_id HAVING MIN double_val),
       COUNT(DISTINCT row_id HAVING MAX double_val)
FROM TableLarge
--
ARRAY<STRUCT<INT64, INT64>>[{0, 0}]
==
[name=aggregate_count_distinct_id_having_double_ignore_nan]
SELECT COUNT(DISTINCT row_id HAVING MIN double_val),
       COUNT(DISTINCT row_id HAVING MAX double_val)
FROM TableLarge
WHERE IS_NAN(double_val)
--
ARRAY<STRUCT<INT64, INT64>>[{0, 0}]
==
[name=aggregate_count_distinct_id_having_double_include_inf]
SELECT COUNT(DISTINCT bool_val HAVING MIN double_val),
       COUNT(DISTINCT bool_val HAVING MAX double_val)
FROM TableLarge
WHERE NOT IS_NAN(double_val)
--
ARRAY<STRUCT<INT64, INT64>>[{1, 1}]
==
[name=aggregate_count_distinct_float_having_double_ignore_null]
SELECT COUNT(DISTINCT float_val HAVING MAX double_val)
FROM
UNNEST( [
     STRUCT(
       CAST(-pow(0.1, 46) AS float) as float_val,
       100.1 as double_val
     ),
     STRUCT(
       CAST(-pow(0.1, 46) AS float) as float_val,
       100.1 as double_val
     ),
     STRUCT(
       CAST(4.5 AS float) as float_val,
       100.1 as double_val
     ),
     STRUCT(
       CAST(5.4 AS float) as float_val,
       NULL as double_val
     )
   ]
);
--
ARRAY<STRUCT<INT64>>[{2}]
==
[name=aggregate_count_distinct_float_having_double_include_nan]
SELECT COUNT(DISTINCT float_val HAVING MAX double_val),
       COUNT(DISTINCT float_val HAVING MIN double_val)
FROM
UNNEST( [
     STRUCT(
       CAST(-pow(0.1, 46) AS float) as float_val,
       100.1 as double_val
     ),
     STRUCT(
       CAST(-pow(0.1, 46) AS float) as float_val,
       100.1 as double_val
     ),
     STRUCT(
       CAST(4.5 AS float) as float_val,
       100.1 as double_val
     ),
     STRUCT(
       CAST(5.4 AS float) as float_val,
       CAST("NAN" AS double) as double_val
     )
   ]
);
--
ARRAY<STRUCT<INT64, INT64>>[{0, 0}]
==
[name=aggregate_count_distinct_multiple_having_double_ignore_null]
SELECT COUNT(DISTINCT float_val HAVING MAX double_val),
       COUNT(DISTINCT row_id HAVING MIN double_val)
FROM
UNNEST( [
     STRUCT(
       9 as row_id,
       CAST(-pow(0.1, 46) AS float) as float_val,
       100.1 as double_val
     ),
     STRUCT(
       9 as row_id,
       CAST(-pow(0.1, 46) AS float) as float_val,
       100.1 as double_val
     ),
     STRUCT(
       9 as row_id,
       CAST(4.5 AS float) as float_val,
       100.1 as double_val
     ),
     STRUCT(
       NULL as row_id,
       NULL as float_val,
       100.1 as double_val
     )
   ]
);
--
ARRAY<STRUCT<INT64, INT64>>[{2, 1}]
==
[name=aggregate_array_agg_id_having_double_ignore_null]
SELECT ARRAY_AGG(row_id HAVING MIN double_val),
       ARRAY_AGG(row_id HAVING MAX double_val)
FROM TableLarge
WHERE double_val IS NULL
--
ARRAY<STRUCT<ARRAY<>, ARRAY<>>>[{ARRAY<INT64>(NULL), ARRAY<INT64>(NULL)}]
==
[name=aggregate_max_id_having_double_ignore_null]
SELECT MAX(row_id HAVING MIN double_val),
       MAX(row_id HAVING MAX double_val)
FROM TableLarge
WHERE double_val IS NULL
--
ARRAY<STRUCT<INT64, INT64>>[{NULL, NULL}]
==
[name=aggregate_max_id_having_double_ignore_nan]
SELECT MAX(row_id HAVING MIN double_val),
       MAX(row_id HAVING MAX double_val)
FROM TableLarge
WHERE IS_NAN(double_val)
--
ARRAY<STRUCT<INT64, INT64>>[{NULL, NULL}]
==
[name=aggregate_max_id_having_double_include_inf]
SELECT MAX(row_id HAVING MIN double_val),
       MAX(row_id HAVING MAX double_val)
FROM TableLarge
WHERE NOT IS_NAN(double_val)
--
ARRAY<STRUCT<INT64, INT64>>[{13, 12}]
==
# MAX and MIN both return NaN if any of the aggregated values are NaN, so the
# HAVING values evaluate to NaN. But HAVING values are compared using SQL =
# semantics, and NaN != NaN, so none of the rows will match the HAVING value.
[name=aggregate_max_id_having_double_include_nan_inf]
SELECT MAX(row_id HAVING MIN double_val),
       MAX(row_id HAVING MAX double_val)
FROM TableLarge
--
ARRAY<STRUCT<INT64, INT64>>[{NULL, NULL}]
==
[name=aggregate_count_star_having_bool_min]
SELECT COUNT(* HAVING MIN a.f)
FROM UNNEST([
              STRUCT(false AS f),
              STRUCT(true AS f),
              STRUCT(NULL AS f),
              STRUCT(true AS f),
              STRUCT(true AS f),
              STRUCT(NULL AS f),
              STRUCT(false AS f)
            ]) AS a;
--
ARRAY<STRUCT<INT64>>[{2}]
==
[name=aggregate_count_star_having_bool_max]
SELECT COUNT(* HAVING MAX a.f)
FROM UNNEST([
              STRUCT(false AS f),
              STRUCT(true AS f),
              STRUCT(NULL AS f),
              STRUCT(true AS f),
              STRUCT(true AS f),
              STRUCT(NULL AS f),
              STRUCT(false AS f)
            ]) AS a;
--
ARRAY<STRUCT<INT64>>[{3}]
