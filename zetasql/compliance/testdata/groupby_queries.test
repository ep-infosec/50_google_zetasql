#
# Create tables
#
[load_proto_files=zetasql/testdata/test_schema.proto]
[load_proto_names=zetasql_test__.KitchenSinkPB]
[load_enum_names=zetasql_test__.TestEnum]

[prepare_database]
CREATE TABLE TableDistincts AS
SELECT cast(1 as int64) as primary_key,
       cast(1 as int64) as distinct_1, cast(1 as int64) as distinct_2,
       cast(1 as int64) as distinct_4, cast(1 as int64) as distinct_8,
       cast(1 as int64) as distinct_16, cast(1 as int64) as distinct_2B,
       cast(1 as int64) as distinct_4B UNION ALL
  SELECT 2, 1, 2, 2, 2, 2, 1, 1 UNION ALL
  SELECT 3, 1, 1, 3, 3, 3,  1, 1 UNION ALL
  SELECT 4, 1, 2, 4, 4, 4,  1, 1 UNION ALL
  SELECT 5, 1, 1, 1, 5, 5,  1, 2 UNION ALL
  SELECT 6, 1, 2, 2, 6, 6,  1, 2 UNION ALL
  SELECT 7, 1, 1, 3, 7, 7,  1, 2 UNION ALL
  SELECT 8, 1, 2, 4, 8, 8,  1, 2 UNION ALL
  SELECT 9, 1, 1, 1, 1, 9,  2, 3 UNION ALL
  SELECT 10, 1, 2, 2, 2, 10, 2, 3 UNION ALL
  SELECT 11, 1, 1, 3, 3, 11, 2, 3 UNION ALL
  SELECT 12, 1, 2, 4, 4, 12, 2, 3 UNION ALL
  SELECT 13, 1, 1, 1, 5, 13, 2, 4 UNION ALL
  SELECT 14, 1, 2, 2, 6, 14, 2, 4 UNION ALL
  SELECT 15, 1, 1, 3, 7, 15, 2, 4 UNION ALL
  SELECT 16, 1, 2, 4, 8, 16, 2, 4
--
ARRAY<STRUCT<primary_key INT64,
             distinct_1 INT64,
             distinct_2 INT64,
             distinct_4 INT64,
             distinct_8 INT64,
             distinct_16 INT64,
             distinct_2B INT64,
             distinct_4B INT64>>
[
  {1, 1, 1, 1, 1, 1, 1, 1},
  {2, 1, 2, 2, 2, 2, 1, 1},
  {3, 1, 1, 3, 3, 3, 1, 1},
  {4, 1, 2, 4, 4, 4, 1, 1},
  {5, 1, 1, 1, 5, 5, 1, 2},
  {6, 1, 2, 2, 6, 6, 1, 2},
  {7, 1, 1, 3, 7, 7, 1, 2},
  {8, 1, 2, 4, 8, 8, 1, 2},
  {9, 1, 1, 1, 1, 9, 2, 3},
  {10, 1, 2, 2, 2, 10, 2, 3},
  {11, 1, 1, 3, 3, 11, 2, 3},
  {12, 1, 2, 4, 4, 12, 2, 3},
  {13, 1, 1, 1, 5, 13, 2, 4},
  {14, 1, 2, 2, 6, 14, 2, 4},
  {15, 1, 1, 3, 7, 15, 2, 4},
  {16, 1, 2, 4, 8, 16, 2, 4}
]
==
[prepare_database]
CREATE TABLE TableAllNull AS
SELECT cast(1 as int64) as primary_key,
       cast(null as bool) as bool_val, cast(null as double) as double_val,
       cast(null as int64) as int64_val, cast(null as string) as str_val
--
ARRAY<STRUCT<primary_key INT64,
             bool_val BOOL,
             double_val DOUBLE,
             int64_val INT64,
             str_val STRING>>[{1, NULL, NULL, NULL, NULL}]
==
[prepare_database]
CREATE TABLE TableLarge AS
SELECT cast(1 as int64) as primary_key,
       cast(null as bool) as bool_val, cast(null as double) as double_val,
       cast(null as int64) as int64_val,
       cast(null as string) as str_val UNION ALL
  SELECT 2, true,  null, null, null UNION ALL
  SELECT 3, false, 0.2,  null, null UNION ALL
  SELECT 4, true,  0.3,  3,    null UNION ALL
  SELECT 5, false, 0.4,  4,     "4" UNION ALL
  SELECT 6, true,  0.5,  5,     "5" UNION ALL
  SELECT 7, false, 0.6,  6,     "6" UNION ALL
  SELECT 8, true,  0.7,  7,     "7" UNION ALL
  SELECT 9, false, 0.8,  8,     "8" UNION ALL
  SELECT 10, true,  0.9,  9,     "9" UNION ALL
  SELECT 11, false, 1.0, 10,    "10"
--
ARRAY<STRUCT<primary_key INT64,
             bool_val BOOL,
             double_val DOUBLE,
             int64_val INT64,
             str_val STRING>>
[
  {1, NULL, NULL, NULL, NULL},
  {2, true, NULL, NULL, NULL},
  {3, false, 0.2, NULL, NULL},
  {4, true, 0.3, 3, NULL},
  {5, false, 0.4, 4, "4"},
  {6, true, 0.5, 5, "5"},
  {7, false, 0.6, 6, "6"},
  {8, true, 0.7, 7, "7"},
  {9, false, 0.8, 8, "8"},
  {10, true, 0.9, 9, "9"},
  {11, false, 1, 10, "10"}
]
==
[prepare_database]
CREATE TABLE AllTypesTable AS
SELECT CAST(1 AS int64) as row_id,
       CAST(true AS bool) as bool_val,
       CAST(-1 AS int32) as int32_val,
       CAST(-1 AS int64) as int64_val,
       CAST(1 AS uint32) as uint32_val,
       CAST(1 AS uint64) as uint64_val,
       CAST(0.125 AS float) as float_val,
       CAST(0.125 AS double) as double_val,
       CAST("1" AS string) as str_val,
       CAST("1" AS BYTES) as bytes_val,
       CAST('2014-01-01' AS DATE) as date_val,
       TIMESTAMP '2014-01-01 00:00:01.011011 UTC' as
           timestamp_val
UNION ALL
SELECT CAST(2 AS int64) as row_id,
       CAST(true AS bool) as bool_val,
       CAST(-1 AS int32) as int32_val,
       CAST(-1 AS int64) as int64_val,
       CAST(1 AS uint32) as uint32_val,
       CAST(1 AS uint64) as uint64_val,
       CAST("NaN" AS float) as float_val,
       CAST("+Inf" AS double) as double_val,
       CAST("1" AS string) as str_val,
       CAST("1" AS BYTES) as bytes_val,
       CAST('2014-01-01' AS DATE) as date_val,
       TIMESTAMP '2014-01-01 00:00:01.011011 UTC' as
           timestamp_val
UNION ALL
SELECT CAST(3 AS int64) as row_id,
       CAST(true AS bool) as bool_val,
       CAST(-1 AS int32) as int32_val,
       CAST(-1 AS int64) as int64_val,
       CAST(1 AS uint32) as uint32_val,
       CAST(1 AS uint64) as uint64_val,
       CAST("+Inf" AS float) as float_val,
       CAST("-Inf" AS double) as double_val,
       CAST("1" AS string) as str_val,
       CAST("1" AS BYTES) as bytes_val,
       CAST('2014-01-01' AS DATE) as date_val,
       TIMESTAMP '2014-01-01 00:00:01.011011 UTC' as
           timestamp_val
UNION ALL
SELECT CAST(4 AS int64) as row_id,
       CAST(false AS bool) as bool_val,
       CAST(-2 AS int32) as int32_val,
       CAST(-2 AS int64) as int64_val,
       CAST(2 AS uint32) as uint32_val,
       CAST(2 AS uint64) as uint64_val,
       CAST(0.25 AS float) as float_val,
       CAST(pow(0.1, 324) AS double) as double_val, #positive 0 of type double
       CAST("2" AS string) as str_val,
       CAST("2" AS BYTES) as bytes_val,
       CAST('2014-01-02' AS DATE) as date_val,
       TIMESTAMP '2014-01-02 00:00:02.022022 UTC' as
           timestamp_val
UNION ALL
SELECT CAST(5 AS int64) as row_id,
       CAST(false AS bool) as bool_val,
       CAST(-2 AS int32) as int32_val,
       CAST(-2 AS int64) as int64_val,
       CAST(2 AS uint32) as uint32_val,
       CAST(2 AS uint64) as uint64_val,
       CAST("-Inf" AS float) as float_val,
       CAST(0.25 AS double) as double_val,
       CAST("2" AS string) as str_val,
       CAST("2" AS BYTES) as bytes_val,
       CAST('2014-01-02' AS DATE) as date_val,
       TIMESTAMP '2014-01-02 00:00:02.022022 UTC' as
           timestamp_val
UNION ALL
SELECT CAST(6 AS int64) as row_id,
       CAST(true AS bool) as bool_val,
       CAST(-3 AS int32) as int32_val,
       CAST(-3 AS int64) as int64_val,
       CAST(3 AS uint32) as uint32_val,
       CAST(3 AS uint64) as uint64_val,
       CAST(0.375 AS float) as float_val,
       CAST(0.375 AS double) as double_val,
       CAST("3" AS string) as str_val,
       CAST("3" AS BYTES) as bytes_val,
       CAST('2014-01-03' AS DATE) as date_val,
       TIMESTAMP '2014-01-03 00:00:03.033033 UTC' as
           timestamp_val
UNION ALL
SELECT CAST(7 AS int64) as row_id,
       CAST(false AS bool) as bool_val,
       CAST(-4 AS int32) as int32_val,
       CAST(-4 AS int64) as int64_val,
       CAST(4 AS uint32) as uint32_val,
       CAST(4 AS uint64) as uint64_val,
       CAST(0.5 AS float) as float_val,
       CAST(0.5 AS double) as double_val,
       CAST("4" AS string) as str_val,
       CAST("4" AS BYTES) as bytes_val,
       CAST('2014-01-04' AS DATE) as date_val,
       TIMESTAMP '2014-01-04 00:00:04.044044 UTC' as
           timestamp_val
UNION ALL
SELECT CAST(8 AS int64) as row_id,
       CAST(NULL AS bool) as bool_val,
       CAST(NULL AS int32) as int32_val,
       CAST(NULL AS int64) as int64_val,
       CAST(NULL AS uint32) as uint32_val,
       CAST(NULL AS uint64) as uint64_val,
       CAST(NULL AS float) as float_val,
       CAST(NULL AS double) as double_val,
       CAST(NULL AS string) as str_val,
       CAST(NULL AS BYTES) as bytes_val,
       CAST(NULL AS DATE) as date_val,
       CAST(NULL AS TIMESTAMP) as timestamp_val
UNION ALL
SELECT CAST(9 AS int64) as row_id,
       CAST(NULL AS bool) as bool_val,
       CAST(NULL AS int32) as int32_val,
       CAST(NULL AS int64) as int64_val,
       CAST(NULL AS uint32) as uint32_val,
       CAST(NULL AS uint64) as uint64_val,
       CAST(-pow(0.1, 46) AS float) as float_val, #negative 0 of type float
       CAST("NaN" AS double) as double_val,
       CAST(NULL AS string) as str_val,
       CAST(NULL AS BYTES) as bytes_val,
       CAST(NULL AS DATE) as date_val,
       CAST(NULL AS TIMESTAMP) as timestamp_val
UNION ALL
SELECT CAST(10 AS int64) as row_id,
       CAST(true AS bool) as bool_val,
       CAST(1 AS int32) as int32_val,
       CAST(1 AS int64) as int64_val,
       CAST(11 AS uint32) as uint32_val,
       CAST(11 AS uint64) as uint64_val,
       CAST(0.625 AS float) as float_val,
       CAST(0.625 AS double) as double_val,
       CAST("6" AS string) as str_val,
       CAST("7" AS BYTES) as bytes_val,
       CAST('2014-01-08' AS DATE) as date_val,
       TIMESTAMP '2014-01-02 00:00:01.011011 UTC' as
           timestamp_val
UNION ALL
SELECT CAST(11 AS int64) as row_id,
       CAST(false AS bool) as bool_val,
       CAST(5 AS int32) as int32_val,
       CAST(3 AS int64) as int64_val,
       CAST(11 AS uint32) as uint32_val,
       CAST(8 AS uint64) as uint64_val,
       CAST(-0.125 AS float) as float_val,
       CAST(-0.125 AS double) as double_val,
       CAST("123" AS string) as str_val,
       CAST("123" AS BYTES) as bytes_val,
       CAST('2014-02-01' AS DATE) as date_val,
       TIMESTAMP '2014-04-01 00:00:01.011011 UTC' as
           timestamp_val
UNION ALL
SELECT CAST(12 AS int64) as row_id,
       CAST(false AS bool) as bool_val,
       CAST(2 AS int32) as int32_val,
       CAST(16 AS int64) as int64_val,
       CAST(5 AS uint32) as uint32_val,
       CAST(9 AS uint64) as uint64_val,
       CAST(0.75 AS float) as float_val,
       CAST(-0.25 AS double) as double_val,
       CAST("24" AS string) as str_val,
       CAST("22" AS BYTES) as bytes_val,
       CAST('2014-02-02' AS DATE) as date_val,
       TIMESTAMP '2014-01-05 00:00:02.022022 UTC' as
           timestamp_val
UNION ALL
SELECT CAST(13 AS int64) as row_id,
       CAST(false AS bool) as bool_val,
       CAST(9 AS int32) as int32_val,
       CAST(9 AS int64) as int64_val,
       CAST(4 AS uint32) as uint32_val,
       CAST(8 AS uint64) as uint64_val,
       CAST(-0.25 AS float) as float_val,
       CAST(-0.75 AS double) as double_val,
       CAST("222" AS string) as str_val,
       CAST("234" AS BYTES) as bytes_val,
       CAST('2014-05-02' AS DATE) as date_val,
       TIMESTAMP '2014-05-02 00:00:02.022022 UTC' as
           timestamp_val
UNION ALL
SELECT CAST(14 AS int64) as row_id,
       CAST(true AS bool) as bool_val,
       CAST(13 AS int32) as int32_val,
       CAST(23 AS int64) as int64_val,
       CAST(31 AS uint32) as uint32_val,
       CAST(32 AS uint64) as uint64_val,
       CAST(-0.375 AS float) as float_val,
       CAST(-0.375 AS double) as double_val,
       CAST("345" AS string) as str_val,
       CAST("345" AS BYTES) as bytes_val,
       CAST('2014-01-06' AS DATE) as date_val,
       TIMESTAMP '2014-01-04 00:00:03.033033 UTC' as
           timestamp_val
UNION ALL
SELECT CAST(15 AS int64) as row_id,
       CAST(false AS bool) as bool_val,
       CAST(-24 AS int32) as int32_val,
       CAST(-14 AS int64) as int64_val,
       CAST(41 AS uint32) as uint32_val,
       CAST(54 AS uint64) as uint64_val,
       CAST(-0.5 AS float) as float_val,
       CAST(-0.5 AS double) as double_val,
       CAST("432" AS string) as str_val,
       CAST("433" AS BYTES) as bytes_val,
       CAST('2014-02-04' AS DATE) as date_val,
       TIMESTAMP '2014-02-04 00:00:04.044044 UTC' as
           timestamp_val
UNION ALL
SELECT CAST(16 AS int64) as row_id,
       CAST(false AS bool) as bool_val,
       CAST(NULL AS int32) as int32_val,
       CAST(-1 AS int64) as int64_val,
       CAST(NULL AS uint32) as uint32_val,
       CAST(1 AS uint64) as uint64_val,
       CAST(NULL AS float) as float_val,
       CAST(-pow(0.1, 324) AS double) as double_val, #negative 0 of type double
       CAST(NULL AS string) as str_val,
       CAST("1" AS BYTES) as bytes_val,
       CAST(NULL AS DATE) as date_val,
       TIMESTAMP '2014-02-04 00:00:04.044044 UTC' as
           timestamp_val
UNION ALL
SELECT CAST(17 AS int64) as row_id,
       CAST(NULL AS bool) as bool_val,
       CAST(-1 AS int32) as int32_val,
       CAST(NULL AS int64) as int64_val,
       CAST(1 AS uint32) as uint32_val,
       CAST(NULL AS uint64) as uint64_val,
       CAST(pow(0.1, 46) AS float) as float_val, #positive 0 of type float
       CAST(NULL AS double) as double_val,
       CAST("1" AS string) as str_val,
       CAST(NULL AS BYTES) as bytes_val,
       CAST('2014-02-04' AS DATE) as date_val,
       CAST(NULL AS TIMESTAMP) as timestamp_val
UNION ALL
SELECT CAST(18 AS int64) as row_id,
       CAST(true AS bool) as bool_val,
       CAST(-1 AS int32) as int32_val,
       CAST(-1 AS int64) as int64_val,
       CAST(1 AS uint32) as uint32_val,
       CAST(1 AS uint64) as uint64_val,
       CAST(0.125 AS float) as float_val,
       CAST(0.125 AS double) as double_val,
       CAST("1" AS string) as str_val,
       CAST("1" AS BYTES) as bytes_val,
       CAST('2014-01-01' AS DATE) as date_val,
       TIMESTAMP '2014-01-01 00:00:01.011011 UTC' as
           timestamp_val
UNION ALL
SELECT CAST(19 AS int64) as row_id,
       CAST(true AS bool) as bool_val,
       CAST(-1 AS int32) as int32_val,
       CAST(-1 AS int64) as int64_val,
       CAST(1 AS uint32) as uint32_val,
       CAST(1 AS uint64) as uint64_val,
       CAST("NaN" AS float) as float_val,
       CAST("+Inf" AS double) as double_val,
       CAST("1" AS string) as str_val,
       CAST("1" AS BYTES) as bytes_val,
       CAST('2014-01-01' AS DATE) as date_val,
       TIMESTAMP '2014-01-01 00:00:01.011011 UTC' as
           timestamp_val
UNION ALL
SELECT CAST(20 AS int64) as row_id,
       CAST(true AS bool) as bool_val,
       CAST(-1 AS int32) as int32_val,
       CAST(-1 AS int64) as int64_val,
       CAST(1 AS uint32) as uint32_val,
       CAST(1 AS uint64) as uint64_val,
       CAST("+Inf" AS float) as float_val,
       CAST("-Inf" AS double) as double_val,
       CAST("1" AS string) as str_val,
       CAST("1" AS BYTES) as bytes_val,
       CAST('2014-01-01' AS DATE) as date_val,
       TIMESTAMP '2014-01-01 00:00:01.011011 UTC' as
           timestamp_val
UNION ALL
SELECT CAST(21 AS int64) as row_id,
       CAST(false AS bool) as bool_val,
       CAST(-2 AS int32) as int32_val,
       CAST(-2 AS int64) as int64_val,
       CAST(2 AS uint32) as uint32_val,
       CAST(2 AS uint64) as uint64_val,
       CAST(0.25 AS float) as float_val,
       CAST(pow(0.1, 324) AS double) as double_val, #positive 0 of type double
       CAST("2" AS string) as str_val,
       CAST("2" AS BYTES) as bytes_val,
       CAST('2014-01-02' AS DATE) as date_val,
       TIMESTAMP '2014-01-02 00:00:02.022022 UTC' as
           timestamp_val
UNION ALL
SELECT CAST(22 AS int64) as row_id,
       CAST(false AS bool) as bool_val,
       CAST(-2 AS int32) as int32_val,
       CAST(-2 AS int64) as int64_val,
       CAST(2 AS uint32) as uint32_val,
       CAST(2 AS uint64) as uint64_val,
       CAST("-Inf" AS float) as float_val,
       CAST(0.25 AS double) as double_val,
       CAST("2" AS string) as str_val,
       CAST("2" AS BYTES) as bytes_val,
       CAST('2014-01-02' AS DATE) as date_val,
       TIMESTAMP '2014-01-02 00:00:02.022022 UTC' as
           timestamp_val
UNION ALL
SELECT CAST(23 AS int64) as row_id,
       CAST(true AS bool) as bool_val,
       CAST(-3 AS int32) as int32_val,
       CAST(-3 AS int64) as int64_val,
       CAST(3 AS uint32) as uint32_val,
       CAST(3 AS uint64) as uint64_val,
       CAST(0.375 AS float) as float_val,
       CAST(0.375 AS double) as double_val,
       CAST("3" AS string) as str_val,
       CAST("3" AS BYTES) as bytes_val,
       CAST('2014-01-03' AS DATE) as date_val,
       TIMESTAMP '2014-01-03 00:00:03.033033 UTC' as
           timestamp_val
UNION ALL
SELECT CAST(24 AS int64) as row_id,
       CAST(false AS bool) as bool_val,
       CAST(-4 AS int32) as int32_val,
       CAST(-4 AS int64) as int64_val,
       CAST(4 AS uint32) as uint32_val,
       CAST(4 AS uint64) as uint64_val,
       CAST(0.5 AS float) as float_val,
       CAST(0.5 AS double) as double_val,
       CAST("4" AS string) as str_val,
       CAST("4" AS BYTES) as bytes_val,
       CAST('2014-01-04' AS DATE) as date_val,
       TIMESTAMP '2014-01-04 00:00:04.044044 UTC' as
           timestamp_val
UNION ALL
SELECT CAST(25 AS int64) as row_id,
       CAST(NULL AS bool) as bool_val,
       CAST(NULL AS int32) as int32_val,
       CAST(NULL AS int64) as int64_val,
       CAST(NULL AS uint32) as uint32_val,
       CAST(NULL AS uint64) as uint64_val,
       CAST(NULL AS float) as float_val,
       CAST(NULL AS double) as double_val,
       CAST(NULL AS string) as str_val,
       CAST(NULL AS BYTES) as bytes_val,
       CAST(NULL AS DATE) as date_val,
       CAST(NULL AS TIMESTAMP) as timestamp_val
UNION ALL
SELECT CAST(26 AS int64) as row_id,
       CAST(NULL AS bool) as bool_val,
       CAST(NULL AS int32) as int32_val,
       CAST(NULL AS int64) as int64_val,
       CAST(NULL AS uint32) as uint32_val,
       CAST(NULL AS uint64) as uint64_val,
       CAST(-pow(0.1, 46) AS float) as float_val, #negative 0 of type float
       CAST("NaN" AS double) as double_val,
       CAST(NULL AS string) as str_val,
       CAST(NULL AS BYTES) as bytes_val,
       CAST(NULL AS DATE) as date_val,
       CAST(NULL AS TIMESTAMP) as timestamp_val
UNION ALL
SELECT CAST(27 AS int64) as row_id,
       CAST(true AS bool) as bool_val,
       CAST(1 AS int32) as int32_val,
       CAST(1 AS int64) as int64_val,
       CAST(11 AS uint32) as uint32_val,
       CAST(11 AS uint64) as uint64_val,
       CAST(0.625 AS float) as float_val,
       CAST(0.625 AS double) as double_val,
       CAST("6" AS string) as str_val,
       CAST("7" AS BYTES) as bytes_val,
       CAST('2014-01-08' AS DATE) as date_val,
       TIMESTAMP '2014-01-02 00:00:01.011011 UTC' as
           timestamp_val
UNION ALL
SELECT CAST(28 AS int64) as row_id,
       CAST(false AS bool) as bool_val,
       CAST(5 AS int32) as int32_val,
       CAST(3 AS int64) as int64_val,
       CAST(11 AS uint32) as uint32_val,
       CAST(8 AS uint64) as uint64_val,
       CAST(-0.125 AS float) as float_val,
       CAST(-0.125 AS double) as double_val,
       CAST("123" AS string) as str_val,
       CAST("123" AS BYTES) as bytes_val,
       CAST('2014-02-01' AS DATE) as date_val,
       TIMESTAMP '2014-04-01 00:00:01.011011 UTC' as
           timestamp_val
UNION ALL
SELECT CAST(29 AS int64) as row_id,
       CAST(false AS bool) as bool_val,
       CAST(2 AS int32) as int32_val,
       CAST(16 AS int64) as int64_val,
       CAST(5 AS uint32) as uint32_val,
       CAST(9 AS uint64) as uint64_val,
       CAST(0.75 AS float) as float_val,
       CAST(-0.25 AS double) as double_val,
       CAST("24" AS string) as str_val,
       CAST("22" AS BYTES) as bytes_val,
       CAST('2014-02-02' AS DATE) as date_val,
       TIMESTAMP '2014-01-05 00:00:02.022022 UTC' as
           timestamp_val
UNION ALL
SELECT CAST(30 AS int64) as row_id,
       CAST(false AS bool) as bool_val,
       CAST(9 AS int32) as int32_val,
       CAST(9 AS int64) as int64_val,
       CAST(4 AS uint32) as uint32_val,
       CAST(8 AS uint64) as uint64_val,
       CAST(-0.25 AS float) as float_val,
       CAST(-0.75 AS double) as double_val,
       CAST("222" AS string) as str_val,
       CAST("234" AS BYTES) as bytes_val,
       CAST('2014-05-02' AS DATE) as date_val,
       TIMESTAMP '2014-05-02 00:00:02.022022 UTC' as
           timestamp_val
UNION ALL
SELECT CAST(31 AS int64) as row_id,
       CAST(true AS bool) as bool_val,
       CAST(13 AS int32) as int32_val,
       CAST(23 AS int64) as int64_val,
       CAST(31 AS uint32) as uint32_val,
       CAST(32 AS uint64) as uint64_val,
       CAST(-0.375 AS float) as float_val,
       CAST(-0.375 AS double) as double_val,
       CAST("345" AS string) as str_val,
       CAST("345" AS BYTES) as bytes_val,
       CAST('2014-01-06' AS DATE) as date_val,
       TIMESTAMP '2014-01-04 00:00:03.033033 UTC' as
           timestamp_val
UNION ALL
SELECT CAST(32 AS int64) as row_id,
       CAST(false AS bool) as bool_val,
       CAST(-24 AS int32) as int32_val,
       CAST(-14 AS int64) as int64_val,
       CAST(41 AS uint32) as uint32_val,
       CAST(54 AS uint64) as uint64_val,
       CAST(-0.5 AS float) as float_val,
       CAST(-0.5 AS double) as double_val,
       CAST("432" AS string) as str_val,
       CAST("433" AS BYTES) as bytes_val,
       CAST('2014-02-04' AS DATE) as date_val,
       TIMESTAMP '2014-02-04 00:00:04.044044 UTC' as
           timestamp_val
UNION ALL
SELECT CAST(33 AS int64) as row_id,
       CAST(false AS bool) as bool_val,
       CAST(NULL AS int32) as int32_val,
       CAST(-1 AS int64) as int64_val,
       CAST(NULL AS uint32) as uint32_val,
       CAST(1 AS uint64) as uint64_val,
       CAST(NULL AS float) as float_val,
       CAST(-pow(0.1, 324) AS double) as double_val, #negative 0 of type double
       CAST(NULL AS string) as str_val,
       CAST("1" AS BYTES) as bytes_val,
       CAST(NULL AS DATE) as date_val,
       TIMESTAMP '2014-02-04 00:00:04.044044 UTC' as
           timestamp_val
UNION ALL
SELECT CAST(34 AS int64) as row_id,
       CAST(NULL AS bool) as bool_val,
       CAST(-1 AS int32) as int32_val,
       CAST(NULL AS int64) as int64_val,
       CAST(1 AS uint32) as uint32_val,
       CAST(NULL AS uint64) as uint64_val,
       CAST(pow(0.1, 46) AS float) as float_val, #positive 0 of type float
       CAST(NULL AS double) as double_val,
       CAST("1" AS string) as str_val,
       CAST(NULL AS BYTES) as bytes_val,
       CAST('2014-02-04' AS DATE) as date_val,
       CAST(NULL AS TIMESTAMP) as timestamp_val
--
ARRAY<STRUCT<
        row_id INT64,
        bool_val BOOL,
        int32_val INT32,
        int64_val INT64,
        uint32_val UINT32,
        uint64_val UINT64,
        float_val FLOAT,
        double_val DOUBLE,
        str_val STRING,
        bytes_val BYTES,
        date_val DATE,
        timestamp_val TIMESTAMP
      >>
[{
   1,
   true,
   -1,
   -1,
   1,
   1,
   0.125,
   0.125,
   "1",
   b"1",
   2014-01-01,
   2014-01-01 00:00:01.011011+00
 },
 {
   2,
   true,
   -1,
   -1,
   1,
   1,
   nan,
   inf,
   "1",
   b"1",
   2014-01-01,
   2014-01-01 00:00:01.011011+00
 },
 {
   3,
   true,
   -1,
   -1,
   1,
   1,
   inf,
   -inf,
   "1",
   b"1",
   2014-01-01,
   2014-01-01 00:00:01.011011+00
 },
 {
   4,
   false,
   -2,
   -2,
   2,
   2,
   0.25,
   0,
   "2",
   b"2",
   2014-01-02,
   2014-01-02 00:00:02.022022+00
 },
 {
   5,
   false,
   -2,
   -2,
   2,
   2,
   -inf,
   0.25,
   "2",
   b"2",
   2014-01-02,
   2014-01-02 00:00:02.022022+00
 },
 {
   6,
   true,
   -3,
   -3,
   3,
   3,
   0.375,
   0.375,
   "3",
   b"3",
   2014-01-03,
   2014-01-03 00:00:03.033033+00
 },
 {
   7,
   false,
   -4,
   -4,
   4,
   4,
   0.5,
   0.5,
   "4",
   b"4",
   2014-01-04,
   2014-01-04 00:00:04.044044+00
 },
 {8, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
 {9, NULL, NULL, NULL, NULL, NULL, -0, nan, NULL, NULL, NULL, NULL},
 {
   10,
   true,
   1,
   1,
   11,
   11,
   0.625,
   0.625,
   "6",
   b"7",
   2014-01-08,
   2014-01-02 00:00:01.011011+00
 },
 {
   11,
   false,
   5,
   3,
   11,
   8,
   -0.125,
   -0.125,
   "123",
   b"123",
   2014-02-01,
   2014-04-01 00:00:01.011011+00
 },
 {
   12,
   false,
   2,
   16,
   5,
   9,
   0.75,
   -0.25,
   "24",
   b"22",
   2014-02-02,
   2014-01-05 00:00:02.022022+00
 },
 {
   13,
   false,
   9,
   9,
   4,
   8,
   -0.25,
   -0.75,
   "222",
   b"234",
   2014-05-02,
   2014-05-02 00:00:02.022022+00
 },
 {
   14,
   true,
   13,
   23,
   31,
   32,
   -0.375,
   -0.375,
   "345",
   b"345",
   2014-01-06,
   2014-01-04 00:00:03.033033+00
 },
 {
   15,
   false,
   -24,
   -14,
   41,
   54,
   -0.5,
   -0.5,
   "432",
   b"433",
   2014-02-04,
   2014-02-04 00:00:04.044044+00
 },
 {
   16,
   false,
   NULL,
   -1,
   NULL,
   1,
   NULL,
   -0,
   NULL,
   b"1",
   NULL,
   2014-02-04 00:00:04.044044+00
 },
 {17, NULL, -1, NULL, 1, NULL, 0, NULL, "1", NULL, 2014-02-04, NULL},
 {
   18,
   true,
   -1,
   -1,
   1,
   1,
   0.125,
   0.125,
   "1",
   b"1",
   2014-01-01,
   2014-01-01 00:00:01.011011+00
 },
 {
   19,
   true,
   -1,
   -1,
   1,
   1,
   nan,
   inf,
   "1",
   b"1",
   2014-01-01,
   2014-01-01 00:00:01.011011+00
 },
 {
   20,
   true,
   -1,
   -1,
   1,
   1,
   inf,
   -inf,
   "1",
   b"1",
   2014-01-01,
   2014-01-01 00:00:01.011011+00
 },
 {
   21,
   false,
   -2,
   -2,
   2,
   2,
   0.25,
   0,
   "2",
   b"2",
   2014-01-02,
   2014-01-02 00:00:02.022022+00
 },
 {
   22,
   false,
   -2,
   -2,
   2,
   2,
   -inf,
   0.25,
   "2",
   b"2",
   2014-01-02,
   2014-01-02 00:00:02.022022+00
 },
 {
   23,
   true,
   -3,
   -3,
   3,
   3,
   0.375,
   0.375,
   "3",
   b"3",
   2014-01-03,
   2014-01-03 00:00:03.033033+00
 },
 {
   24,
   false,
   -4,
   -4,
   4,
   4,
   0.5,
   0.5,
   "4",
   b"4",
   2014-01-04,
   2014-01-04 00:00:04.044044+00
 },
 {25, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
 {26, NULL, NULL, NULL, NULL, NULL, -0, nan, NULL, NULL, NULL, NULL},
 {
   27,
   true,
   1,
   1,
   11,
   11,
   0.625,
   0.625,
   "6",
   b"7",
   2014-01-08,
   2014-01-02 00:00:01.011011+00
 },
 {
   28,
   false,
   5,
   3,
   11,
   8,
   -0.125,
   -0.125,
   "123",
   b"123",
   2014-02-01,
   2014-04-01 00:00:01.011011+00
 },
 {
   29,
   false,
   2,
   16,
   5,
   9,
   0.75,
   -0.25,
   "24",
   b"22",
   2014-02-02,
   2014-01-05 00:00:02.022022+00
 },
 {
   30,
   false,
   9,
   9,
   4,
   8,
   -0.25,
   -0.75,
   "222",
   b"234",
   2014-05-02,
   2014-05-02 00:00:02.022022+00
 },
 {
   31,
   true,
   13,
   23,
   31,
   32,
   -0.375,
   -0.375,
   "345",
   b"345",
   2014-01-06,
   2014-01-04 00:00:03.033033+00
 },
 {
   32,
   false,
   -24,
   -14,
   41,
   54,
   -0.5,
   -0.5,
   "432",
   b"433",
   2014-02-04,
   2014-02-04 00:00:04.044044+00
 },
 {
   33,
   false,
   NULL,
   -1,
   NULL,
   1,
   NULL,
   -0,
   NULL,
   b"1",
   NULL,
   2014-02-04 00:00:04.044044+00
 },
 {34, NULL, -1, NULL, 1, NULL, 0, NULL, "1", NULL, 2014-02-04, NULL}]
==
[prepare_database]
[required_features=NUMERIC_TYPE]
CREATE TABLE AllTypesNumericTable AS
SELECT CAST(1 AS int64) as row_id,
       CAST(true AS bool) as bool_val,
       CAST(-1 AS int32) as int32_val,
       CAST(-1 AS int64) as int64_val,
       CAST(1 AS uint32) as uint32_val,
       CAST(1 AS uint64) as uint64_val,
       CAST(0.125 AS float) as float_val,
       CAST(0.125 AS double) as double_val,
       CAST("1" AS string) as str_val,
       CAST("1" AS BYTES) as bytes_val,
       CAST('2014-01-01' AS DATE) as date_val,
       TIMESTAMP '2014-01-01 00:00:01.011011 UTC' as
           timestamp_val,
       CAST(1 AS numeric) as numeric_val
UNION ALL
SELECT CAST(2 AS int64) as row_id,
       CAST(true AS bool) as bool_val,
       CAST(-1 AS int32) as int32_val,
       CAST(-1 AS int64) as int64_val,
       CAST(1 AS uint32) as uint32_val,
       CAST(1 AS uint64) as uint64_val,
       CAST("NaN" AS float) as float_val,
       CAST("+Inf" AS double) as double_val,
       CAST("1" AS string) as str_val,
       CAST("1" AS BYTES) as bytes_val,
       CAST('2014-01-01' AS DATE) as date_val,
       TIMESTAMP '2014-01-01 00:00:01.011011 UTC' as
           timestamp_val,
       CAST(1 AS numeric) as numeric_val
UNION ALL
SELECT CAST(3 AS int64) as row_id,
       CAST(true AS bool) as bool_val,
       CAST(-1 AS int32) as int32_val,
       CAST(-1 AS int64) as int64_val,
       CAST(1 AS uint32) as uint32_val,
       CAST(1 AS uint64) as uint64_val,
       CAST("+Inf" AS float) as float_val,
       CAST("-Inf" AS double) as double_val,
       CAST("1" AS string) as str_val,
       CAST("1" AS BYTES) as bytes_val,
       CAST('2014-01-01' AS DATE) as date_val,
       TIMESTAMP '2014-01-01 00:00:01.011011 UTC' as
           timestamp_val,
       CAST(-1 AS numeric) as numeric_val
UNION ALL
SELECT CAST(4 AS int64) as row_id,
       CAST(false AS bool) as bool_val,
       CAST(-2 AS int32) as int32_val,
       CAST(-2 AS int64) as int64_val,
       CAST(2 AS uint32) as uint32_val,
       CAST(2 AS uint64) as uint64_val,
       CAST(0.25 AS float) as float_val,
       CAST(pow(0.1, 324) AS double) as double_val, #positive 0 of type double
       CAST("2" AS string) as str_val,
       CAST("2" AS BYTES) as bytes_val,
       CAST('2014-01-02' AS DATE) as date_val,
       TIMESTAMP '2014-01-02 00:00:02.022022 UTC' as
           timestamp_val,
       CAST(-5.43 AS numeric) as numeric_val
UNION ALL
SELECT CAST(5 AS int64) as row_id,
       CAST(false AS bool) as bool_val,
       CAST(-2 AS int32) as int32_val,
       CAST(-2 AS int64) as int64_val,
       CAST(2 AS uint32) as uint32_val,
       CAST(2 AS uint64) as uint64_val,
       CAST("-Inf" AS float) as float_val,
       CAST(0.25 AS double) as double_val,
       CAST("2" AS string) as str_val,
       CAST("2" AS BYTES) as bytes_val,
       CAST('2014-01-02' AS DATE) as date_val,
       TIMESTAMP '2014-01-02 00:00:02.022022 UTC' as
           timestamp_val,
       CAST(5.55 AS numeric) as numeric_val
UNION ALL
SELECT CAST(6 AS int64) as row_id,
       CAST(true AS bool) as bool_val,
       CAST(-3 AS int32) as int32_val,
       CAST(-3 AS int64) as int64_val,
       CAST(3 AS uint32) as uint32_val,
       CAST(3 AS uint64) as uint64_val,
       CAST(0.375 AS float) as float_val,
       CAST(0.375 AS double) as double_val,
       CAST("3" AS string) as str_val,
       CAST("3" AS BYTES) as bytes_val,
       CAST('2014-01-03' AS DATE) as date_val,
       TIMESTAMP '2014-01-03 00:00:03.033033 UTC' as
           timestamp_val,
       CAST(3.14 AS numeric) as numeric_val
UNION ALL
SELECT CAST(7 AS int64) as row_id,
       CAST(false AS bool) as bool_val,
       CAST(-4 AS int32) as int32_val,
       CAST(-4 AS int64) as int64_val,
       CAST(4 AS uint32) as uint32_val,
       CAST(4 AS uint64) as uint64_val,
       CAST(0.5 AS float) as float_val,
       CAST(0.5 AS double) as double_val,
       CAST("4" AS string) as str_val,
       CAST("4" AS BYTES) as bytes_val,
       CAST('2014-01-04' AS DATE) as date_val,
       TIMESTAMP '2014-01-04 00:00:04.044044 UTC' as
           timestamp_val,
       CAST(4 AS numeric) as numeric_val
UNION ALL
SELECT CAST(8 AS int64) as row_id,
       CAST(NULL AS bool) as bool_val,
       CAST(NULL AS int32) as int32_val,
       CAST(NULL AS int64) as int64_val,
       CAST(NULL AS uint32) as uint32_val,
       CAST(NULL AS uint64) as uint64_val,
       CAST(NULL AS float) as float_val,
       CAST(NULL AS double) as double_val,
       CAST(NULL AS string) as str_val,
       CAST(NULL AS BYTES) as bytes_val,
       CAST(NULL AS DATE) as date_val,
       CAST(NULL AS TIMESTAMP) as timestamp_val,
       CAST(NULL AS numeric) as numeric_val
UNION ALL
SELECT CAST(9 AS int64) as row_id,
       CAST(NULL AS bool) as bool_val,
       CAST(NULL AS int32) as int32_val,
       CAST(NULL AS int64) as int64_val,
       CAST(NULL AS uint32) as uint32_val,
       CAST(NULL AS uint64) as uint64_val,
       CAST(-pow(0.1, 46) AS float) as float_val, #negative 0 of type float
       CAST("NaN" AS double) as double_val,
       CAST(NULL AS string) as str_val,
       CAST(NULL AS BYTES) as bytes_val,
       CAST(NULL AS DATE) as date_val,
       CAST(NULL AS TIMESTAMP) as timestamp_val,
       CAST(NULL AS numeric) as numeric_val
UNION ALL
SELECT CAST(10 AS int64) as row_id,
       CAST(true AS bool) as bool_val,
       CAST(1 AS int32) as int32_val,
       CAST(1 AS int64) as int64_val,
       CAST(11 AS uint32) as uint32_val,
       CAST(11 AS uint64) as uint64_val,
       CAST(0.625 AS float) as float_val,
       CAST(0.625 AS double) as double_val,
       CAST("6" AS string) as str_val,
       CAST("7" AS BYTES) as bytes_val,
       CAST('2014-01-08' AS DATE) as date_val,
       TIMESTAMP '2014-01-02 00:00:01.011011 UTC' as
           timestamp_val,
       CAST(1 AS numeric) as numeric_val
UNION ALL
SELECT CAST(11 AS int64) as row_id,
       CAST(false AS bool) as bool_val,
       CAST(5 AS int32) as int32_val,
       CAST(3 AS int64) as int64_val,
       CAST(11 AS uint32) as uint32_val,
       CAST(8 AS uint64) as uint64_val,
       CAST(-0.125 AS float) as float_val,
       CAST(-0.125 AS double) as double_val,
       CAST("123" AS string) as str_val,
       CAST("123" AS BYTES) as bytes_val,
       CAST('2014-02-01' AS DATE) as date_val,
       TIMESTAMP '2014-04-01 00:00:01.011011 UTC' as
           timestamp_val,
       CAST(7 AS numeric) as numeric_val
UNION ALL
SELECT CAST(12 AS int64) as row_id,
       CAST(false AS bool) as bool_val,
       CAST(2 AS int32) as int32_val,
       CAST(16 AS int64) as int64_val,
       CAST(5 AS uint32) as uint32_val,
       CAST(9 AS uint64) as uint64_val,
       CAST(0.75 AS float) as float_val,
       CAST(-0.25 AS double) as double_val,
       CAST("24" AS string) as str_val,
       CAST("22" AS BYTES) as bytes_val,
       CAST('2014-02-02' AS DATE) as date_val,
       TIMESTAMP '2014-01-05 00:00:02.022022 UTC' as
           timestamp_val,
       CAST(7 AS numeric) as numeric_val
UNION ALL
SELECT CAST(13 AS int64) as row_id,
       CAST(false AS bool) as bool_val,
       CAST(9 AS int32) as int32_val,
       CAST(9 AS int64) as int64_val,
       CAST(4 AS uint32) as uint32_val,
       CAST(8 AS uint64) as uint64_val,
       CAST(-0.25 AS float) as float_val,
       CAST(-0.75 AS double) as double_val,
       CAST("222" AS string) as str_val,
       CAST("234" AS BYTES) as bytes_val,
       CAST('2014-05-02' AS DATE) as date_val,
       TIMESTAMP '2014-05-02 00:00:02.022022 UTC' as
           timestamp_val,
       CAST(7.000000001 AS numeric) as numeric_val
UNION ALL
SELECT CAST(14 AS int64) as row_id,
       CAST(true AS bool) as bool_val,
       CAST(13 AS int32) as int32_val,
       CAST(23 AS int64) as int64_val,
       CAST(31 AS uint32) as uint32_val,
       CAST(32 AS uint64) as uint64_val,
       CAST(-0.375 AS float) as float_val,
       CAST(-0.375 AS double) as double_val,
       CAST("345" AS string) as str_val,
       CAST("345" AS BYTES) as bytes_val,
       CAST('2014-01-06' AS DATE) as date_val,
       TIMESTAMP '2014-01-04 00:00:03.033033 UTC' as
           timestamp_val,
       CAST(6.999999999 AS numeric) as numeric_val
UNION ALL
SELECT CAST(15 AS int64) as row_id,
       CAST(false AS bool) as bool_val,
       CAST(-24 AS int32) as int32_val,
       CAST(-14 AS int64) as int64_val,
       CAST(41 AS uint32) as uint32_val,
       CAST(54 AS uint64) as uint64_val,
       CAST(-0.5 AS float) as float_val,
       CAST(-0.5 AS double) as double_val,
       CAST("432" AS string) as str_val,
       CAST("433" AS BYTES) as bytes_val,
       CAST('2014-02-04' AS DATE) as date_val,
       TIMESTAMP '2014-02-04 00:00:04.044044 UTC' as
           timestamp_val,
       CAST(999.999 AS numeric) as numeric_val
UNION ALL
SELECT CAST(16 AS int64) as row_id,
       CAST(false AS bool) as bool_val,
       CAST(NULL AS int32) as int32_val,
       CAST(-1 AS int64) as int64_val,
       CAST(NULL AS uint32) as uint32_val,
       CAST(1 AS uint64) as uint64_val,
       CAST(NULL AS float) as float_val,
       CAST(-pow(0.1, 324) AS double) as double_val, #negative 0 of type double
       CAST(NULL AS string) as str_val,
       CAST("1" AS BYTES) as bytes_val,
       CAST(NULL AS DATE) as date_val,
       TIMESTAMP '2014-02-04 00:00:04.044044 UTC' as
           timestamp_val,
       CAST(NULL AS numeric) as numeric_val
UNION ALL
SELECT CAST(17 AS int64) as row_id,
       CAST(NULL AS bool) as bool_val,
       CAST(-1 AS int32) as int32_val,
       CAST(NULL AS int64) as int64_val,
       CAST(1 AS uint32) as uint32_val,
       CAST(NULL AS uint64) as uint64_val,
       CAST(pow(0.1, 46) AS float) as float_val, #positive 0 of type float
       CAST(NULL AS double) as double_val,
       CAST("1" AS string) as str_val,
       CAST(NULL AS BYTES) as bytes_val,
       CAST('2014-02-04' AS DATE) as date_val,
       CAST(NULL AS TIMESTAMP) as timestamp_val,
       CAST(1 AS numeric) as numeric_val
UNION ALL
SELECT CAST(18 AS int64) as row_id,
       CAST(true AS bool) as bool_val,
       CAST(-1 AS int32) as int32_val,
       CAST(-1 AS int64) as int64_val,
       CAST(1 AS uint32) as uint32_val,
       CAST(1 AS uint64) as uint64_val,
       CAST(0.125 AS float) as float_val,
       CAST(0.125 AS double) as double_val,
       CAST("1" AS string) as str_val,
       CAST("1" AS BYTES) as bytes_val,
       CAST('2014-01-01' AS DATE) as date_val,
       TIMESTAMP '2014-01-01 00:00:01.011011 UTC' as
           timestamp_val,
       CAST(1 AS numeric) as numeric_val
UNION ALL
SELECT CAST(19 AS int64) as row_id,
       CAST(true AS bool) as bool_val,
       CAST(-1 AS int32) as int32_val,
       CAST(-1 AS int64) as int64_val,
       CAST(1 AS uint32) as uint32_val,
       CAST(1 AS uint64) as uint64_val,
       CAST("NaN" AS float) as float_val,
       CAST("+Inf" AS double) as double_val,
       CAST("1" AS string) as str_val,
       CAST("1" AS BYTES) as bytes_val,
       CAST('2014-01-01' AS DATE) as date_val,
       TIMESTAMP '2014-01-01 00:00:01.011011 UTC' as
           timestamp_val,
       CAST("99999999999999999999999999999.999999999" AS numeric) as numeric_val
UNION ALL
SELECT CAST(20 AS int64) as row_id,
       CAST(true AS bool) as bool_val,
       CAST(-1 AS int32) as int32_val,
       CAST(-1 AS int64) as int64_val,
       CAST(1 AS uint32) as uint32_val,
       CAST(1 AS uint64) as uint64_val,
       CAST("+Inf" AS float) as float_val,
       CAST("-Inf" AS double) as double_val,
       CAST("1" AS string) as str_val,
       CAST("1" AS BYTES) as bytes_val,
       CAST('2014-01-01' AS DATE) as date_val,
       TIMESTAMP '2014-01-01 00:00:01.011011 UTC' as
           timestamp_val,
       CAST("-99999999999999999999999999999.999999999" AS numeric) as
           numeric_val
UNION ALL
SELECT CAST(21 AS int64) as row_id,
       CAST(false AS bool) as bool_val,
       CAST(-2 AS int32) as int32_val,
       CAST(-2 AS int64) as int64_val,
       CAST(2 AS uint32) as uint32_val,
       CAST(2 AS uint64) as uint64_val,
       CAST(0.25 AS float) as float_val,
       CAST(pow(0.1, 324) AS double) as double_val, #positive 0 of type double
       CAST("2" AS string) as str_val,
       CAST("2" AS BYTES) as bytes_val,
       CAST('2014-01-02' AS DATE) as date_val,
       TIMESTAMP '2014-01-02 00:00:02.022022 UTC' as
           timestamp_val,
       CAST("0.999999999" AS numeric) as numeric_val
UNION ALL
SELECT CAST(22 AS int64) as row_id,
       CAST(false AS bool) as bool_val,
       CAST(-2 AS int32) as int32_val,
       CAST(-2 AS int64) as int64_val,
       CAST(2 AS uint32) as uint32_val,
       CAST(2 AS uint64) as uint64_val,
       CAST("-Inf" AS float) as float_val,
       CAST(0.25 AS double) as double_val,
       CAST("2" AS string) as str_val,
       CAST("2" AS BYTES) as bytes_val,
       CAST('2014-01-02' AS DATE) as date_val,
       TIMESTAMP '2014-01-02 00:00:02.022022 UTC' as
           timestamp_val,
       CAST("-0.999999999" AS numeric) as numeric_val
UNION ALL
SELECT CAST(23 AS int64) as row_id,
       CAST(true AS bool) as bool_val,
       CAST(-3 AS int32) as int32_val,
       CAST(-3 AS int64) as int64_val,
       CAST(3 AS uint32) as uint32_val,
       CAST(3 AS uint64) as uint64_val,
       CAST(0.375 AS float) as float_val,
       CAST(0.375 AS double) as double_val,
       CAST("3" AS string) as str_val,
       CAST("3" AS BYTES) as bytes_val,
       CAST('2014-01-03' AS DATE) as date_val,
       TIMESTAMP '2014-01-03 00:00:03.033033 UTC' as
           timestamp_val,
       CAST("-0.999999999" AS numeric) as numeric_val
UNION ALL
SELECT CAST(24 AS int64) as row_id,
       CAST(false AS bool) as bool_val,
       CAST(-4 AS int32) as int32_val,
       CAST(-4 AS int64) as int64_val,
       CAST(4 AS uint32) as uint32_val,
       CAST(4 AS uint64) as uint64_val,
       CAST(0.5 AS float) as float_val,
       CAST(0.5 AS double) as double_val,
       CAST("4" AS string) as str_val,
       CAST("4" AS BYTES) as bytes_val,
       CAST('2014-01-04' AS DATE) as date_val,
       TIMESTAMP '2014-01-04 00:00:04.044044 UTC' as
           timestamp_val,
       CAST(0.4 AS numeric) as numeric_val
UNION ALL
SELECT CAST(25 AS int64) as row_id,
       CAST(NULL AS bool) as bool_val,
       CAST(NULL AS int32) as int32_val,
       CAST(NULL AS int64) as int64_val,
       CAST(NULL AS uint32) as uint32_val,
       CAST(NULL AS uint64) as uint64_val,
       CAST(NULL AS float) as float_val,
       CAST(NULL AS double) as double_val,
       CAST(NULL AS string) as str_val,
       CAST(NULL AS BYTES) as bytes_val,
       CAST(NULL AS DATE) as date_val,
       CAST(NULL AS TIMESTAMP) as timestamp_val,
       CAST(NULL AS numeric) as numeric_val
UNION ALL
SELECT CAST(26 AS int64) as row_id,
       CAST(NULL AS bool) as bool_val,
       CAST(NULL AS int32) as int32_val,
       CAST(NULL AS int64) as int64_val,
       CAST(NULL AS uint32) as uint32_val,
       CAST(NULL AS uint64) as uint64_val,
       CAST(-pow(0.1, 46) AS float) as float_val, #negative 0 of type float
       CAST("NaN" AS double) as double_val,
       CAST(NULL AS string) as str_val,
       CAST(NULL AS BYTES) as bytes_val,
       CAST(NULL AS DATE) as date_val,
       CAST(NULL AS TIMESTAMP) as timestamp_val,
       CAST(NULL AS numeric) as numeric_val
UNION ALL
SELECT CAST(27 AS int64) as row_id,
       CAST(true AS bool) as bool_val,
       CAST(1 AS int32) as int32_val,
       CAST(1 AS int64) as int64_val,
       CAST(11 AS uint32) as uint32_val,
       CAST(11 AS uint64) as uint64_val,
       CAST(0.625 AS float) as float_val,
       CAST(0.625 AS double) as double_val,
       CAST("6" AS string) as str_val,
       CAST("7" AS BYTES) as bytes_val,
       CAST('2014-01-08' AS DATE) as date_val,
       TIMESTAMP '2014-01-02 00:00:01.011011 UTC' as
           timestamp_val,
       CAST(1 AS numeric) as numeric_val
UNION ALL
SELECT CAST(28 AS int64) as row_id,
       CAST(false AS bool) as bool_val,
       CAST(5 AS int32) as int32_val,
       CAST(3 AS int64) as int64_val,
       CAST(11 AS uint32) as uint32_val,
       CAST(8 AS uint64) as uint64_val,
       CAST(-0.125 AS float) as float_val,
       CAST(-0.125 AS double) as double_val,
       CAST("123" AS string) as str_val,
       CAST("123" AS BYTES) as bytes_val,
       CAST('2014-02-01' AS DATE) as date_val,
       TIMESTAMP '2014-04-01 00:00:01.011011 UTC' as
           timestamp_val,
       CAST(3 AS numeric) as numeric_val
UNION ALL
SELECT CAST(29 AS int64) as row_id,
       CAST(false AS bool) as bool_val,
       CAST(2 AS int32) as int32_val,
       CAST(16 AS int64) as int64_val,
       CAST(5 AS uint32) as uint32_val,
       CAST(9 AS uint64) as uint64_val,
       CAST(0.75 AS float) as float_val,
       CAST(-0.25 AS double) as double_val,
       CAST("24" AS string) as str_val,
       CAST("22" AS BYTES) as bytes_val,
       CAST('2014-02-02' AS DATE) as date_val,
       TIMESTAMP '2014-01-05 00:00:02.022022 UTC' as
           timestamp_val,
       CAST(2 AS numeric) as numeric_val
UNION ALL
SELECT CAST(30 AS int64) as row_id,
       CAST(false AS bool) as bool_val,
       CAST(9 AS int32) as int32_val,
       CAST(9 AS int64) as int64_val,
       CAST(4 AS uint32) as uint32_val,
       CAST(8 AS uint64) as uint64_val,
       CAST(-0.25 AS float) as float_val,
       CAST(-0.75 AS double) as double_val,
       CAST("222" AS string) as str_val,
       CAST("234" AS BYTES) as bytes_val,
       CAST('2014-05-02' AS DATE) as date_val,
       TIMESTAMP '2014-05-02 00:00:02.022022 UTC' as
           timestamp_val,
       CAST(4 AS numeric) as numeric_val
UNION ALL
SELECT CAST(31 AS int64) as row_id,
       CAST(true AS bool) as bool_val,
       CAST(13 AS int32) as int32_val,
       CAST(23 AS int64) as int64_val,
       CAST(31 AS uint32) as uint32_val,
       CAST(32 AS uint64) as uint64_val,
       CAST(-0.375 AS float) as float_val,
       CAST(-0.375 AS double) as double_val,
       CAST("345" AS string) as str_val,
       CAST("345" AS BYTES) as bytes_val,
       CAST('2014-01-06' AS DATE) as date_val,
       TIMESTAMP '2014-01-04 00:00:03.033033 UTC' as
           timestamp_val,
       CAST(51 AS numeric) as numeric_val
UNION ALL
SELECT CAST(32 AS int64) as row_id,
       CAST(false AS bool) as bool_val,
       CAST(-24 AS int32) as int32_val,
       CAST(-14 AS int64) as int64_val,
       CAST(41 AS uint32) as uint32_val,
       CAST(54 AS uint64) as uint64_val,
       CAST(-0.5 AS float) as float_val,
       CAST(-0.5 AS double) as double_val,
       CAST("432" AS string) as str_val,
       CAST("433" AS BYTES) as bytes_val,
       CAST('2014-02-04' AS DATE) as date_val,
       TIMESTAMP '2014-02-04 00:00:04.044044 UTC' as
           timestamp_val,
       CAST(42 AS numeric) as numeric_val
UNION ALL
SELECT CAST(33 AS int64) as row_id,
       CAST(false AS bool) as bool_val,
       CAST(NULL AS int32) as int32_val,
       CAST(-1 AS int64) as int64_val,
       CAST(NULL AS uint32) as uint32_val,
       CAST(1 AS uint64) as uint64_val,
       CAST(NULL AS float) as float_val,
       CAST(-pow(0.1, 324) AS double) as double_val, #negative 0 of type double
       CAST(NULL AS string) as str_val,
       CAST("1" AS BYTES) as bytes_val,
       CAST(NULL AS DATE) as date_val,
       TIMESTAMP '2014-02-04 00:00:04.044044 UTC' as
           timestamp_val,
       CAST(NULL AS numeric) as numeric_val
UNION ALL
SELECT CAST(34 AS int64) as row_id,
       CAST(NULL AS bool) as bool_val,
       CAST(-1 AS int32) as int32_val,
       CAST(NULL AS int64) as int64_val,
       CAST(1 AS uint32) as uint32_val,
       CAST(NULL AS uint64) as uint64_val,
       CAST(pow(0.1, 46) AS float) as float_val, #positive 0 of type float
       CAST(NULL AS double) as double_val,
       CAST("1" AS string) as str_val,
       CAST(NULL AS BYTES) as bytes_val,
       CAST('2014-02-04' AS DATE) as date_val,
       CAST(NULL AS TIMESTAMP) as timestamp_val,
       CAST(-1 AS numeric) as numeric_val
--
ARRAY<STRUCT<
        row_id INT64,
        bool_val BOOL,
        int32_val INT32,
        int64_val INT64,
        uint32_val UINT32,
        uint64_val UINT64,
        float_val FLOAT,
        double_val DOUBLE,
        str_val STRING,
        bytes_val BYTES,
        date_val DATE,
        timestamp_val TIMESTAMP,
        numeric_val NUMERIC
      >>
[{
   1,
   true,
   -1,
   -1,
   1,
   1,
   0.125,
   0.125,
   "1",
   b"1",
   2014-01-01,
   2014-01-01 00:00:01.011011+00,
   1
 },
 {
   2,
   true,
   -1,
   -1,
   1,
   1,
   nan,
   inf,
   "1",
   b"1",
   2014-01-01,
   2014-01-01 00:00:01.011011+00,
   1
 },
 {
   3,
   true,
   -1,
   -1,
   1,
   1,
   inf,
   -inf,
   "1",
   b"1",
   2014-01-01,
   2014-01-01 00:00:01.011011+00,
   -1
 },
 {
   4,
   false,
   -2,
   -2,
   2,
   2,
   0.25,
   0,
   "2",
   b"2",
   2014-01-02,
   2014-01-02 00:00:02.022022+00,
   -5.43
 },
 {
   5,
   false,
   -2,
   -2,
   2,
   2,
   -inf,
   0.25,
   "2",
   b"2",
   2014-01-02,
   2014-01-02 00:00:02.022022+00,
   5.55
 },
 {
   6,
   true,
   -3,
   -3,
   3,
   3,
   0.375,
   0.375,
   "3",
   b"3",
   2014-01-03,
   2014-01-03 00:00:03.033033+00,
   3.14
 },
 {
   7,
   false,
   -4,
   -4,
   4,
   4,
   0.5,
   0.5,
   "4",
   b"4",
   2014-01-04,
   2014-01-04 00:00:04.044044+00,
   4
 },
 {8, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
 {9, NULL, NULL, NULL, NULL, NULL, -0, nan, NULL, NULL, NULL, NULL, NULL},
 {
   10,
   true,
   1,
   1,
   11,
   11,
   0.625,
   0.625,
   "6",
   b"7",
   2014-01-08,
   2014-01-02 00:00:01.011011+00,
   1
 },
 {
   11,
   false,
   5,
   3,
   11,
   8,
   -0.125,
   -0.125,
   "123",
   b"123",
   2014-02-01,
   2014-04-01 00:00:01.011011+00,
   7
 },
 {
   12,
   false,
   2,
   16,
   5,
   9,
   0.75,
   -0.25,
   "24",
   b"22",
   2014-02-02,
   2014-01-05 00:00:02.022022+00,
   7
 },
 {
   13,
   false,
   9,
   9,
   4,
   8,
   -0.25,
   -0.75,
   "222",
   b"234",
   2014-05-02,
   2014-05-02 00:00:02.022022+00,
   7.000000001
 },
 {
   14,
   true,
   13,
   23,
   31,
   32,
   -0.375,
   -0.375,
   "345",
   b"345",
   2014-01-06,
   2014-01-04 00:00:03.033033+00,
   6.999999999
 },
 {
   15,
   false,
   -24,
   -14,
   41,
   54,
   -0.5,
   -0.5,
   "432",
   b"433",
   2014-02-04,
   2014-02-04 00:00:04.044044+00,
   999.999
 },
 {
   16,
   false,
   NULL,
   -1,
   NULL,
   1,
   NULL,
   -0,
   NULL,
   b"1",
   NULL,
   2014-02-04 00:00:04.044044+00,
   NULL
 },
 {17, NULL, -1, NULL, 1, NULL, 0, NULL, "1", NULL, 2014-02-04, NULL, 1},
 {
   18,
   true,
   -1,
   -1,
   1,
   1,
   0.125,
   0.125,
   "1",
   b"1",
   2014-01-01,
   2014-01-01 00:00:01.011011+00,
   1
 },
 {
   19,
   true,
   -1,
   -1,
   1,
   1,
   nan,
   inf,
   "1",
   b"1",
   2014-01-01,
   2014-01-01 00:00:01.011011+00,
   99999999999999999999999999999.999999999
 },
 {
   20,
   true,
   -1,
   -1,
   1,
   1,
   inf,
   -inf,
   "1",
   b"1",
   2014-01-01,
   2014-01-01 00:00:01.011011+00,
   -99999999999999999999999999999.999999999
 },
 {
   21,
   false,
   -2,
   -2,
   2,
   2,
   0.25,
   0,
   "2",
   b"2",
   2014-01-02,
   2014-01-02 00:00:02.022022+00,
   0.999999999
 },
 {
   22,
   false,
   -2,
   -2,
   2,
   2,
   -inf,
   0.25,
   "2",
   b"2",
   2014-01-02,
   2014-01-02 00:00:02.022022+00,
   -0.999999999
 },
 {
   23,
   true,
   -3,
   -3,
   3,
   3,
   0.375,
   0.375,
   "3",
   b"3",
   2014-01-03,
   2014-01-03 00:00:03.033033+00,
   -0.999999999
 },
 {
   24,
   false,
   -4,
   -4,
   4,
   4,
   0.5,
   0.5,
   "4",
   b"4",
   2014-01-04,
   2014-01-04 00:00:04.044044+00,
   0.4
 },
 {25, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
 {26, NULL, NULL, NULL, NULL, NULL, -0, nan, NULL, NULL, NULL, NULL, NULL},
 {
   27,
   true,
   1,
   1,
   11,
   11,
   0.625,
   0.625,
   "6",
   b"7",
   2014-01-08,
   2014-01-02 00:00:01.011011+00,
   1
 },
 {
   28,
   false,
   5,
   3,
   11,
   8,
   -0.125,
   -0.125,
   "123",
   b"123",
   2014-02-01,
   2014-04-01 00:00:01.011011+00,
   3
 },
 {
   29,
   false,
   2,
   16,
   5,
   9,
   0.75,
   -0.25,
   "24",
   b"22",
   2014-02-02,
   2014-01-05 00:00:02.022022+00,
   2
 },
 {
   30,
   false,
   9,
   9,
   4,
   8,
   -0.25,
   -0.75,
   "222",
   b"234",
   2014-05-02,
   2014-05-02 00:00:02.022022+00,
   4
 },
 {
   31,
   true,
   13,
   23,
   31,
   32,
   -0.375,
   -0.375,
   "345",
   b"345",
   2014-01-06,
   2014-01-04 00:00:03.033033+00,
   51
 },
 {
   32,
   false,
   -24,
   -14,
   41,
   54,
   -0.5,
   -0.5,
   "432",
   b"433",
   2014-02-04,
   2014-02-04 00:00:04.044044+00,
   42
 },
 {
   33,
   false,
   NULL,
   -1,
   NULL,
   1,
   NULL,
   -0,
   NULL,
   b"1",
   NULL,
   2014-02-04 00:00:04.044044+00,
   NULL
 },
 {34, NULL, -1, NULL, 1, NULL, 0, NULL, "1", NULL, 2014-02-04, NULL, -1}]
==
[prepare_database]
[required_features=BIGNUMERIC_TYPE]
CREATE TABLE AllTypesBigNumericTable AS
SELECT CAST(1 AS int64) as row_id,
       CAST("1" AS string) as str_val,
       CAST(1 AS bignumeric) as bignumeric_val
UNION ALL
SELECT CAST(2 AS int64) as row_id,
       CAST("1" AS string) as str_val,
       CAST(1 AS bignumeric) as bignumeric_val
UNION ALL
SELECT CAST(3 AS int64) as row_id,
       CAST("1" AS string) as str_val,
       CAST(-1 AS bignumeric) as bignumeric_val
UNION ALL
SELECT CAST(4 AS int64) as row_id,
       CAST("2" AS string) as str_val,
       CAST(-5.43 AS bignumeric) as bignumeric_val
UNION ALL
SELECT CAST(5 AS int64) as row_id,
       CAST("2" AS string) as str_val,
       CAST(5.55 AS bignumeric) as bignumeric_val
UNION ALL
SELECT CAST(6 AS int64) as row_id,
       CAST("3" AS string) as str_val,
       CAST(3.14 AS bignumeric) as bignumeric_val
UNION ALL
SELECT CAST(7 AS int64) as row_id,
       CAST("4" AS string) as str_val,
       CAST(4 AS bignumeric) as bignumeric_val
UNION ALL
SELECT CAST(8 AS int64) as row_id,
       CAST(NULL AS string) as str_val,
       CAST(NULL AS bignumeric) as bignumeric_val
UNION ALL
SELECT CAST(9 AS int64) as row_id,
       CAST(NULL AS string) as str_val,
       CAST(NULL AS bignumeric) as bignumeric_val
UNION ALL
SELECT CAST(10 AS int64) as row_id,
       CAST("6" AS string) as str_val,
       CAST(1 AS bignumeric) as bignumeric_val
UNION ALL
SELECT CAST(11 AS int64) as row_id,
       CAST("123" AS string) as str_val,
       CAST(7 AS bignumeric) as bignumeric_val
UNION ALL
SELECT CAST(12 AS int64) as row_id,
       CAST("24" AS string) as str_val,
       CAST(7 AS bignumeric) as bignumeric_val
UNION ALL
SELECT CAST(13 AS int64) as row_id,
       CAST("222" AS string) as str_val,
       CAST("5.00000000000000000000000000000000000001" AS bignumeric) as bignumeric_val
UNION ALL
SELECT CAST(14 AS int64) as row_id,
       CAST("345" AS string) as str_val,
       CAST("4.99999999999999999999999999999999999999" AS bignumeric) as bignumeric_val
UNION ALL
SELECT CAST(15 AS int64) as row_id,
       CAST("432" AS string) as str_val,
       CAST("123456789012345678901234567890123456789.12345678901234567890123456789012345678" AS bignumeric) as bignumeric_val
UNION ALL
SELECT CAST(16 AS int64) as row_id,
       CAST(NULL AS string) as str_val,
       CAST(NULL AS bignumeric) as bignumeric_val
UNION ALL
SELECT CAST(17 AS int64) as row_id,
       CAST("1" AS string) as str_val,
       CAST(1 AS bignumeric) as bignumeric_val
UNION ALL
SELECT CAST(18 AS int64) as row_id,
       CAST("1" AS string) as str_val,
       CAST(1 AS bignumeric) as bignumeric_val
UNION ALL
SELECT CAST(19 AS int64) as row_id,
       CAST("1" AS string) as str_val,
       CAST("578960446186580977117854925043439539266.34992332820282019728792003956564819967" AS bignumeric) as bignumeric_val
UNION ALL
SELECT CAST(20 AS int64) as row_id,
       CAST("1" AS string) as str_val,
       CAST("-578960446186580977117854925043439539266.34992332820282019728792003956564819968" AS bignumeric) as bignumeric_val
UNION ALL
SELECT CAST(21 AS int64) as row_id,
       CAST("2" AS string) as str_val,
       CAST("0.99999999999999999999999999999999999999" AS bignumeric) as bignumeric_val
UNION ALL
SELECT CAST(22 AS int64) as row_id,
       CAST("2" AS string) as str_val,
       CAST("-0.99999999999999999999999999999999999999" AS bignumeric) as bignumeric_val
UNION ALL
SELECT CAST(23 AS int64) as row_id,
       CAST("3" AS string) as str_val,
       CAST("-0.99999999999999999999999999999999999999" AS bignumeric) as bignumeric_val
UNION ALL
SELECT CAST(24 AS int64) as row_id,
       CAST("4" AS string) as str_val,
       CAST(0.4 AS bignumeric) as bignumeric_val
UNION ALL
SELECT CAST(25 AS int64) as row_id,
       CAST(NULL AS string) as str_val,
       CAST(NULL AS bignumeric) as bignumeric_val
UNION ALL
SELECT CAST(26 AS int64) as row_id,
       CAST(NULL AS string) as str_val,
       CAST(NULL AS bignumeric) as bignumeric_val
UNION ALL
SELECT CAST(27 AS int64) as row_id,
       CAST("6" AS string) as str_val,
       CAST(1 AS bignumeric) as bignumeric_val
UNION ALL
SELECT CAST(28 AS int64) as row_id,
       CAST("123" AS string) as str_val,
       CAST(2 AS bignumeric) as bignumeric_val
UNION ALL
SELECT CAST(29 AS int64) as row_id,
       CAST("24" AS string) as str_val,
       CAST(3 AS bignumeric) as bignumeric_val
UNION ALL
SELECT CAST(30 AS int64) as row_id,
       CAST("222" AS string) as str_val,
       CAST(4 AS bignumeric) as bignumeric_val
UNION ALL
SELECT CAST(31 AS int64) as row_id,
       CAST("345" AS string) as str_val,
       CAST(55 AS bignumeric) as bignumeric_val
UNION ALL
SELECT CAST(32 AS int64) as row_id,
       CAST("432" AS string) as str_val,
       CAST(66 AS bignumeric) as bignumeric_val
UNION ALL
SELECT CAST(33 AS int64) as row_id,
       CAST(NULL AS string) as str_val,
       CAST(NULL AS bignumeric) as bignumeric_val
UNION ALL
SELECT CAST(34 AS int64) as row_id,
       CAST("1" AS string) as str_val,
       CAST(-1 AS bignumeric) as bignumeric_val
--
ARRAY<STRUCT<
        row_id INT64,
        str_val STRING,
        bignumeric_val BIGNUMERIC
      >>
[
  {1, "1", 1},
  {2, "1", 1},
  {3, "1", -1},
  {4, "2", -5.43},
  {5, "2", 5.55},
  {6, "3", 3.14},
  {7, "4", 4},
  {8, NULL, NULL},
  {9, NULL, NULL},
  {10, "6", 1},
  {11, "123", 7},
  {12, "24", 7},
  {
    13,
    "222",
    5.00000000000000000000000000000000000001
  },
  {
    14,
    "345",
    4.99999999999999999999999999999999999999
  },
  {
    15,
    "432",
    123456789012345678901234567890123456789.12345678901234567890123456789012345678
  },
  {16, NULL, NULL},
  {17, "1", 1},
  {18, "1", 1},
  {
    19,
    "1",
    578960446186580977117854925043439539266.34992332820282019728792003956564819967
  },
  {
    20,
    "1",
    -578960446186580977117854925043439539266.34992332820282019728792003956564819968
  },
  {
    21,
    "2",
    0.99999999999999999999999999999999999999
  },
  {
    22,
    "2",
    -0.99999999999999999999999999999999999999
  },
  {
    23,
    "3",
    -0.99999999999999999999999999999999999999
  },
  {24, "4", 0.4},
  {25, NULL, NULL},
  {26, NULL, NULL},
  {27, "6", 1},
  {28, "123", 2},
  {29, "24", 3},
  {30, "222", 4},
  {31, "345", 55},
  {32, "432", 66},
  {33, NULL, NULL},
  {34, "1", -1}
]
==

#
# Negative cases
#
[name=groupby_non_groupby_column_in_select]
SELECT int64_val, int32_val FROM AllTypesTable GROUP BY int64_val
--
ERROR: generic::invalid_argument: SELECT list expression references column int32_val which is neither grouped nor aggregated [at 1:19]
SELECT int64_val, int32_val FROM AllTypesTable GROUP BY int64_val
                  ^
==
[name=groupby_expr_in_select]
SELECT int64_val + 1 FROM AllTypesTable GROUP BY int64_val + 1
--
ARRAY<STRUCT<INT64>>[
  {NULL},
  {-13},
  {-3},
  {-2},
  {-1},
  {0},
  {2},
  {4},
  {10},
  {17},
  {24}
]
==
[name=groupby_expr_in_select2]
SELECT int64_val + CAST(int32_val AS INT64) FROM AllTypesTable GROUP BY int64_val + CAST(int32_val AS INT64)
--
ARRAY<STRUCT<INT64>>[
  {NULL},
  {-38},
  {-8},
  {-6},
  {-4},
  {-2},
  {2},
  {8},
  {18},
  {36}
]
==
[name=groupby_expr_in_select3]
SELECT -CAST(REVERSE(str_val) AS INT64) FROM AllTypesTable GROUP BY -CAST(REVERSE(str_val) AS INT64)
--
ARRAY<STRUCT<INT64>>[
  {NULL},
  {-543},
  {-321},
  {-234},
  {-222},
  {-42},
  {-6},
  {-4},
  {-3},
  {-2},
  {-1}
]
==
[name=distinct_with_orderby]
SELECT distinct int64_val FROM AllTypesTable ORDER BY int64_val
--
ARRAY<STRUCT<int64_val INT64>>[
  {NULL},
  {-14},
  {-4},
  {-3},
  {-2},
  {-1},
  {1},
  {3},
  {9},
  {16},
  {23}
]
==
#
# Simple GROUP BY queries
#
[name=groupby_1]
SELECT distinct_1 functions FROM TableDistincts GROUP BY distinct_1
--
ARRAY<STRUCT<functions INT64>>[{1}]
==
[name=groupby_2]
SELECT distinct_2 FROM TableDistincts GROUP BY distinct_2
--
ARRAY<STRUCT<distinct_2 INT64>>[{1}, {2}]
==
[name=groupby_3]
SELECT distinct_8 FROM TableDistincts GROUP BY distinct_8
--
ARRAY<STRUCT<distinct_8 INT64>>[{1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}]
==
#
# GROUP BY with an aggregate function
#
[name=groupby_4]
SELECT distinct_2, COUNT(distinct_1) FROM TableDistincts GROUP BY distinct_2
--
ARRAY<STRUCT<distinct_2 INT64, INT64>>[{1, 8}, {2, 8}]
==
[name=groupby_5]
SELECT distinct_2, COUNT(distinct_4) FROM TableDistincts GROUP BY distinct_2
--
ARRAY<STRUCT<distinct_2 INT64, INT64>>[{1, 8}, {2, 8}]
==
[name=groupby_6]
SELECT distinct_2, COUNT(distinct_8) FROM TableDistincts GROUP BY distinct_2
--
ARRAY<STRUCT<distinct_2 INT64, INT64>>[{1, 8}, {2, 8}]
==
[name=groupby_7]
SELECT distinct_2, AVG(distinct_4) FROM TableDistincts GROUP BY distinct_2
--
ARRAY<STRUCT<distinct_2 INT64, DOUBLE>>[{1, 2}, {2, 3}]
==
[name=groupby_8]
SELECT distinct_1, COUNT(*) FROM TableDistincts GROUP BY distinct_1
--
ARRAY<STRUCT<distinct_1 INT64, INT64>>[{1, 16}]
==
[name=groupby_9]
SELECT distinct_4, SUM(distinct_8) FROM TableDistincts GROUP BY distinct_4
--
ARRAY<STRUCT<distinct_4 INT64, INT64>>[{1, 12}, {2, 16}, {3, 20}, {4, 24}]
==
[name=groupby_10]
SELECT distinct_8, ANY_VALUE(distinct_1) FROM TableDistincts GROUP BY distinct_8
--
ARRAY<STRUCT<distinct_8 INT64, INT64>>[
  {1, 1},
  {2, 1},
  {3, 1},
  {4, 1},
  {5, 1},
  {6, 1},
  {7, 1},
  {8, 1}
]
==
# GROUP BY with multiple aggregate functions.  The grouping column is not
# the first selected value.
[name=groupby_11]
SELECT COUNT(distinct_1) Agg1, distinct_2, MAX(distinct_4) Agg2,
       MIN(distinct_8) Agg3 FROM TableDistincts GROUP BY distinct_2
--
ARRAY<STRUCT<Agg1 INT64, distinct_2 INT64, Agg2 INT64, Agg3 INT64>>[
  {8, 1, 3, 1},
  {8, 2, 4, 2}
]
==
# Multiple grouping columns.
# Grouping on two columns multiplies the distinct value count.
[name=groupby_12]
SELECT COUNT(*) FROM (
  SELECT 1 FROM TableDistincts GROUP BY distinct_4, distinct_4B)
--
ARRAY<STRUCT<INT64>>[{16}]
==
# Different GROUPING columns provide the same result.
[name=groupby_13]
SELECT distinct_2, distinct_4B
  FROM TableDistincts GROUP BY distinct_2, distinct_4B
--
ARRAY<STRUCT<distinct_2 INT64, distinct_4B INT64>>[
  {1, 1},
  {1, 2},
  {1, 3},
  {1, 4},
  {2, 1},
  {2, 2},
  {2, 3},
  {2, 4}
]
==
# Prefixing redundant GROUP BY column distinct_2B doesn't change the result.
[name=groupby_14]
SELECT distinct_2, distinct_4B
  FROM TableDistincts GROUP BY distinct_2B, distinct_2, distinct_4B
--
ARRAY<STRUCT<distinct_2 INT64, distinct_4B INT64>>[
  {1, 1},
  {1, 2},
  {2, 1},
  {2, 2},
  {1, 3},
  {1, 4},
  {2, 3},
  {2, 4}
]
==
# Repeating a GROUP BY column does not change the result.
[name=groupby_15]
SELECT distinct_2, distinct_4B
  FROM TableDistincts GROUP BY distinct_2, distinct_4B, distinct_4B
--
ARRAY<STRUCT<distinct_2 INT64, distinct_4B INT64>>[
  {1, 1},
  {1, 2},
  {1, 3},
  {1, 4},
  {2, 1},
  {2, 2},
  {2, 3},
  {2, 4}
]
==
# Changing the order of grouping columns does not change the result.
[name=groupby_16]
SELECT distinct_2, distinct_4B
  FROM TableDistincts GROUP BY distinct_4B, distinct_2
--
ARRAY<STRUCT<distinct_2 INT64, distinct_4B INT64>>[
  {1, 1},
  {2, 1},
  {1, 2},
  {2, 2},
  {1, 3},
  {2, 3},
  {1, 4},
  {2, 4}
]
==
# Group By on the aggregate result of a previous Group By.
[name=groupby_17]
SELECT Max2, COUNT(*) AS Cnt FROM (
  SELECT distinct_8, MAX(distinct_2) AS Max2 FROM TableDistincts
    GROUP BY distinct_8)
  GROUP BY Max2
--
ARRAY<STRUCT<Max2 INT64, Cnt INT64>>[{1, 4}, {2, 4}]
==
# DISTINCT aggregation of atomic values
[name=groupby_25]
SELECT id,
       COUNT(a) count_all,
       COUNT(DISTINCT a) count_distinct,
       MIN(a) min_all,
       MIN(DISTINCT a) min_distinct,
       MAX(a) max_all,
       MAX(DISTINCT a) max_distinct,
       AVG(a) avg_all,
       AVG(DISTINCT a) avg_distinct,
       ARRAY_AGG(a) agg_all,
       ARRAY_AGG(DISTINCT a) agg_distinct
FROM (SELECT 0 id, 1 a UNION ALL SELECT 0, 1 UNION ALL SELECT 0, 2 UNION ALL
      SELECT 1 id, 10 UNION ALL SELECT 1, 10 UNION ALL SELECT 1, NULL)
GROUP BY id
--
ARRAY<STRUCT<id INT64,
             count_all INT64,
             count_distinct INT64,
             min_all INT64,
             min_distinct INT64,
             max_all INT64,
             max_distinct INT64,
             avg_all DOUBLE,
             avg_distinct DOUBLE,
             agg_all ARRAY<>,
             agg_distinct ARRAY<>>>
[{
   0,
   3,
   2,
   1,
   1,
   2,
   2,
   1.3333333333333333,
   1.5,
   ARRAY<INT64>[1, 1, 2],
   ARRAY<INT64>[1, 2]
 },
 {
   1,
   2,
   1,
   10,
   10,
   10,
   10,
   10,
   10,
   ARRAY<INT64>[10, NULL, 10],
   ARRAY<INT64>[10, NULL]
 }]
==
# @nan_01 and @nan02 are both nans with different bitwise representation.
[name=distinct_nan_different_bitwise_representation]
[parameters=CAST(b"\x08\x00\x10\x00\x49\x01\x00\x00\x00\x00\x00\xf0\x7f" as zetasql_test__.KitchenSinkPB).double_val as nan_01, CAST(b"\x08\x00\x10\x00\x49\x02\x00\x00\x00\x00\x00\xf0\x7f" as zetasql_test__.KitchenSinkPB).double_val as nan_02]
SELECT DISTINCT A FROM UNNEST([@nan_01, @nan_02]) AS A;
--
ARRAY<STRUCT<A DOUBLE>>[{nan}]
==
# Aggregation of struct values
[name=groupby_26]
SELECT id,
       COUNT(t) count_all,
       ARRAY_AGG(t) agg_all
FROM (SELECT 0 id, 1 a UNION ALL SELECT 0, 1 UNION ALL SELECT 0, 2 UNION ALL
      SELECT 1 id, 10 UNION ALL SELECT 1, 10 UNION ALL SELECT 1, NULL),
     UNNEST(ARRAY(SELECT AS STRUCT a AS x, a AS y)) t
GROUP BY id
--
ARRAY<STRUCT<id INT64, count_all INT64, agg_all ARRAY<>>>[
  {
    0,
    3,
    ARRAY<STRUCT<x INT64, y INT64>>[{1, 1}, {1, 1}, {2, 2}]
  },
  {
    1,
    3,
    ARRAY<STRUCT<x INT64, y INT64>>[{10, 10}, {10, 10}, {NULL, NULL}]
  }
]
==
#
# GROUP BY and other operators
#
[name=groupby_filter_on_groupby_column]
SELECT int64_val FROM AllTypesTable WHERE int64_val = 1 GROUP BY int64_val
--
ARRAY<STRUCT<int64_val INT64>>[{1}]
==
[name=groupby_filter_on_non_groupby_column]
SELECT int32_val FROM AllTypesTable WHERE double_val = 0.0 GROUP BY int32_val
--
ARRAY<STRUCT<int32_val INT32>>[{NULL}, {-2}]
==
[name=groupby_on_non_join_columns]
SELECT t1.int32_val, t2.int32_val
FROM AllTypesTable t1
  INNER JOIN AllTypesTable t2 ON t1.row_id = t2.row_id
GROUP BY t1.int32_val, t2.int32_val
--
ARRAY<STRUCT<int32_val INT32, int32_val INT32>>[
  {NULL, NULL},
  {-24, -24},
  {-4, -4},
  {-3, -3},
  {-2, -2},
  {-1, -1},
  {1, 1},
  {2, 2},
  {5, 5},
  {9, 9},
  {13, 13}
]
==
[name=groupby_on_one_join_column]
SELECT t1.row_id, t2.int32_val
FROM AllTypesTable t1
  INNER JOIN AllTypesTable t2 ON t1.row_id = t2.row_id
GROUP BY t1.row_id, t2.int32_val
--
ARRAY<STRUCT<row_id INT64, int32_val INT32>>[
  {1, -1},
  {2, -1},
  {3, -1},
  {4, -2},
  {5, -2},
  {6, -3},
  {7, -4},
  {8, NULL},
  {9, NULL},
  {10, 1},
  {11, 5},
  {12, 2},
  {13, 9},
  {14, 13},
  {15, -24},
  {16, NULL},
  {17, -1},
  {18, -1},
  {19, -1},
  {20, -1},
  {21, -2},
  {22, -2},
  {23, -3},
  {24, -4},
  {25, NULL},
  {26, NULL},
  {27, 1},
  {28, 5},
  {29, 2},
  {30, 9},
  {31, 13},
  {32, -24},
  {33, NULL},
  {34, -1}
]
==
[name=groupby_on_join_columns]
SELECT t1.row_id, t2.row_id
FROM AllTypesTable t1
  INNER JOIN AllTypesTable t2 ON t1.row_id = t2.row_id
GROUP BY t1.row_id, t2.row_id
--
ARRAY<STRUCT<row_id INT64, row_id INT64>>[
  {1, 1},
  {2, 2},
  {3, 3},
  {4, 4},
  {5, 5},
  {6, 6},
  {7, 7},
  {8, 8},
  {9, 9},
  {10, 10},
  {11, 11},
  {12, 12},
  {13, 13},
  {14, 14},
  {15, 15},
  {16, 16},
  {17, 17},
  {18, 18},
  {19, 19},
  {20, 20},
  {21, 21},
  {22, 22},
  {23, 23},
  {24, 24},
  {25, 25},
  {26, 26},
  {27, 27},
  {28, 28},
  {29, 29},
  {30, 30},
  {31, 31},
  {32, 32},
  {33, 33},
  {34, 34}
]
==

# -------------------
# Grouping of doubles.
# -------------------
[name=groupby_zeroes]
[test_features1=DISALLOW_GROUP_BY_FLOAT]
SELECT DOUBLE
from (select -0.0 DOUBLE union all
      select +0.0 union all
      select SQRT(0.0) union all
      select SQRT(-0.0) union all
      select 0.0 / 1 union all
      select 0.0 / -1 union all
      select -0.0 / 1 union all
      select -0.0 / -1 union all
      select (-0.0) * (-0.0) union all
      select (-0.0) + (-0.0) union all
      select (0.0) - (-0.0) union all
      select 1.0 - 1.0 union all
      select 0.0 / IEEE_DIVIDE(-1, 0.0) union all
      select -0.0 / IEEE_DIVIDE(-1, 0.0) union all
      select 0.0 / IEEE_DIVIDE(1, 0.0) union all
      select -0.0 / IEEE_DIVIDE(-1, 0.0) union all
      select cast("-0.0" as DOUBLE) union all
      select cast("+0.0" as DOUBLE)) val
GROUP BY DOUBLE
--
WITH FEATURES: <none>
ARRAY<STRUCT<DOUBLE DOUBLE>>[{0}]
--
WITH FEATURES: DISALLOW_GROUP_BY_FLOAT
ERROR: generic::invalid_argument: Grouping by expressions of type DOUBLE is not allowed [at 20:10]
GROUP BY DOUBLE
         ^
==

[name=groupby_positive_infinities]
[test_features1=DISALLOW_GROUP_BY_FLOAT]
SELECT DOUBLE
from (select IEEE_DIVIDE(1, 0) DOUBLE union all
      select POW(0.1, IEEE_DIVIDE(-1, 0)) union all
      select POW(1.1, IEEE_DIVIDE(1, 0)) union all
      select POW(IEEE_DIVIDE(-1, 0), 2) union all
      select POW(IEEE_DIVIDE(1, 0), 2) union all
      select LOG(IEEE_DIVIDE(1, 0), 1.1) union all
      select CAST("Inf" as DOUBLE)) val
GROUP BY DOUBLE
--
WITH FEATURES: <none>
ARRAY<STRUCT<DOUBLE DOUBLE>>[{inf}]
--
WITH FEATURES: DISALLOW_GROUP_BY_FLOAT
ERROR: generic::invalid_argument: Grouping by expressions of type DOUBLE is not allowed [at 9:10]
GROUP BY DOUBLE
         ^
==

[name=groupby_negative_infinities]
[test_features1=DISALLOW_GROUP_BY_FLOAT]
SELECT DOUBLE
from (select IEEE_DIVIDE(-1, 0) DOUBLE union all
      select POW(IEEE_DIVIDE(-1, 0), 3) union all
      select LOG(IEEE_DIVIDE(1, 0), 0.1) union all
      select CAST("-Inf" as DOUBLE)) val
GROUP BY DOUBLE
--
WITH FEATURES: <none>
ARRAY<STRUCT<DOUBLE DOUBLE>>[{-inf}]
--
WITH FEATURES: DISALLOW_GROUP_BY_FLOAT
ERROR: generic::invalid_argument: Grouping by expressions of type DOUBLE is not allowed [at 6:10]
GROUP BY DOUBLE
         ^
==

[name=groupby_nan]
[test_features1=DISALLOW_GROUP_BY_FLOAT]
SELECT NAN
from (select TAN(IEEE_DIVIDE(1, 0)) NAN union all
      select TAN(IEEE_DIVIDE(-1, 0)) union all
      select TAN(TAN(IEEE_DIVIDE(1, 0))) union all
      select IEEE_DIVIDE(0, 0) union all
      select LOG(IEEE_DIVIDE(-1, 0), 1) union all
      select LOG(1, IEEE_DIVIDE(1, 0)) union all
      select cast("NAN" as DOUBLE) union all
      select cast("-NAN" as DOUBLE) union all
      select -cast("NAN" as DOUBLE)) val
GROUP BY NAN
--
WITH FEATURES: <none>
ARRAY<STRUCT<NAN DOUBLE>>[{nan}]
--
WITH FEATURES: DISALLOW_GROUP_BY_FLOAT
ERROR: generic::invalid_argument: Grouping by expressions of type DOUBLE is not allowed [at 11:10]
GROUP BY NAN
         ^
==

[name=groupby_doubles]
[test_features1=DISALLOW_GROUP_BY_FLOAT]
SELECT DOUBLE
from (select -0.0 DOUBLE union all
      select +0.0 union all
      select SQRT(0.0) union all
      select SQRT(-0.0) union all
      select 0.0 / 1 union all
      select 0.0 / -1 union all
      select -0.0 / 1 union all
      select -0.0 / -1 union all
      select (-0.0) * (-0.0) union all
      select (-0.0) + (-0.0) union all
      select (0.0) - (-0.0) union all
      select cast(1.0 as double) union all
      select cast(NULL as double) union all
      select 1.0 - 1.0 union all
      select 0.0 / IEEE_DIVIDE(-1, 0.0) union all
      select -0.0 / IEEE_DIVIDE(-1, 0.0) union all
      select 0.0 / IEEE_DIVIDE(1, 0.0) union all
      select -0.0 / IEEE_DIVIDE(-1, 0.0) union all
      select cast("-0.0" as DOUBLE) union all
      select cast("+0.0" as DOUBLE) union all
      select cast(-1.0 as double) union all
      select -cast(NULL as double) union all
      select IEEE_DIVIDE(1, 0) union all
      select POW(0.1, IEEE_DIVIDE(-1, 0)) union all
      select POW(1.1, IEEE_DIVIDE(1, 0)) union all
      select POW(IEEE_DIVIDE(-1, 0), 2) union all
      select POW(IEEE_DIVIDE(1, 0), 2) union all
      select LOG(IEEE_DIVIDE(1, 0), 1.1) union all
      select CAST("Inf" as DOUBLE) union all
      select cast(1.0 as double) union all
      select -cast(NULL as double) union all
      select IEEE_DIVIDE(-1, 0) union all
      select POW(IEEE_DIVIDE(-1, 0), 3) union all
      select LOG(IEEE_DIVIDE(1, 0), 0.1) union all
      select CAST("-Inf" as DOUBLE) union all
      select TAN(IEEE_DIVIDE(1, 0)) union all
      select TAN(IEEE_DIVIDE(-1, 0)) union all
      select cast(-1.0 as double) union all
      select cast(NULL as double) union all
      select TAN(TAN(IEEE_DIVIDE(1, 0))) union all
      select IEEE_DIVIDE(0, 0) union all
      select LOG(IEEE_DIVIDE(-1, 0), 1) union all
      select LOG(1, IEEE_DIVIDE(1, 0)) union all
      select cast("NAN" as DOUBLE) union all
      select cast("-NAN" as DOUBLE) union all
      select -cast("NAN" as DOUBLE)) val
GROUP BY DOUBLE
--
WITH FEATURES: <none>
ARRAY<STRUCT<DOUBLE DOUBLE>>[{NULL}, {nan}, {-inf}, {-1}, {0}, {1}, {inf}]
--
WITH FEATURES: DISALLOW_GROUP_BY_FLOAT
ERROR: generic::invalid_argument: Grouping by expressions of type DOUBLE is not allowed [at 48:10]
GROUP BY DOUBLE
         ^
==

[name=groupby_orderby_desc_doubles]
[test_features1=DISALLOW_GROUP_BY_FLOAT]
SELECT DOUBLE
from (select -0.0 DOUBLE union all
      select +0.0 union all
      select SQRT(0.0) union all
      select SQRT(-0.0) union all
      select 0.0 / 1 union all
      select 0.0 / -1 union all
      select -0.0 / 1 union all
      select -0.0 / -1 union all
      select (-0.0) * (-0.0) union all
      select (-0.0) + (-0.0) union all
      select (0.0) - (-0.0) union all
      select cast(1.0 as double) union all
      select cast(NULL as double) union all
      select 1.0 - 1.0 union all
      select 0.0 / IEEE_DIVIDE(-1, 0.0) union all
      select -0.0 / IEEE_DIVIDE(-1, 0.0) union all
      select 0.0 / IEEE_DIVIDE(1, 0.0) union all
      select -0.0 / IEEE_DIVIDE(-1, 0.0) union all
      select cast("-0.0" as DOUBLE) union all
      select cast("+0.0" as DOUBLE) union all
      select cast(-1.0 as double) union all
      select -cast(NULL as double) union all
      select IEEE_DIVIDE(1, 0) union all
      select POW(0.1, IEEE_DIVIDE(-1, 0)) union all
      select POW(1.1, IEEE_DIVIDE(1, 0)) union all
      select POW(IEEE_DIVIDE(-1, 0), 2) union all
      select POW(IEEE_DIVIDE(1, 0), 2) union all
      select LOG(IEEE_DIVIDE(1, 0), 1.1) union all
      select CAST("Inf" as DOUBLE) union all
      select cast(1.0 as double) union all
      select -cast(NULL as double) union all
      select IEEE_DIVIDE(-1, 0) union all
      select POW(IEEE_DIVIDE(-1, 0), 3) union all
      select LOG(IEEE_DIVIDE(1, 0), 0.1) union all
      select CAST("-Inf" as DOUBLE) union all
      select TAN(IEEE_DIVIDE(1, 0)) union all
      select TAN(IEEE_DIVIDE(-1, 0)) union all
      select cast(-1.0 as double) union all
      select cast(NULL as double) union all
      select TAN(TAN(IEEE_DIVIDE(1, 0))) union all
      select IEEE_DIVIDE(0, 0) union all
      select LOG(IEEE_DIVIDE(-1, 0), 1) union all
      select LOG(1, IEEE_DIVIDE(1, 0)) union all
      select cast("NAN" as DOUBLE) union all
      select cast("-NAN" as DOUBLE) union all
      select -cast("NAN" as DOUBLE)) val
GROUP BY DOUBLE ORDER BY DOUBLE DESC
--
WITH FEATURES: <none>
ARRAY<STRUCT<DOUBLE DOUBLE>>[{inf}, {1}, {0}, {-1}, {-inf}, {nan}, {NULL}]
--
WITH FEATURES: DISALLOW_GROUP_BY_FLOAT
ERROR: generic::invalid_argument: Grouping by expressions of type DOUBLE is not allowed [at 48:10]
GROUP BY DOUBLE ORDER BY DOUBLE DESC
         ^
==

# -------------------
# Grouping of floats.
# -------------------
[name=groupby_zeroes_float]
[test_features1=DISALLOW_GROUP_BY_FLOAT]
SELECT FLOAT
from (select cast(-0.0 as float) FLOAT union all
      select cast(+0.0 as float) union all
      select cast(SQRT(0.0) as float) union all
      select cast(SQRT(-0.0) as float) union all
      select cast((0.0 / 1) as float) union all
      select cast((0.0 / -1) as float) union all
      select cast((-0.0 / 1) as float) union all
      select cast((-0.0 / -1) as float) union all
      select cast(((-0.0) * (-0.0)) as float) union all
      select cast(((-0.0) + (-0.0)) as float) union all
      select cast(((0.0) - (-0.0)) as float) union all
      select cast((1.0 - 1.0) as float) union all
      select cast((0.0 / IEEE_DIVIDE(-1, 0.0)) as float) union all
      select cast((-0.0 / IEEE_DIVIDE(-1, 0.0)) as float) union all
      select cast((0.0 / IEEE_DIVIDE(1, 0.0)) as float) union all
      select cast((-0.0 / IEEE_DIVIDE(-1, 0.0)) as float) union all
      select cast("-0.0" as float) union all
      select cast("+0.0" as float)) val
GROUP BY FLOAT
--
WITH FEATURES: <none>
ARRAY<STRUCT<FLOAT FLOAT>>[{0}]
--
WITH FEATURES: DISALLOW_GROUP_BY_FLOAT
ERROR: generic::invalid_argument: Grouping by expressions of type FLOAT is not allowed [at 20:10]
GROUP BY FLOAT
         ^
==

[name=groupby_positive_infinities_float]
[test_features1=DISALLOW_GROUP_BY_FLOAT]
SELECT FLOAT
from (select cast(IEEE_DIVIDE(1, 0) as float) FLOAT union all
      select cast(POW(0.1, IEEE_DIVIDE(-1, 0)) as float) union all
      select cast(POW(1.1, IEEE_DIVIDE(1, 0)) as float) union all
      select cast(POW(IEEE_DIVIDE(-1, 0), 2) as float) union all
      select cast(POW(IEEE_DIVIDE(1, 0), 2) as float) union all
      select cast(LOG(IEEE_DIVIDE(1, 0), 1.1) as float) union all
      select CAST("Inf" as float)) val
GROUP BY FLOAT
--
WITH FEATURES: <none>
ARRAY<STRUCT<FLOAT FLOAT>>[{inf}]
--
WITH FEATURES: DISALLOW_GROUP_BY_FLOAT
ERROR: generic::invalid_argument: Grouping by expressions of type FLOAT is not allowed [at 9:10]
GROUP BY FLOAT
         ^
==

[name=groupby_negative_infinities_float]
[test_features1=DISALLOW_GROUP_BY_FLOAT]
SELECT FLOAT
from (select cast(IEEE_DIVIDE(-1, 0) as float) FLOAT union all
      select cast(POW(IEEE_DIVIDE(-1, 0), 3) as float) union all
      select cast(LOG(IEEE_DIVIDE(1, 0), 0.1) as float) union all
      select CAST("-Inf" as float)) val
GROUP BY FLOAT
--
WITH FEATURES: <none>
ARRAY<STRUCT<FLOAT FLOAT>>[{-inf}]
--
WITH FEATURES: DISALLOW_GROUP_BY_FLOAT
ERROR: generic::invalid_argument: Grouping by expressions of type FLOAT is not allowed [at 6:10]
GROUP BY FLOAT
         ^
==

[name=groupby_nan_float]
[test_features1=DISALLOW_GROUP_BY_FLOAT]
SELECT NAN
from (select cast(TAN(IEEE_DIVIDE(1, 0)) as float) NAN union all
      select cast(TAN(IEEE_DIVIDE(-1, 0)) as float) union all
      select cast(TAN(TAN(IEEE_DIVIDE(1, 0))) as float) union all
      select cast(IEEE_DIVIDE(0, 0) as float) union all
      select cast(LOG(IEEE_DIVIDE(-1, 0), 1) as float) union all
      select cast(LOG(1, IEEE_DIVIDE(1, 0)) as float) union all
      select cast("NAN" as float) union all
      select cast("-NAN" as float) union all
      select -cast("NAN" as float)) val
GROUP BY NAN
--
WITH FEATURES: <none>
ARRAY<STRUCT<NAN FLOAT>>[{nan}]
--
WITH FEATURES: DISALLOW_GROUP_BY_FLOAT
ERROR: generic::invalid_argument: Grouping by expressions of type FLOAT is not allowed [at 11:10]
GROUP BY NAN
         ^
==

[name=groupby_floats]
[test_features1=DISALLOW_GROUP_BY_FLOAT]
SELECT FLOAT
from (select cast(-0.0 as float) FLOAT union all
      select cast(+0.0 as float) union all
      select cast(SQRT(0.0) as float) union all
      select cast(SQRT(-0.0) as float) union all
      select cast((0.0 / 1) as float) union all
      select cast((0.0 / -1) as float) union all
      select cast((-0.0 / 1) as float) union all
      select cast(1.0 as float) union all
      select cast(NULL as float) union all
      select cast((-0.0 / -1) as float) union all
      select cast(((-0.0) * (-0.0)) as float) union all
      select cast(((-0.0) + (-0.0)) as float) union all
      select cast(((0.0) - (-0.0)) as float) union all
      select cast((1.0 - 1.0) as float) union all
      select cast((0.0 / IEEE_DIVIDE(-1, 0.0)) as float) union all
      select cast((-0.0 / IEEE_DIVIDE(-1, 0.0)) as float) union all
      select cast(-1.0 as float) union all
      select -cast(NULL as float) union all
      select cast((0.0 / IEEE_DIVIDE(1, 0.0)) as float) union all
      select cast((-0.0 / IEEE_DIVIDE(-1, 0.0)) as float) union all
      select cast("-0.0" as float) union all
      select cast("+0.0" as float) union all
      select cast(IEEE_DIVIDE(1, 0) as float) union all
      select cast(POW(0.1, IEEE_DIVIDE(-1, 0)) as float) union all
      select cast(POW(1.1, IEEE_DIVIDE(1, 0)) as float) union all
      select cast(POW(IEEE_DIVIDE(-1, 0), 2) as float) union all
      select cast(POW(IEEE_DIVIDE(1, 0), 2) as float) union all
      select cast(LOG(IEEE_DIVIDE(1, 0), 1.1) as float) union all
      select cast(1.0 as float) union all
      select -cast(NULL as float) union all
      select CAST("Inf" as float) union all
      select cast(IEEE_DIVIDE(-1, 0) as float) union all
      select cast(POW(IEEE_DIVIDE(-1, 0), 3) as float) union all
      select cast(LOG(IEEE_DIVIDE(1, 0), 0.1) as float) union all
      select CAST("-Inf" as float) union all
      select cast(TAN(IEEE_DIVIDE(1, 0)) as float) union all
      select cast(TAN(IEEE_DIVIDE(-1, 0)) as float) union all
      select cast(TAN(TAN(IEEE_DIVIDE(1, 0))) as float) union all
      select cast(-1.0 as float) union all
      select cast(NULL as float) union all
      select cast(IEEE_DIVIDE(0, 0) as float) union all
      select cast(LOG(IEEE_DIVIDE(-1, 0), 1) as float) union all
      select cast(LOG(1, IEEE_DIVIDE(1, 0)) as float) union all
      select cast("NAN" as float) union all
      select cast("-NAN" as float) union all
      select -cast("NAN" as float)) val
GROUP BY FLOAT
--
WITH FEATURES: <none>
ARRAY<STRUCT<FLOAT FLOAT>>[{NULL}, {nan}, {-inf}, {-1}, {0}, {1}, {inf}]
--
WITH FEATURES: DISALLOW_GROUP_BY_FLOAT
ERROR: generic::invalid_argument: Grouping by expressions of type FLOAT is not allowed [at 48:10]
GROUP BY FLOAT
         ^
==

[name=groupby_orderby_desc_floats]
[test_features1=DISALLOW_GROUP_BY_FLOAT]
SELECT FLOAT
from (select cast(-0.0 as float) FLOAT union all
      select cast(+0.0 as float) union all
      select cast(SQRT(0.0) as float) union all
      select cast(SQRT(-0.0) as float) union all
      select cast((0.0 / 1) as float) union all
      select cast((0.0 / -1) as float) union all
      select cast((-0.0 / 1) as float) union all
      select cast(1.0 as float) union all
      select cast(NULL as float) union all
      select cast((-0.0 / -1) as float) union all
      select cast(((-0.0) * (-0.0)) as float) union all
      select cast(((-0.0) + (-0.0)) as float) union all
      select cast(((0.0) - (-0.0)) as float) union all
      select cast((1.0 - 1.0) as float) union all
      select cast((0.0 / IEEE_DIVIDE(-1, 0.0)) as float) union all
      select cast((-0.0 / IEEE_DIVIDE(-1, 0.0)) as float) union all
      select cast(-1.0 as float) union all
      select -cast(NULL as float) union all
      select cast((0.0 / IEEE_DIVIDE(1, 0.0)) as float) union all
      select cast((-0.0 / IEEE_DIVIDE(-1, 0.0)) as float) union all
      select cast("-0.0" as float) union all
      select cast("+0.0" as float) union all
      select cast(IEEE_DIVIDE(1, 0) as float) union all
      select cast(POW(0.1, IEEE_DIVIDE(-1, 0)) as float) union all
      select cast(POW(1.1, IEEE_DIVIDE(1, 0)) as float) union all
      select cast(POW(IEEE_DIVIDE(-1, 0), 2) as float) union all
      select cast(POW(IEEE_DIVIDE(1, 0), 2) as float) union all
      select cast(LOG(IEEE_DIVIDE(1, 0), 1.1) as float) union all
      select cast(1.0 as float) union all
      select -cast(NULL as float) union all
      select CAST("Inf" as float) union all
      select cast(IEEE_DIVIDE(-1, 0) as float) union all
      select cast(POW(IEEE_DIVIDE(-1, 0), 3) as float) union all
      select cast(LOG(IEEE_DIVIDE(1, 0), 0.1) as float) union all
      select CAST("-Inf" as float) union all
      select cast(TAN(IEEE_DIVIDE(1, 0)) as float) union all
      select cast(TAN(IEEE_DIVIDE(-1, 0)) as float) union all
      select cast(TAN(TAN(IEEE_DIVIDE(1, 0))) as float) union all
      select cast(-1.0 as float) union all
      select cast(NULL as float) union all
      select cast(IEEE_DIVIDE(0, 0) as float) union all
      select cast(LOG(IEEE_DIVIDE(-1, 0), 1) as float) union all
      select cast(LOG(1, IEEE_DIVIDE(1, 0)) as float) union all
      select cast("NAN" as float) union all
      select cast("-NAN" as float) union all
      select -cast("NAN" as float)) val
GROUP BY FLOAT ORDER BY FLOAT DESC
--
WITH FEATURES: <none>
ARRAY<STRUCT<FLOAT FLOAT>>[{inf}, {1}, {0}, {-1}, {-inf}, {nan}, {NULL}]
--
WITH FEATURES: DISALLOW_GROUP_BY_FLOAT
ERROR: generic::invalid_argument: Grouping by expressions of type FLOAT is not allowed [at 48:10]
GROUP BY FLOAT ORDER BY FLOAT DESC
         ^
==
# @nan_01 and @nan02 are both nans with different bitwise representation.
[name=group_by_nan_different_bitwise_representation]
[parameters=CAST(b"\x08\x00\x10\x00\x49\x01\x00\x00\x00\x00\x00\xf0\x7f" as zetasql_test__.KitchenSinkPB).double_val as nan_01, CAST(b"\x08\x00\x10\x00\x49\x02\x00\x00\x00\x00\x00\xf0\x7f" as zetasql_test__.KitchenSinkPB).double_val as nan_02]
SELECT * FROM UNNEST([@nan_01, @nan_02]) AS A GROUP BY A;
--
ARRAY<STRUCT<A DOUBLE>>[{nan}]
==
#
# Single base table column
#
[name=groupby_single_base_column_bool]
SELECT bool_val, count(*) as cnt FROM AllTypesTable t
GROUP BY bool_val
ORDER BY bool_val ASC
--
ARRAY<STRUCT<bool_val BOOL, cnt INT64>>[{NULL, 6}, {false, 16}, {true, 12}]
==
[name=groupby_single_base_column_int32]
SELECT int32_val, count(*) as cnt FROM AllTypesTable t
GROUP BY int32_val
ORDER BY int32_val ASC
--
ARRAY<STRUCT<int32_val INT32, cnt INT64>>[
  {NULL, 6},
  {-24, 2},
  {-4, 2},
  {-3, 2},
  {-2, 4},
  {-1, 8},
  {1, 2},
  {2, 2},
  {5, 2},
  {9, 2},
  {13, 2}
]
==
[name=groupby_single_base_column_int64]
SELECT int64_val, count(*) as cnt FROM AllTypesTable t
GROUP BY int64_val
ORDER BY int64_val ASC
--
ARRAY<STRUCT<int64_val INT64, cnt INT64>>[
  {NULL, 6},
  {-14, 2},
  {-4, 2},
  {-3, 2},
  {-2, 4},
  {-1, 8},
  {1, 2},
  {3, 2},
  {9, 2},
  {16, 2},
  {23, 2}
]
==
[name=groupby_single_base_column_uint32]
SELECT uint32_val, count(*) as cnt FROM AllTypesTable t
GROUP BY uint32_val
ORDER BY uint32_val ASC
--
ARRAY<STRUCT<uint32_val UINT32, cnt INT64>>[
  {NULL, 6},
  {1, 8},
  {2, 4},
  {3, 2},
  {4, 4},
  {5, 2},
  {11, 4},
  {31, 2},
  {41, 2}
]
==
[name=groupby_single_base_column_uint64]
SELECT uint64_val, count(*) as cnt FROM AllTypesTable t
GROUP BY uint64_val
ORDER BY uint64_val ASC
--
ARRAY<STRUCT<uint64_val UINT64, cnt INT64>>[
  {NULL, 6},
  {1, 8},
  {2, 4},
  {3, 2},
  {4, 2},
  {8, 4},
  {9, 2},
  {11, 2},
  {32, 2},
  {54, 2}
]
==
[name=groupby_single_base_column_float]
[test_features1=DISALLOW_GROUP_BY_FLOAT]
SELECT float_val, count(*) as cnt FROM AllTypesTable t
GROUP BY float_val
ORDER BY float_val ASC
--
WITH FEATURES: <none>
ARRAY<STRUCT<float_val FLOAT, cnt INT64>>[
  {NULL, 4},
  {nan, 2},
  {-inf, 2},
  {-0.5, 2},
  {-0.375, 2},
  {-0.25, 2},
  {-0.125, 2},
  {-0, 4},
  {0.125, 2},
  {0.25, 2},
  {0.375, 2},
  {0.5, 2},
  {0.625, 2},
  {0.75, 2},
  {inf, 2}
]
--
WITH FEATURES: DISALLOW_GROUP_BY_FLOAT
ERROR: generic::invalid_argument: Grouping by expressions of type FLOAT is not allowed [at 2:10]
GROUP BY float_val
         ^
==
[name=groupby_single_base_column_double]
[test_features1=DISALLOW_GROUP_BY_FLOAT]
SELECT double_val, count(*) as cnt FROM AllTypesTable t
GROUP BY double_val
ORDER BY double_val ASC
--
WITH FEATURES: <none>
ARRAY<STRUCT<double_val DOUBLE, cnt INT64>>[
  {NULL, 4},
  {nan, 2},
  {-inf, 2},
  {-0.75, 2},
  {-0.5, 2},
  {-0.375, 2},
  {-0.25, 2},
  {-0.125, 2},
  {0, 4},
  {0.125, 2},
  {0.25, 2},
  {0.375, 2},
  {0.5, 2},
  {0.625, 2},
  {inf, 2}
]
--
WITH FEATURES: DISALLOW_GROUP_BY_FLOAT
ERROR: generic::invalid_argument: Grouping by expressions of type DOUBLE is not allowed [at 2:10]
GROUP BY double_val
         ^
==
[name=groupby_single_base_column_str]
SELECT str_val, count(*) as cnt FROM AllTypesTable t
GROUP BY str_val
ORDER BY str_val ASC
--
ARRAY<STRUCT<str_val STRING, cnt INT64>>[
  {NULL, 6},
  {"1", 8},
  {"123", 2},
  {"2", 4},
  {"222", 2},
  {"24", 2},
  {"3", 2},
  {"345", 2},
  {"4", 2},
  {"432", 2},
  {"6", 2}
]
==
[name=groupby_single_base_column_bytes]
SELECT bytes_val, count(*) as cnt FROM AllTypesTable t
GROUP BY bytes_val
ORDER BY bytes_val ASC
--
ARRAY<STRUCT<bytes_val BYTES, cnt INT64>>[
  {NULL, 6},
  {b"1", 8},
  {b"123", 2},
  {b"2", 4},
  {b"22", 2},
  {b"234", 2},
  {b"3", 2},
  {b"345", 2},
  {b"4", 2},
  {b"433", 2},
  {b"7", 2}
]
==
[name=groupby_single_base_column_date]
SELECT date_val, count(*) as cnt FROM AllTypesTable t
GROUP BY date_val
ORDER BY date_val ASC
--
ARRAY<STRUCT<date_val DATE, cnt INT64>>[
  {NULL, 6},
  {2014-01-01, 6},
  {2014-01-02, 4},
  {2014-01-03, 2},
  {2014-01-04, 2},
  {2014-01-06, 2},
  {2014-01-08, 2},
  {2014-02-01, 2},
  {2014-02-02, 2},
  {2014-02-04, 4},
  {2014-05-02, 2}
]
==
[name=groupby_single_base_column_timestamp]
SELECT timestamp_val, count(*) as cnt FROM AllTypesTable t
GROUP BY timestamp_val
ORDER BY timestamp_val ASC
--
ARRAY<STRUCT<
        timestamp_val TIMESTAMP,
        cnt INT64
      >>
[{NULL, 6},
 {
   2014-01-01 00:00:01.011011+00,
   6
 },
 {
   2014-01-02 00:00:01.011011+00,
   2
 },
 {
   2014-01-02 00:00:02.022022+00,
   4
 },
 {
   2014-01-03 00:00:03.033033+00,
   2
 },
 {
   2014-01-04 00:00:03.033033+00,
   2
 },
 {
   2014-01-04 00:00:04.044044+00,
   2
 },
 {
   2014-01-05 00:00:02.022022+00,
   2
 },
 {
   2014-02-04 00:00:04.044044+00,
   4
 },
 {
   2014-04-01 00:00:01.011011+00,
   2
 },
 {
   2014-05-02 00:00:02.022022+00,
   2
 }]
==
[required_features=NUMERIC_TYPE]
[name=groupby_single_base_column_numeric]
SELECT numeric_val, count(*) as cnt FROM AllTypesNumericTable t
GROUP BY numeric_val
ORDER BY numeric_val ASC
--
ARRAY<STRUCT<numeric_val NUMERIC, cnt INT64>>[
  {NULL, 6},
  {
    -99999999999999999999999999999.999999999,
    1
  },
  {-5.43, 1},
  {-1, 2},
  {-0.999999999, 2},
  {0.4, 1},
  {0.999999999, 1},
  {1, 6},
  {2, 1},
  {3, 1},
  {3.14, 1},
  {4, 2},
  {5.55, 1},
  {6.999999999, 1},
  {7, 2},
  {7.000000001, 1},
  {42, 1},
  {51, 1},
  {999.999, 1},
  {
    99999999999999999999999999999.999999999,
    1
  }
]
==
[required_features=BIGNUMERIC_TYPE]
[name=groupby_single_base_column_bignumeric]
SELECT bignumeric_val, count(*) as cnt FROM AllTypesBigNumericTable t
GROUP BY bignumeric_val
ORDER BY bignumeric_val ASC
--
ARRAY<STRUCT<
        bignumeric_val BIGNUMERIC,
        cnt INT64
      >>
[
  {NULL, 6},
  {
    -578960446186580977117854925043439539266.34992332820282019728792003956564819968,
    1
  },
  {-5.43, 1},
  {-1, 2},
  {
    -0.99999999999999999999999999999999999999,
    2
  },
  {0.4, 1},
  {
    0.99999999999999999999999999999999999999,
    1
  },
  {1, 6},
  {2, 1},
  {3, 1},
  {3.14, 1},
  {4, 2},
  {
    4.99999999999999999999999999999999999999,
    1
  },
  {
    5.00000000000000000000000000000000000001,
    1
  },
  {5.55, 1},
  {7, 2},
  {55, 1},
  {66, 1},
  {
    123456789012345678901234567890123456789.12345678901234567890123456789012345678,
    1
  },
  {
    578960446186580977117854925043439539266.34992332820282019728792003956564819967,
    1
  }
]
==
#
# Single computed column
#
[name=groupby_single_computed_column_bool]
SELECT (NOT bool_val) as c1, count(*) as cnt FROM AllTypesTable t
GROUP BY c1
ORDER BY c1 ASC
--
ARRAY<STRUCT<c1 BOOL, cnt INT64>>[{NULL, 6}, {false, 12}, {true, 16}]
==
[name=groupby_single_computed_column_int32]
SELECT int32_val + 1 as c1, count(*) as cnt FROM AllTypesTable t
GROUP BY c1
ORDER BY c1 ASC
--
ARRAY<STRUCT<c1 INT64, cnt INT64>>[
  {NULL, 6},
  {-23, 2},
  {-3, 2},
  {-2, 2},
  {-1, 4},
  {0, 8},
  {2, 2},
  {3, 2},
  {6, 2},
  {10, 2},
  {14, 2}
]
==
[name=groupby_single_computed_column_int64]
SELECT int64_val * 2 as c1, count(*) as cnt FROM AllTypesTable t
GROUP BY c1
ORDER BY c1 ASC
--
ARRAY<STRUCT<c1 INT64, cnt INT64>>[
  {NULL, 6},
  {-28, 2},
  {-8, 2},
  {-6, 2},
  {-4, 4},
  {-2, 8},
  {2, 2},
  {6, 2},
  {18, 2},
  {32, 2},
  {46, 2}
]
==
[name=groupby_single_computed_column_uint32]
SELECT uint32_val + 7 as c1, count(*) as cnt FROM AllTypesTable t
GROUP BY c1
ORDER BY c1 ASC
--
ARRAY<STRUCT<c1 UINT64, cnt INT64>>[
  {NULL, 6},
  {8, 8},
  {9, 4},
  {10, 2},
  {11, 4},
  {12, 2},
  {18, 4},
  {38, 2},
  {48, 2}
]
==
[name=groupby_single_computed_column_uint64]
SELECT uint64_val * 3 as c1, count(*) as cnt FROM AllTypesTable t
GROUP BY c1
ORDER BY c1 ASC
--
ARRAY<STRUCT<c1 UINT64, cnt INT64>>[
  {NULL, 6},
  {3, 8},
  {6, 4},
  {9, 2},
  {12, 2},
  {24, 4},
  {27, 2},
  {33, 2},
  {96, 2},
  {162, 2}
]
==
[name=groupby_single_computed_column_float]
[test_features1=DISALLOW_GROUP_BY_FLOAT]
SELECT float_val + 0.125 as c1, count(*) as cnt FROM AllTypesTable t
GROUP BY c1
ORDER BY c1 ASC
--
WITH FEATURES: <none>
ARRAY<STRUCT<c1 DOUBLE, cnt INT64>>[
  {NULL, 4},
  {nan, 2},
  {-inf, 2},
  {-0.375, 2},
  {-0.25, 2},
  {-0.125, 2},
  {0, 2},
  {0.125, 4},
  {0.25, 2},
  {0.375, 2},
  {0.5, 2},
  {0.625, 2},
  {0.75, 2},
  {0.875, 2},
  {inf, 2}
]
--
WITH FEATURES: DISALLOW_GROUP_BY_FLOAT
ERROR: generic::invalid_argument: Grouping by expressions of type DOUBLE is not allowed [at 2:10]
GROUP BY c1
         ^
==
[name=groupby_single_computed_column_double]
[test_features1=DISALLOW_GROUP_BY_FLOAT]
SELECT double_val * 2 as c1, count(*) as cnt FROM AllTypesTable t
GROUP BY c1
ORDER BY c1 ASC
--
WITH FEATURES: <none>
ARRAY<STRUCT<c1 DOUBLE, cnt INT64>>[
  {NULL, 4},
  {nan, 2},
  {-inf, 2},
  {-1.5, 2},
  {-1, 2},
  {-0.75, 2},
  {-0.5, 2},
  {-0.25, 2},
  {0, 4},
  {0.25, 2},
  {0.5, 2},
  {0.75, 2},
  {1, 2},
  {1.25, 2},
  {inf, 2}
]
--
WITH FEATURES: DISALLOW_GROUP_BY_FLOAT
ERROR: generic::invalid_argument: Grouping by expressions of type DOUBLE is not allowed [at 2:10]
GROUP BY c1
         ^
==
[name=groupby_single_computed_column_str]
SELECT LTRIM(str_val) as c1, count(*) as cnt FROM AllTypesTable t
GROUP BY c1
ORDER BY c1 ASC
--
ARRAY<STRUCT<c1 STRING, cnt INT64>>[
  {NULL, 6},
  {"1", 8},
  {"123", 2},
  {"2", 4},
  {"222", 2},
  {"24", 2},
  {"3", 2},
  {"345", 2},
  {"4", 2},
  {"432", 2},
  {"6", 2}
]
==
[name=groupby_single_computed_column_bytes]
SELECT UPPER(bytes_val) as c1, count(*) as cnt FROM AllTypesTable t
GROUP BY c1
ORDER BY c1 ASC
--
ARRAY<STRUCT<c1 BYTES, cnt INT64>>[
  {NULL, 6},
  {b"1", 8},
  {b"123", 2},
  {b"2", 4},
  {b"22", 2},
  {b"234", 2},
  {b"3", 2},
  {b"345", 2},
  {b"4", 2},
  {b"433", 2},
  {b"7", 2}
]
==
[required_features=NUMERIC_TYPE]
[name=groupby_single_computed_column_numeric]
SELECT numeric_val / 2 as c1, count(*) as cnt FROM AllTypesNumericTable t
GROUP BY c1
ORDER BY c1 ASC
--
ARRAY<STRUCT<c1 NUMERIC, cnt INT64>>[
  {NULL, 6},
  {
    -50000000000000000000000000000,
    1
  },
  {-2.715, 1},
  {-0.5, 4},
  {0.2, 1},
  {0.5, 7},
  {1, 1},
  {1.5, 1},
  {1.57, 1},
  {2, 2},
  {2.775, 1},
  {3.5, 3},
  {3.500000001, 1},
  {21, 1},
  {25.5, 1},
  {499.9995, 1},
  {
    50000000000000000000000000000,
    1
  }
]
==
[required_features=BIGNUMERIC_TYPE]
[name=groupby_single_computed_column_bignumeric]
SELECT bignumeric_val / 2 as c1, count(*) as cnt FROM AllTypesBigNumericTable t
GROUP BY c1
ORDER BY c1 ASC
--
ARRAY<STRUCT<c1 BIGNUMERIC, cnt INT64>>[
  {NULL, 6},
  {
    -289480223093290488558927462521719769633.17496166410141009864396001978282409984,
    1
  },
  {-2.715, 1},
  {-0.5, 4},
  {0.2, 1},
  {0.5, 7},
  {1, 1},
  {1.5, 1},
  {1.57, 1},
  {2, 2},
  {2.5, 1},
  {
    2.50000000000000000000000000000000000001,
    1
  },
  {2.775, 1},
  {3.5, 2},
  {27.5, 1},
  {33, 1},
  {
    61728394506172839450617283945061728394.56172839450617283945061728394506172839,
    1
  },
  {
    289480223093290488558927462521719769633.17496166410141009864396001978282409984,
    1
  }
]
==
#
# Multiple columns, with first as base table column
#
[name=groupby_multi_base_column_bool]
SELECT bool_val, int32_val, count(*) as cnt FROM AllTypesTable t
GROUP BY bool_val, int32_val
ORDER BY bool_val ASC, int32_val DESC
--
ARRAY<STRUCT<bool_val BOOL, int32_val INT32, cnt INT64>>[
  {NULL, -1, 2},
  {NULL, NULL, 4},
  {false, 9, 2},
  {false, 5, 2},
  {false, 2, 2},
  {false, -2, 4},
  {false, -4, 2},
  {false, -24, 2},
  {false, NULL, 2},
  {true, 13, 2},
  {true, 1, 2},
  {true, -1, 6},
  {true, -3, 2}
]
==
[name=groupby_multi_base_column_int32]
SELECT int32_val, -int64_val as c2, count(*) as cnt FROM AllTypesTable t
GROUP BY int32_val, c2
ORDER BY int32_val ASC, c2 ASC
--
ARRAY<STRUCT<int32_val INT32, c2 INT64, cnt INT64>>[
  {NULL, NULL, 4},
  {NULL, 1, 2},
  {-24, 14, 2},
  {-4, 4, 2},
  {-3, 3, 2},
  {-2, 2, 4},
  {-1, NULL, 2},
  {-1, 1, 6},
  {1, -1, 2},
  {2, -16, 2},
  {5, -3, 2},
  {9, -9, 2},
  {13, -23, 2}
]
==
[name=groupby_multi_base_column_int64]
SELECT int64_val, uint32_val + 2 as c2, count(*) as cnt FROM AllTypesTable t
GROUP BY int64_val, c2
ORDER BY int64_val ASC, c2 DESC
--
ARRAY<STRUCT<int64_val INT64, c2 UINT64, cnt INT64>>[
  {NULL, 3, 2},
  {NULL, NULL, 4},
  {-14, 43, 2},
  {-4, 6, 2},
  {-3, 5, 2},
  {-2, 4, 4},
  {-1, 3, 6},
  {-1, NULL, 2},
  {1, 13, 2},
  {3, 13, 2},
  {9, 6, 2},
  {16, 7, 2},
  {23, 33, 2}
]
==
[name=groupby_multi_base_column_uint32]
SELECT uint32_val, uint64_val * 2 as c2, count(*) as cnt FROM AllTypesTable t
GROUP BY uint32_val, c2
ORDER BY uint32_val ASC, c2 ASC
--
ARRAY<STRUCT<uint32_val UINT32, c2 UINT64, cnt INT64>>[
  {NULL, NULL, 4},
  {NULL, 2, 2},
  {1, NULL, 2},
  {1, 2, 6},
  {2, 4, 4},
  {3, 6, 2},
  {4, 8, 2},
  {4, 16, 2},
  {5, 18, 2},
  {11, 16, 2},
  {11, 22, 2},
  {31, 64, 2},
  {41, 108, 2}
]
==
[name=groupby_multi_base_column_uint64]
SELECT uint64_val, int32_val, count(*) as cnt FROM AllTypesTable t
GROUP BY uint64_val, int32_val
ORDER BY uint64_val ASC, int32_val DESC
--
ARRAY<STRUCT<uint64_val UINT64, int32_val INT32, cnt INT64>>[
  {NULL, -1, 2},
  {NULL, NULL, 4},
  {1, -1, 6},
  {1, NULL, 2},
  {2, -2, 4},
  {3, -3, 2},
  {4, -4, 2},
  {8, 9, 2},
  {8, 5, 2},
  {9, 2, 2},
  {11, 1, 2},
  {32, 13, 2},
  {54, -24, 2}
]
==
[name=groupby_multi_base_column_float]
[test_features1=DISALLOW_GROUP_BY_FLOAT]
SELECT float_val, double_val, count(*) as cnt FROM AllTypesTable t
GROUP BY float_val, double_val
ORDER BY float_val ASC, double_val ASC
--
WITH FEATURES: <none>
ARRAY<STRUCT<float_val FLOAT, double_val DOUBLE, cnt INT64>>[
  {NULL, NULL, 2},
  {NULL, -0, 2},
  {nan, inf, 2},
  {-inf, 0.25, 2},
  {-0.5, -0.5, 2},
  {-0.375, -0.375, 2},
  {-0.25, -0.75, 2},
  {-0.125, -0.125, 2},
  {0, NULL, 2},
  {-0, nan, 2},
  {0.125, 0.125, 2},
  {0.25, 0, 2},
  {0.375, 0.375, 2},
  {0.5, 0.5, 2},
  {0.625, 0.625, 2},
  {0.75, -0.25, 2},
  {inf, -inf, 2}
]
--
WITH FEATURES: DISALLOW_GROUP_BY_FLOAT
ERROR: generic::invalid_argument: Grouping by expressions of type FLOAT is not allowed [at 2:10]
GROUP BY float_val, double_val
         ^
==
[name=groupby_multi_base_column_double]
[test_features1=DISALLOW_GROUP_BY_FLOAT]
SELECT double_val, str_val, count(*) as cnt FROM AllTypesTable t
GROUP BY double_val, str_val
ORDER BY double_val ASC, str_val DESC
--
WITH FEATURES: <none>
ARRAY<STRUCT<double_val DOUBLE, str_val STRING, cnt INT64>>[
  {NULL, "1", 2},
  {NULL, NULL, 2},
  {nan, NULL, 2},
  {-inf, "1", 2},
  {-0.75, "222", 2},
  {-0.5, "432", 2},
  {-0.375, "345", 2},
  {-0.25, "24", 2},
  {-0.125, "123", 2},
  {0, "2", 2},
  {-0, NULL, 2},
  {0.125, "1", 2},
  {0.25, "2", 2},
  {0.375, "3", 2},
  {0.5, "4", 2},
  {0.625, "6", 2},
  {inf, "1", 2}
]
--
WITH FEATURES: DISALLOW_GROUP_BY_FLOAT
ERROR: generic::invalid_argument: Grouping by expressions of type DOUBLE is not allowed [at 2:10]
GROUP BY double_val, str_val
         ^
==
[required_features=NUMERIC_TYPE]
[name=groupby_multi_base_column_numeric]
SELECT numeric_val, str_val, count(*) as cnt FROM AllTypesNumericTable t
GROUP BY numeric_val, str_val
ORDER BY numeric_val ASC, str_val DESC
--
ARRAY<STRUCT<numeric_val NUMERIC, str_val STRING, cnt INT64>>[
  {NULL, NULL, 6},
  {
    -99999999999999999999999999999.999999999,
    "1",
    1
  },
  {-5.43, "2", 1},
  {-1, "1", 2},
  {-0.999999999, "3", 1},
  {-0.999999999, "2", 1},
  {0.4, "4", 1},
  {0.999999999, "2", 1},
  {1, "6", 2},
  {1, "1", 4},
  {2, "24", 1},
  {3, "123", 1},
  {3.14, "3", 1},
  {4, "4", 1},
  {4, "222", 1},
  {5.55, "2", 1},
  {6.999999999, "345", 1},
  {7, "24", 1},
  {7, "123", 1},
  {7.000000001, "222", 1},
  {42, "432", 1},
  {51, "345", 1},
  {999.999, "432", 1},
  {
    99999999999999999999999999999.999999999,
    "1",
    1
  }
]
==
[required_features=BIGNUMERIC_TYPE]
[name=groupby_multi_base_column_bignumeric]
SELECT bignumeric_val, str_val, count(*) as cnt FROM AllTypesBigNumericTable t
GROUP BY bignumeric_val, str_val
ORDER BY bignumeric_val ASC, str_val DESC
--
ARRAY<STRUCT<
        bignumeric_val BIGNUMERIC,
        str_val STRING,
        cnt INT64
      >>
[
  {NULL, NULL, 6},
  {
    -578960446186580977117854925043439539266.34992332820282019728792003956564819968,
    "1",
    1
  },
  {-5.43, "2", 1},
  {-1, "1", 2},
  {
    -0.99999999999999999999999999999999999999,
    "3",
    1
  },
  {
    -0.99999999999999999999999999999999999999,
    "2",
    1
  },
  {0.4, "4", 1},
  {
    0.99999999999999999999999999999999999999,
    "2",
    1
  },
  {1, "6", 2},
  {1, "1", 4},
  {2, "123", 1},
  {3, "24", 1},
  {3.14, "3", 1},
  {4, "4", 1},
  {4, "222", 1},
  {
    4.99999999999999999999999999999999999999,
    "345",
    1
  },
  {
    5.00000000000000000000000000000000000001,
    "222",
    1
  },
  {5.55, "2", 1},
  {7, "24", 1},
  {7, "123", 1},
  {55, "345", 1},
  {66, "432", 1},
  {
    123456789012345678901234567890123456789.12345678901234567890123456789012345678,
    "432",
    1
  },
  {
    578960446186580977117854925043439539266.34992332820282019728792003956564819967,
    "1",
    1
  }
]
==

[name=groupby_struct_distinct]
[required_features=V_1_2_GROUP_BY_STRUCT]
SELECT distinct t
FROM (
  SELECT AS STRUCT int32_val i32, int64_val i64
  FROM AllTypesTable) t
ORDER BY t.i32, t.i64
--
ARRAY<STRUCT<t STRUCT<i32 INT32, i64 INT64>>>[
  {{NULL, NULL}},
  {{NULL, -1}},
  {{-24, -14}},
  {{-4, -4}},
  {{-3, -3}},
  {{-2, -2}},
  {{-1, NULL}},
  {{-1, -1}},
  {{1, 1}},
  {{2, 16}},
  {{5, 3}},
  {{9, 9}},
  {{13, 23}}
]
==

[name=groupby_struct_agg_struct]
[required_features=V_1_2_GROUP_BY_STRUCT]
SELECT t.i32, count(t), sum(t.i64)
FROM (
  SELECT AS STRUCT int32_val i32, int64_val i64
  FROM AllTypesTable) t
GROUP BY t
ORDER BY t.i32
--
ARRAY<STRUCT<i32 INT32, INT64, INT64>>[
  {NULL, 4, NULL},
  {NULL, 2, -2},
  {-24, 2, -28},
  {-4, 2, -8},
  {-3, 2, -6},
  {-2, 4, -8},
  {-1, 6, -6},
  {-1, 2, NULL},
  {1, 2, 2},
  {2, 2, 32},
  {5, 2, 6},
  {9, 2, 18},
  {13, 2, 46}
]
==

[name=groupby_struct_agg]
[required_features=V_1_2_GROUP_BY_STRUCT]
SELECT t.i32, sum(t.i64)
FROM (
  SELECT AS STRUCT int32_val i32, int64_val i64
  FROM AllTypesTable) t
GROUP BY t
ORDER BY t.i32
--
ARRAY<STRUCT<i32 INT32, INT64>>[
  {NULL, NULL},
  {NULL, -2},
  {-24, -28},
  {-4, -8},
  {-3, -6},
  {-2, -8},
  {-1, -6},
  {-1, NULL},
  {1, 2},
  {2, 32},
  {5, 6},
  {9, 18},
  {13, 46}
]

==

[name=groupby_array_agg]
[required_features=V_1_2_GROUP_BY_ARRAY]
SELECT s.a, COUNT(*)
FROM ((SELECT NULL as a) UNION ALL
      (SELECT NULL) UNION ALL
      (SELECT [1]) UNION ALL
      (SELECT [2]) UNION ALL
      (SELECT [1, NULL]) UNION ALL
      (SELECT [2, NULL]) UNION ALL
      (SELECT [1]) UNION ALL
      (SELECT [2, NULL]) UNION ALL
      (SELECT ARRAY<INT64>[]) UNION ALL
      (SELECT ARRAY<INT64>[]) UNION ALL
      (SELECT [1, 2])) s
GROUP BY s.a
--
ARRAY<STRUCT<a ARRAY<>, INT64>>[
  {ARRAY<INT64>(NULL), 2},
  {ARRAY<INT64>[], 2},
  {ARRAY<INT64>[1], 2},
  {
    ARRAY<INT64>[1, NULL],
    1
  },
  {ARRAY<INT64>[1, 2], 1},
  {ARRAY<INT64>[2], 1},
  {
    ARRAY<INT64>[2, NULL],
    2
  }
]
==

[name=groupby_array_agg_no_nulls_in_arrays]
[required_features=V_1_2_GROUP_BY_ARRAY]
SELECT s.a, COUNT(*)
FROM ((SELECT NULL as a) UNION ALL
      (SELECT NULL) UNION ALL
      (SELECT [1]) UNION ALL
      (SELECT [2]) UNION ALL
      (SELECT [1]) UNION ALL
      (SELECT ARRAY<INT64>[]) UNION ALL
      (SELECT ARRAY<INT64>[]) UNION ALL
      (SELECT [1, 2]) UNION ALL
      (SELECT [1, 2])) s
GROUP BY s.a
--
ARRAY<STRUCT<a ARRAY<>, INT64>>[
  {ARRAY<INT64>(NULL), 2},
  {ARRAY<INT64>[], 2},
  {ARRAY<INT64>[1], 2},
  {ARRAY<INT64>[1, 2], 2},
  {ARRAY<INT64>[2], 1}
]
==

[name=groupby_array_struct]
[test_features1=V_1_2_GROUP_BY_ARRAY,V_1_2_GROUP_BY_STRUCT]
[test_features2=V_1_2_GROUP_BY_ARRAY]
SELECT [(CAST(FLOOR(primary_key / 4) AS INT64), bool_val),
        (MOD(int64_val, 2), NOT(bool_val))] AS a,
       COUNT(*)
FROM TableLarge
GROUP BY a
--
WITH FEATURES: V_1_2_GROUP_BY_STRUCT,V_1_2_GROUP_BY_ARRAY
ARRAY<STRUCT<a ARRAY<>, INT64>>[
  {
    ARRAY<STRUCT<INT64, BOOL>>[{0, NULL}, {NULL, NULL}],
    1
  },
  {
    ARRAY<STRUCT<INT64, BOOL>>[{0, false}, {NULL, true}],
    1
  },
  {
    ARRAY<STRUCT<INT64, BOOL>>[{0, true}, {NULL, false}],
    1
  },
  {
    ARRAY<STRUCT<INT64, BOOL>>[{1, false}, {0, true}],
    2
  },
  {
    ARRAY<STRUCT<INT64, BOOL>>[{1, true}, {1, false}],
    2
  },
  {
    ARRAY<STRUCT<INT64, BOOL>>[{2, false}, {0, true}],
    2
  },
  {
    ARRAY<STRUCT<INT64, BOOL>>[{2, true}, {1, false}],
    2
  }
]
--
WITH FEATURES: V_1_2_GROUP_BY_ARRAY
ERROR: generic::invalid_argument: Grouping by expressions of type ARRAY containing STRUCT is not allowed [at 5:10]
GROUP BY a
         ^
--
WITH FEATURES: <none>
ERROR: generic::invalid_argument: Grouping by expressions of type ARRAY is not allowed [at 5:10]
GROUP BY a
         ^
==

[name=groupby_array_struct_no_nulls_in_arrays]
[test_features1=V_1_2_GROUP_BY_ARRAY,V_1_2_GROUP_BY_STRUCT]
[test_features2=V_1_2_GROUP_BY_ARRAY]
SELECT [(CAST(FLOOR(primary_key / 4) AS INT64), IFNULL(bool_val, false)),
        (IFNULL(MOD(int64_val, 2), -1), IFNULL(NOT(bool_val), false))] AS a,
       COUNT(*)
FROM TableLarge
GROUP BY a
--
WITH FEATURES: V_1_2_GROUP_BY_STRUCT,V_1_2_GROUP_BY_ARRAY
ARRAY<STRUCT<a ARRAY<>, INT64>>[
  {
    ARRAY<STRUCT<INT64, BOOL>>[{0, false}, {-1, false}],
    1
  },
  {
    ARRAY<STRUCT<INT64, BOOL>>[{0, false}, {-1, true}],
    1
  },
  {
    ARRAY<STRUCT<INT64, BOOL>>[{0, true}, {-1, false}],
    1
  },
  {
    ARRAY<STRUCT<INT64, BOOL>>[{1, false}, {0, true}],
    2
  },
  {
    ARRAY<STRUCT<INT64, BOOL>>[{1, true}, {1, false}],
    2
  },
  {
    ARRAY<STRUCT<INT64, BOOL>>[{2, false}, {0, true}],
    2
  },
  {
    ARRAY<STRUCT<INT64, BOOL>>[{2, true}, {1, false}],
    2
  }
]
--
WITH FEATURES: V_1_2_GROUP_BY_ARRAY
ERROR: generic::invalid_argument: Grouping by expressions of type ARRAY containing STRUCT is not allowed [at 5:10]
GROUP BY a
         ^
--
WITH FEATURES: <none>
ERROR: generic::invalid_argument: Grouping by expressions of type ARRAY is not allowed [at 5:10]
GROUP BY a
         ^
==

[name=groupby_struct_array]
[test_features1=V_1_2_GROUP_BY_STRUCT,V_1_2_GROUP_BY_ARRAY]
[test_features2=V_1_2_GROUP_BY_STRUCT]
SELECT ([CAST(FLOOR(primary_key / 4) AS INT64), MOD(int64_val, 2)],
        bool_val) s,
       COUNT(*)
FROM TableLarge
GROUP BY s
--
WITH FEATURES: V_1_2_GROUP_BY_STRUCT,V_1_2_GROUP_BY_ARRAY
ARRAY<STRUCT<
        s STRUCT<ARRAY<>, BOOL>,
        INT64
      >>
[{{
    ARRAY<INT64>[0, NULL],
    NULL
  },
  1},
 {{
    ARRAY<INT64>[0, NULL],
    false
  },
  1},
 {{
    ARRAY<INT64>[0, NULL],
    true
  },
  1},
 {
   {ARRAY<INT64>[1, 0], false},
   2
 },
 {
   {ARRAY<INT64>[1, 1], true},
   2
 },
 {
   {ARRAY<INT64>[2, 0], false},
   2
 },
 {
   {ARRAY<INT64>[2, 1], true},
   2
 }]
--
WITH FEATURES: V_1_2_GROUP_BY_STRUCT
ERROR: generic::invalid_argument: Grouping by expressions of type STRUCT containing ARRAY is not allowed [at 5:10]
GROUP BY s
         ^
--
WITH FEATURES: <none>
ERROR: generic::invalid_argument: Grouping by expressions of type STRUCT is not allowed [at 5:10]
GROUP BY s
         ^
==

[name=groupby_struct_array_no_nulls_in_arrays]
[test_features1=V_1_2_GROUP_BY_STRUCT,V_1_2_GROUP_BY_ARRAY]
[test_features2=V_1_2_GROUP_BY_STRUCT]
SELECT ([CAST(FLOOR(primary_key / 4) AS INT64), MOD(int64_val, 2)],
        bool_val) s,
       COUNT(*)
FROM TableLarge
WHERE int64_val IS NOT NULL
GROUP BY s
--
WITH FEATURES: V_1_2_GROUP_BY_STRUCT,V_1_2_GROUP_BY_ARRAY
ARRAY<STRUCT<
        s STRUCT<ARRAY<>, BOOL>,
        INT64
      >>
[{
   {ARRAY<INT64>[1, 0], false},
   2
 },
 {
   {ARRAY<INT64>[1, 1], true},
   2
 },
 {
   {ARRAY<INT64>[2, 0], false},
   2
 },
 {
   {ARRAY<INT64>[2, 1], true},
   2
 }]
--
WITH FEATURES: V_1_2_GROUP_BY_STRUCT
ERROR: generic::invalid_argument: Grouping by expressions of type STRUCT containing ARRAY is not allowed [at 6:10]
GROUP BY s
         ^
--
WITH FEATURES: <none>
ERROR: generic::invalid_argument: Grouping by expressions of type STRUCT is not allowed [at 6:10]
GROUP BY s
         ^
