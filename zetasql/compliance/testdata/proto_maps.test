[load_proto_files=zetasql/testdata/test_schema.proto]
[load_proto_names=zetasql_test__.KitchenSinkPB, zetasql_test__.MessageWithMapField, zetasql_test__.MessageWithMapField.StringInt32MapEntry]
[default required_features=V_1_3_PROTO_MAPS]
[prepare_database]

CREATE TABLE Table0 AS
SELECT 0 key, NEW zetasql_test__.MessageWithMapField(
  [NEW zetasql_test__.MessageWithMapField.StringInt32MapEntry("foo" AS key, 123 AS value),
   NEW zetasql_test__.MessageWithMapField.StringInt32MapEntry("bar" AS key, 456 AS value)] AS string_int32_map
) value
--
ARRAY<STRUCT<
        key INT64,
        value PROTO<zetasql_test__.MessageWithMapField>
      >>
[{0,
  {
    string_int32_map {
      key: "bar"
      value: 456
    }
    string_int32_map {
      key: "foo"
      value: 123
    }
  }}]
==

[default required_features=]
[name=map_entry]
SELECT NEW zetasql_test__.MessageWithMapField(
  [NEW zetasql_test__.MessageWithMapField.StringInt32MapEntry("foo" AS key, 123 AS value)] AS string_int32_map
) as pb
--
ARRAY<STRUCT<pb PROTO<zetasql_test__.MessageWithMapField>>>[
  {{
     string_int32_map {
       key: "foo"
       value: 123
     }
   }}
]
==

[default required_features=V_1_3_PROTO_MAPS]
[name=map_entry_key_null]
SELECT NEW zetasql_test__.MessageWithMapField(
  [NEW zetasql_test__.MessageWithMapField.StringInt32MapEntry(CAST(NULL AS STRING) AS key, 123 AS value)] AS string_int32_map
) as pb
--
ERROR: generic::out_of_range: Cannot write NULL to key or value of map field in StringInt32MapEntry
==

[name=map_entry_value_null]
SELECT NEW zetasql_test__.MessageWithMapField(
  [NEW zetasql_test__.MessageWithMapField.StringInt32MapEntry("foo" AS key, CAST(NULL AS INT32) AS value)] AS string_int32_map
) as pb
--
ERROR: generic::out_of_range: Cannot write NULL to key or value of map field in StringInt32MapEntry
==

[name=lookup]
SELECT value.string_int32_map[KEY("foo")] FROM Table0;
--
ARRAY<STRUCT<INT32>>[{123}]
==

[name=lookup_safe]
SELECT value.string_int32_map[SAFE_KEY("bar")] FROM Table0;
--
ARRAY<STRUCT<INT32>>[{456}]
==

[name=map_lookup_with_conflicting_values_for_key_takes_last_matching_value]
(SELECT [NEW zetasql_test__.MessageWithMapField.StringInt32MapEntry("foo" AS key, 123 AS value),
         NEW zetasql_test__.MessageWithMapField.StringInt32MapEntry("bar" AS key, 456 AS value),
         NEW zetasql_test__.MessageWithMapField.StringInt32MapEntry("foo" AS key, 789 AS value)][KEY("foo")])
--
ARRAY<STRUCT<INT32>>[{789}]
==

[name=lookup_in_null]
SELECT CAST(NULL AS ARRAY<zetasql_test__.MessageWithMapField.StringInt32MapEntry>)[KEY("foo")];
--
ARRAY<STRUCT<INT32>>[{NULL}]
==

[name=lookup_with_null_key]
SELECT value.string_int32_map[KEY(NULL)] FROM Table0;
--
ARRAY<STRUCT<INT32>>[{NULL}]
==

[name=lookup_with_missing_key]
SELECT value.string_int32_map[KEY("not present in map")] FROM Table0;
--
ERROR: generic::out_of_range: Key not found in map: "not present in map"
==

[name=lookup_with_missing_key_safe]
SELECT value.string_int32_map[SAFE_KEY("not present in map")] FROM Table0;
--
ARRAY<STRUCT<INT32>>[{NULL}]
==

[name=lookup_depending_on_other_map_key]
WITH Input AS (
    SELECT [NEW zetasql_test__.MessageWithMapField.StringStringMapEntry("foo" AS key, "bar" AS value),
            NEW zetasql_test__.MessageWithMapField.StringStringMapEntry("bar" AS key, "success" AS value)] AS map)
SELECT i.map[KEY(i.map[KEY("foo")])] FROM Input i;
--
ARRAY<STRUCT<STRING>>[{"success"}]
==

[name=modify_map]
SELECT MODIFY_MAP(value.string_int32_map, "foo", 789) FROM Table0;
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<PROTO<zetasql_test__.MessageWithMapField.StringInt32MapEntry>>[
     {
       key: "bar"
       value: 456
     },
     {
       key: "foo"
       value: 789
     }
   ]}
]
==

[name=modify_map_null_map]
SELECT MODIFY_MAP(CAST(NULL AS ARRAY<zetasql_test__.MessageWithMapField.StringInt32MapEntry>), "foo", 789) FROM Table0;
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<PROTO<zetasql_test__.MessageWithMapField.StringInt32MapEntry>>(NULL)}
]
==

[name=modify_map_empty_map]
SELECT MODIFY_MAP(CAST([] AS ARRAY<zetasql_test__.MessageWithMapField.StringInt32MapEntry>), "foo", 789) FROM Table0;
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<PROTO<zetasql_test__.MessageWithMapField.StringInt32MapEntry>>[
     {
       key: "foo"
       value: 789
     }
   ]}
]
==

[name=modify_map_multiple_keys]
SELECT MODIFY_MAP(value.string_int32_map, "foo", 789, "quux", 1337) FROM Table0;
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<PROTO<zetasql_test__.MessageWithMapField.StringInt32MapEntry>>[
     {
       key: "bar"
       value: 456
     },
     {
       key: "foo"
       value: 789
     },
     {
       key: "quux"
       value: 1337
     }
   ]}
]
==

[name=modify_map_using_expression]
SELECT MODIFY_MAP(value.string_int32_map, "foo", CAST(value.string_int32_map[KEY("bar")] + 1 AS INT32)) FROM Table0;
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<PROTO<zetasql_test__.MessageWithMapField.StringInt32MapEntry>>[
     {
       key: "bar"
       value: 456
     },
     {
       key: "foo"
       value: 457
     }
   ]}
]
==

[name=modify_map_duplicate_keys]
SELECT MODIFY_MAP(value.string_int32_map, "foo", 789, "foo", 10) FROM Table0;
--
ERROR: generic::out_of_range: MODIFY_MAP: Only one instance of each key is allowed. Found multiple instances of key: "foo"
==

[name=modify_map_new_key]
SELECT MODIFY_MAP(value.string_int32_map, "baz", 789) FROM Table0;
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<PROTO<zetasql_test__.MessageWithMapField.StringInt32MapEntry>>[
     {
       key: "foo"
       value: 123
     },
     {
       key: "bar"
       value: 456
     },
     {
       key: "baz"
       value: 789
     }
   ]}
]
==

[name=modify_map_delete_key]
SELECT MODIFY_MAP(value.string_int32_map, "bar", NULL) FROM Table0;
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<PROTO<zetasql_test__.MessageWithMapField.StringInt32MapEntry>>[
     {
       key: "foo"
       value: 123
     }
   ]}
]
==

[name=modify_map_delete_nonexistent_key]
SELECT MODIFY_MAP(value.string_int32_map, "quux", NULL) FROM Table0;
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<PROTO<zetasql_test__.MessageWithMapField.StringInt32MapEntry>>[
     {
       key: "foo"
       value: 123
     },
     {
       key: "bar"
       value: 456
     }
   ]}
]
==

[name=modify_map_null_key]
SELECT MODIFY_MAP(value.string_int32_map, NULL, 789) FROM Table0;
--
ERROR: generic::out_of_range: MODIFY_MAP: All key arguments must be non-NULL, but found NULL at argument 1
==

[name=contains_key]
SELECT CONTAINS_KEY(value.string_int32_map, "foo") has_foo,
       CONTAINS_KEY(value.string_int32_map, "bar") has_bar,
       CONTAINS_KEY(value.string_int32_map, CONCAT("ba", "r")) has_concat_making_bar,
       CONTAINS_KEY(value.string_int32_map, "baz") has_baz,
       CONTAINS_KEY(value.string_int32_map, NULL) has_null,
       CONTAINS_KEY(CAST(NULL AS ARRAY<zetasql_test__.MessageWithMapField.StringInt32MapEntry>), "foo") null_has_foo
FROM Table0;
--
ARRAY<STRUCT<
        has_foo BOOL,
        has_bar BOOL,
        has_concat_making_bar BOOL,
        has_baz BOOL,
        has_null BOOL,
        null_has_foo BOOL
      >>[{true, true, true, false, false, NULL}]
==

[name=modify_map_and_braced_constructors]
[required_features=V_1_3_PROTO_MAPS,V_1_3_BRACED_PROTO_CONSTRUCTORS]
SELECT AS VALUE NEW zetasql_test__.MessageWithMapField {
  string_int32_map: MODIFY_MAP(input.string_int32_map, "to_be_replaced", 5)
}
FROM (
  SELECT AS VALUE NEW zetasql_test__.MessageWithMapField {
    string_int32_map: [
      NEW zetasql_test__.MessageWithMapField.StringInt32MapEntry{
        key: "key"
        value: 123
      },
      NEW zetasql_test__.MessageWithMapField.StringInt32MapEntry{
        key: "to_be_replaced"
        value: 4
      }
    ]
  }
) AS input;
--
ARRAY<PROTO<zetasql_test__.MessageWithMapField>>[
  {
    string_int32_map {
      key: "key"
      value: 123
    }
    string_int32_map {
      key: "to_be_replaced"
      value: 5
    }
  }
]
