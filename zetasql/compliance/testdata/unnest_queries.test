# Straight UNNEST without correlation.
[name=unnest_1]
SELECT x FROM UNNEST([3, 5]) x;
--
ARRAY<STRUCT<x INT64>>[{3}, {5}]
==
[name=unnest_2]
SELECT x FROM UNNEST([3, NULL]) x;
--
ARRAY<STRUCT<x INT64>>[{3}, {NULL}]
==
# Straight UNNEST with offset.
[name=unnest_3]
SELECT x, p
FROM UNNEST([3, NULL]) x WITH OFFSET p;
--
ARRAY<STRUCT<x INT64, p INT64>>[{3, 0}, {NULL, 1}]
==
# Cross apply UNNEST.
[name=unnest_4]
SELECT x
FROM (SELECT [3, 5] arr) t
JOIN UNNEST(t.arr) x
--
ARRAY<STRUCT<x INT64>>[{5}, {3}]
==
# Cross apply UNNEST with offset.
[name=unnest_5]
SELECT x, p
FROM (SELECT [3, 5] arr) t
JOIN UNNEST(t.arr) x WITH OFFSET p
--
ARRAY<STRUCT<x INT64, p INT64>>[{5, 1}, {3, 0}]
==
# Outer apply UNNEST.
[name=unnest_6]
SELECT b, x
FROM UNNEST(
       [STRUCT(true AS b, [3, 5] AS arr), STRUCT(false AS b, [7, 9] AS arr)]) t
LEFT JOIN UNNEST(t.arr) x ON b
--
ARRAY<STRUCT<b BOOL, x INT64>>[{true, 5}, {false, NULL}, {true, 3}]
==
# Outer apply UNNEST with offset.
[name=unnest_7]
SELECT b, x, p
FROM UNNEST(
       [STRUCT(true AS b, [3, 5] AS arr), STRUCT(false AS b, [7, 9] AS arr)]) t
LEFT JOIN UNNEST(t.arr) x WITH OFFSET p ON b
--
ARRAY<STRUCT<b BOOL, x INT64, p INT64>>[
  {true, 5, 1},
  {false, NULL, NULL},
  {true, 3, 0}
]
==
# Cross apply UNNEST with correlation.
[name=unnest_8]
SELECT x, s
FROM (SELECT x FROM UNNEST([3, 5]) x) r,
     UNNEST(ARRAY(SELECT AS STRUCT r.x - 1 AS y, r.x + 1 AS z)) s
--
ARRAY<STRUCT<
        x INT64,
        s STRUCT<y INT64, z INT64>
      >>
[{5, {4, 6}}, {3, {2, 4}}]
==
# Outer apply UNNEST with correlation.
[name=unnest_9]
SELECT x, s
FROM (SELECT x FROM UNNEST([3, 5]) x) r
LEFT JOIN UNNEST(ARRAY(SELECT AS STRUCT r.x - 1 AS y, r.x + 1 AS z
                       FROM (SELECT 0)
                       WHERE r.x = 5)) s
--
ARRAY<STRUCT<
        x INT64,
        s STRUCT<y INT64, z INT64>
      >>
[{5, {4, 6}}, {3, NULL}]
==
# Full join is not allowed with UNNEST.
[name=unnest_10]
SELECT * FROM (SELECT 1) r FULL JOIN UNNEST(ARRAY(SELECT 2)) s
--
ERROR: generic::invalid_argument: Array scan is not allowed with FULL JOIN: UNNEST expression [at 1:38]
SELECT * FROM (SELECT 1) r FULL JOIN UNNEST(ARRAY(SELECT 2)) s
                                     ^
==
[name=unnest_null_array]
SELECT e FROM UNNEST(CAST(NULL AS ARRAY<INT64>)) e
--
ARRAY<STRUCT<e INT64>>[]
==
[name=unnest_null_array_via_cross_apply]
SELECT e FROM (SELECT CAST(NULL AS ARRAY<INT64>) arr) t, t.arr e
--
ARRAY<STRUCT<e INT64>>[]
==
[name=unnest_null_array_of_structs]
SELECT e FROM UNNEST(CAST(NULL AS ARRAY<STRUCT<INT64>>)) e
--
ARRAY<STRUCT<e STRUCT<INT64>>>[]
==
[name=unnest_bool]
SELECT x FROM UNNEST([true, false]) x;
--
ARRAY<STRUCT<x BOOL>>[{true}, {false}]
==
[name=unnest_bytes]
SELECT x FROM UNNEST([b'Hello', b'World!']) x;
--
ARRAY<STRUCT<x BYTES>>[{b"Hello"}, {b"World!"}]
==

[required_features=NUMERIC_TYPE]
[name=unnest_numeric]
SELECT x FROM UNNEST([CAST(3.14159 AS NUMERIC), 1.2345]) x;
--
ARRAY<STRUCT<x NUMERIC>>[{3.14159}, {1.2345}]
==
[name=unnest_date]
SELECT x FROM UNNEST([DATE '2000-01-02', '2000-10-20']) x;
--
ARRAY<STRUCT<x DATE>>[{2000-01-02}, {2000-10-20}]
==
[name=unnest_timestamp]
SELECT x FROM UNNEST([TIMESTAMP '2000-01-02 10:20:30', '2000-01-02 01:02:03']) x;
--
ARRAY<STRUCT<x TIMESTAMP>>[
  {2000-01-02 18:20:30+00},
  {2000-01-02 09:02:03+00}
]
==

[required_features=V_1_2_CIVIL_TIME]
[name=unnest_time]
SELECT x FROM UNNEST([TIME '10:20:30', '01:02:03']) x;
--
ARRAY<STRUCT<x TIME>>[{10:20:30}, {01:02:03}]
==

[required_features=V_1_2_CIVIL_TIME]
[name=unnest_datetime]
SELECT x FROM UNNEST([DATETIME '2000-01-02 10:20:30', '2000-01-02 01:02:03']) x;
--
ARRAY<STRUCT<x DATETIME>>[
  {2000-01-02 10:20:30},
  {2000-01-02 01:02:03}
]
==

[required_features=GEOGRAPHY]
[name=unnest_geography]
SELECT x FROM UNNEST([ST_GEOGPOINT(1,2), ST_GEOGPOINT(-1,-2)]) x;
--
ARRAY<STRUCT<x GEOGRAPHY>>[{POINT(1 2)}, {POINT(-1 -2)}]
