[prepare_database]
CREATE TABLE TestTable AS
SELECT cast(1 as int64) as row_id,
       cast(null as bool) as bool_val,
       cast(null as int64) as int64_val,
       cast(null as uint64) as uint64_val,
       cast(null as double) as double_val UNION ALL
  SELECT 2,  true,  2,    3,    1.5  UNION ALL
  SELECT 3,  false, 1,    6,    1.5  UNION ALL
  SELECT 4,  true,  null, 2,    2.5  UNION ALL
  SELECT 5,  false, 1,    null, 3.5  UNION ALL
  SELECT 6,  true,  2,    2,    null UNION ALL
  SELECT 7,  false, 1,    5,    -0.5 UNION ALL
  SELECT 8,  true,  4,    2,    -1.5 UNION ALL
  SELECT 9,  false, 2,    3,    1.5  UNION ALL
  SELECT 10, true,  3,    1,    2.5
--
ARRAY<STRUCT<row_id INT64,
             bool_val BOOL,
             int64_val INT64,
             uint64_val UINT64,
             double_val DOUBLE>>
[
  {1, NULL, NULL, NULL, NULL},
  {2, true, 2, 3, 1.5},
  {3, false, 1, 6, 1.5},
  {4, true, NULL, 2, 2.5},
  {5, false, 1, NULL, 3.5},
  {6, true, 2, 2, NULL},
  {7, false, 1, 5, -0.5},
  {8, true, 4, 2, -1.5},
  {9, false, 2, 3, 1.5},
  {10, true, 3, 1, 2.5}
]
==
[prepare_database]
CREATE TABLE TestTable2 AS
SELECT cast(1 as int64) as row_id,
       cast(null as bool) as bool_val,
       cast(null as int64) as int64_val,
       cast(null as uint64) as uint64_val,
       cast(null as double) as double_val UNION ALL
  SELECT 2,  true,  2,    3,    1.5  UNION ALL
  SELECT 3,  false, 1,    6,    1.5  UNION ALL
  SELECT 4,  true,  null, 2,    3.5  UNION ALL
  SELECT 5,  false, 1,    null, cast("NaN" as double)  UNION ALL
  SELECT 6,  true,  2,    2,    null UNION ALL
  SELECT 7,  false, 1,    5,    -0.5 UNION ALL
  SELECT 8,  true,  4,    2,    cast("-inf" as double) UNION ALL
  SELECT 9,  false, 2,    3,    cast("inf" as double)  UNION ALL
  SELECT 10, true,  3,    1,    2.5
--
ARRAY<STRUCT<row_id INT64,
             bool_val BOOL,
             int64_val INT64,
             uint64_val UINT64,
             double_val DOUBLE>>
[
  {1, NULL, NULL, NULL, NULL},
  {2, true, 2, 3, 1.5},
  {3, false, 1, 6, 1.5},
  {4, true, NULL, 2, 3.5},
  {5, false, 1, NULL, nan},
  {6, true, 2, 2, NULL},
  {7, false, 1, 5, -0.5},
  {8, true, 4, 2, -inf},
  {9, false, 2, 3, inf},
  {10, true, 3, 1, 2.5}
]
==

# TestTable3 removes the rows of duplicate double_val of TestTable2
[prepare_database]
CREATE TABLE TestTable3 AS
SELECT cast(1 as int64) as row_id,
       cast(null as bool) as bool_val,
       cast(null as int64) as int64_val,
       cast(null as uint64) as uint64_val,
       cast(null as double) as double_val UNION ALL
  SELECT 2,  true,  2,    3,    1.5  UNION ALL
  SELECT 4,  true,  null, 2,    3.5  UNION ALL
  SELECT 5,  false, 1,    null, cast("NaN" as double)  UNION ALL
  SELECT 7,  false, 1,    5,    -0.5 UNION ALL
  SELECT 8,  true,  4,    2,    cast("-inf" as double) UNION ALL
  SELECT 9,  false, 2,    3,    cast("inf" as double)  UNION ALL
  SELECT 10, true,  3,    1,    2.5
--
ARRAY<STRUCT<row_id INT64,
             bool_val BOOL,
             int64_val INT64,
             uint64_val UINT64,
             double_val DOUBLE>>
[
  {1, NULL, NULL, NULL, NULL},
  {2, true, 2, 3, 1.5},
  {4, true, NULL, 2, 3.5},
  {5, false, 1, NULL, nan},
  {7, false, 1, 5, -0.5},
  {8, true, 4, 2, -inf},
  {9, false, 2, 3, inf},
  {10, true, 3, 1, 2.5}
]
==

[default required_features=ANALYTIC_FUNCTIONS]
[name=analytic_sum_unbounded_1]
[labels=analytic_sum_with_unbounded_window]
SELECT bool_val, int64_val, uint64_val, double_val,
       SUM(int64_val) OVER (PARTITION BY bool_val),
       SUM(int64_val) OVER (),
       SUM(uint64_val) OVER (PARTITION BY bool_val),
       SUM(uint64_val) OVER (),
       SUM(double_val) OVER (PARTITION BY bool_val),
       SUM(double_val) OVER ()
FROM TestTable
ORDER BY 1, 2, 3, 4
--
ARRAY<STRUCT<bool_val BOOL,
             int64_val INT64,
             uint64_val UINT64,
             double_val DOUBLE,
             INT64,
             INT64,
             UINT64,
             UINT64,
             DOUBLE,
             DOUBLE>>
[
  {NULL, NULL, NULL, NULL, NULL, 16, NULL, 24, NULL, 11},
  {false, 1, NULL, 3.5, 5, 16, 14, 24, 6, 11},
  {false, 1, 5, -0.5, 5, 16, 14, 24, 6, 11},
  {false, 1, 6, 1.5, 5, 16, 14, 24, 6, 11},
  {false, 2, 3, 1.5, 5, 16, 14, 24, 6, 11},
  {true, NULL, 2, 2.5, 11, 16, 10, 24, 5, 11},
  {true, 2, 2, NULL, 11, 16, 10, 24, 5, 11},
  {true, 2, 3, 1.5, 11, 16, 10, 24, 5, 11},
  {true, 3, 1, 2.5, 11, 16, 10, 24, 5, 11},
  {true, 4, 2, -1.5, 11, 16, 10, 24, 5, 11}
]
==

# Same as previous, using an equivalent window frame syntax.
[name=analytic_sum_unbounded_2]
[labels=analytic_sum_with_unbounded_window]
SELECT bool_val, int64_val, uint64_val, double_val,
       SUM(int64_val) OVER (PARTITION BY bool_val order by row_id
                            ROWS BETWEEN UNBOUNDED PRECEDING
                                     AND UNBOUNDED FOLLOWING),
       SUM(int64_val) OVER (),
       SUM(uint64_val) OVER (PARTITION BY bool_val order by row_id
                             ROWS BETWEEN UNBOUNDED PRECEDING
                                      AND UNBOUNDED FOLLOWING),
       SUM(uint64_val) OVER (),
       SUM(double_val) OVER (PARTITION BY bool_val order by row_id
                             ROWS BETWEEN UNBOUNDED PRECEDING
                                      AND UNBOUNDED FOLLOWING),
       SUM(double_val) OVER ()
FROM TestTable
ORDER BY 1, 2, 3, 4
--
ARRAY<STRUCT<bool_val BOOL,
             int64_val INT64,
             uint64_val UINT64,
             double_val DOUBLE,
             INT64,
             INT64,
             UINT64,
             UINT64,
             DOUBLE,
             DOUBLE>>
[
  {NULL, NULL, NULL, NULL, NULL, 16, NULL, 24, NULL, 11},
  {false, 1, NULL, 3.5, 5, 16, 14, 24, 6, 11},
  {false, 1, 5, -0.5, 5, 16, 14, 24, 6, 11},
  {false, 1, 6, 1.5, 5, 16, 14, 24, 6, 11},
  {false, 2, 3, 1.5, 5, 16, 14, 24, 6, 11},
  {true, NULL, 2, 2.5, 11, 16, 10, 24, 5, 11},
  {true, 2, 2, NULL, 11, 16, 10, 24, 5, 11},
  {true, 2, 3, 1.5, 11, 16, 10, 24, 5, 11},
  {true, 3, 1, 2.5, 11, 16, 10, 24, 5, 11},
  {true, 4, 2, -1.5, 11, 16, 10, 24, 5, 11}
]
==

# Same as previous, using an equivalent window frame syntax.
[name=analytic_sum_unbounded_3]
[labels=analytic_sum_with_unbounded_window]
SELECT bool_val, int64_val, uint64_val, double_val,
       SUM(int64_val) OVER (PARTITION BY bool_val order by row_id
                            RANGE BETWEEN UNBOUNDED PRECEDING
                                      AND UNBOUNDED FOLLOWING),
       SUM(int64_val) OVER (),
       SUM(uint64_val) OVER (PARTITION BY bool_val order by row_id
                             RANGE BETWEEN UNBOUNDED PRECEDING
                                       AND UNBOUNDED FOLLOWING),
       SUM(uint64_val) OVER (),
       SUM(double_val) OVER (PARTITION BY bool_val order by row_id
                             RANGE BETWEEN UNBOUNDED PRECEDING
                                       AND UNBOUNDED FOLLOWING),
       SUM(double_val) OVER ()
FROM TestTable
ORDER BY 1, 2, 3, 4
--
ARRAY<STRUCT<bool_val BOOL,
             int64_val INT64,
             uint64_val UINT64,
             double_val DOUBLE,
             INT64,
             INT64,
             UINT64,
             UINT64,
             DOUBLE,
             DOUBLE>>
[
  {NULL, NULL, NULL, NULL, NULL, 16, NULL, 24, NULL, 11},
  {false, 1, NULL, 3.5, 5, 16, 14, 24, 6, 11},
  {false, 1, 5, -0.5, 5, 16, 14, 24, 6, 11},
  {false, 1, 6, 1.5, 5, 16, 14, 24, 6, 11},
  {false, 2, 3, 1.5, 5, 16, 14, 24, 6, 11},
  {true, NULL, 2, 2.5, 11, 16, 10, 24, 5, 11},
  {true, 2, 2, NULL, 11, 16, 10, 24, 5, 11},
  {true, 2, 3, 1.5, 11, 16, 10, 24, 5, 11},
  {true, 3, 1, 2.5, 11, 16, 10, 24, 5, 11},
  {true, 4, 2, -1.5, 11, 16, 10, 24, 5, 11}
]
==

# Test 4-byte numeric types.  The result has 8-byte types, and
# this result should be the same as the previous.
[name=analytic_sum_unbounded_4]
[labels=analytic_sum_with_unbounded_window]
SELECT bool_val, int32_val, uint32_val, float_val,
       SUM(int32_val) OVER (PARTITION BY bool_val order by row_id
                            RANGE BETWEEN UNBOUNDED PRECEDING
                                      AND UNBOUNDED FOLLOWING),
       SUM(int32_val) OVER (),
       SUM(uint32_val) OVER (PARTITION BY bool_val order by row_id
                             RANGE BETWEEN UNBOUNDED PRECEDING
                                       AND UNBOUNDED FOLLOWING),
       SUM(uint32_val) OVER (),
       SUM(float_val) OVER (PARTITION BY bool_val order by row_id
                             RANGE BETWEEN UNBOUNDED PRECEDING
                                       AND UNBOUNDED FOLLOWING),
       SUM(float_val) OVER ()
FROM (select row_id,
             bool_val,
             cast(int64_val as INT32) as int32_val,
             cast(uint64_val as UINT32) as uint32_val,
             cast(double_val as FLOAT) as float_val
      from TestTable)
ORDER BY 1, 2, 3, 4
--
ARRAY<STRUCT<bool_val BOOL,
             int32_val INT32,
             uint32_val UINT32,
             float_val FLOAT,
             INT64,
             INT64,
             UINT64,
             UINT64,
             DOUBLE,
             DOUBLE>>
[
  {NULL, NULL, NULL, NULL, NULL, 16, NULL, 24, NULL, 11},
  {false, 1, NULL, 3.5, 5, 16, 14, 24, 6, 11},
  {false, 1, 5, -0.5, 5, 16, 14, 24, 6, 11},
  {false, 1, 6, 1.5, 5, 16, 14, 24, 6, 11},
  {false, 2, 3, 1.5, 5, 16, 14, 24, 6, 11},
  {true, NULL, 2, 2.5, 11, 16, 10, 24, 5, 11},
  {true, 2, 2, NULL, 11, 16, 10, 24, 5, 11},
  {true, 2, 3, 1.5, 11, 16, 10, 24, 5, 11},
  {true, 3, 1, 2.5, 11, 16, 10, 24, 5, 11},
  {true, 4, 2, -1.5, 11, 16, 10, 24, 5, 11}
]
==

# Test NUMERIC type. The result should be the same as the previous.
[name=analytic_sum_unbounded_numeric]
[required_features=ANALYTIC_FUNCTIONS,NUMERIC_TYPE]
[labels=analytic_sum_with_unbounded_window]
SELECT bool_val, numeric_val1, numeric_val2, numeric_val3,
       SUM(numeric_val1) OVER (PARTITION BY bool_val order by row_id
                               RANGE BETWEEN UNBOUNDED PRECEDING
                                     AND UNBOUNDED FOLLOWING),
       SUM(numeric_val1) OVER (),
       SUM(numeric_val2) OVER (PARTITION BY bool_val order by row_id
                               RANGE BETWEEN UNBOUNDED PRECEDING
                                     AND UNBOUNDED FOLLOWING),
       SUM(numeric_val2) OVER (),
       SUM(numeric_val3) OVER (PARTITION BY bool_val order by row_id
                               RANGE BETWEEN UNBOUNDED PRECEDING
                                     AND UNBOUNDED FOLLOWING),
       SUM(numeric_val3) OVER ()
FROM (select row_id,
             bool_val,
             cast(int64_val as NUMERIC) as numeric_val1,
             cast(uint64_val as NUMERIC) as numeric_val2,
             cast(double_val as NUMERIC) as numeric_val3
      from TestTable)
ORDER BY 1, 2, 3, 4
--
ARRAY<STRUCT<bool_val BOOL,
             numeric_val1 NUMERIC,
             numeric_val2 NUMERIC,
             numeric_val3 NUMERIC,
             NUMERIC,
             NUMERIC,
             NUMERIC,
             NUMERIC,
             NUMERIC,
             NUMERIC>>
[
  {NULL, NULL, NULL, NULL, NULL, 16, NULL, 24, NULL, 11},
  {false, 1, NULL, 3.5, 5, 16, 14, 24, 6, 11},
  {false, 1, 5, -0.5, 5, 16, 14, 24, 6, 11},
  {false, 1, 6, 1.5, 5, 16, 14, 24, 6, 11},
  {false, 2, 3, 1.5, 5, 16, 14, 24, 6, 11},
  {true, NULL, 2, 2.5, 11, 16, 10, 24, 5, 11},
  {true, 2, 2, NULL, 11, 16, 10, 24, 5, 11},
  {true, 2, 3, 1.5, 11, 16, 10, 24, 5, 11},
  {true, 3, 1, 2.5, 11, 16, 10, 24, 5, 11},
  {true, 4, 2, -1.5, 11, 16, 10, 24, 5, 11}
]
==

[name=analytic_sum]
SELECT bool_val, row_id, int64_val,
       SUM(int64_val) OVER (PARTITION BY bool_val),
       SUM(int64_val) OVER (PARTITION BY bool_val ORDER BY row_id)
FROM TestTable
--
ARRAY<STRUCT<bool_val BOOL, row_id INT64, int64_val INT64, INT64, INT64>>[
  {NULL, 1, NULL, NULL, NULL},
  {false, 3, 1, 5, 1},
  {false, 5, 1, 5, 2},
  {false, 7, 1, 5, 3},
  {false, 9, 2, 5, 5},
  {true, 2, 2, 11, 2},
  {true, 4, NULL, 11, 2},
  {true, 6, 2, 11, 4},
  {true, 8, 4, 11, 8},
  {true, 10, 3, 11, 11}
]
==

[name=analytic_sum_rows_unbounded_and_preceding]
[labels=analytic_sum_over_rows_between_unbounded_and_preceding]
SELECT bool_val, row_id, int64_val,
       SUM(int64_val) OVER (ORDER BY row_id
                            ROWS BETWEEN UNBOUNDED PRECEDING AND 2 PRECEDING)
FROM TestTable
--
ARRAY<STRUCT<bool_val BOOL, row_id INT64, int64_val INT64, INT64>>[
  {NULL, 1, NULL, NULL},
  {true, 2, 2, NULL},
  {false, 3, 1, NULL},
  {true, 4, NULL, 2},
  {false, 5, 1, 3},
  {true, 6, 2, 3},
  {false, 7, 1, 4},
  {true, 8, 4, 6},
  {false, 9, 2, 7},
  {true, 10, 3, 11}
]
==

# ROWS window frame ROWS BETWEEN UNBOUNDED PRECEDING AND <offset> PRECEDING.
[name=analytic_sum_rows_unbounded_and_preceding_with_different_offsets]
[labels=analytic_sum_over_rows_between_unbounded_and_preceding]
select row_id, val,
       sum(val) over (order by row_id ROWS BETWEEN UNBOUNDED PRECEDING
                                               AND 0 PRECEDING),
       sum(val) over (order by row_id ROWS BETWEEN UNBOUNDED PRECEDING
                                               AND 1 PRECEDING),
       sum(val) over (order by row_id ROWS BETWEEN UNBOUNDED PRECEDING
                                               AND 2 PRECEDING),
       sum(val) over (order by row_id ROWS BETWEEN UNBOUNDED PRECEDING
                                               AND 3 PRECEDING),
       sum(val) over (order by row_id ROWS BETWEEN UNBOUNDED PRECEDING
                                               AND 4 PRECEDING),
       sum(val) over (order by row_id ROWS BETWEEN UNBOUNDED PRECEDING
                                               AND 5 PRECEDING),
       sum(val) over (order by row_id ROWS BETWEEN UNBOUNDED PRECEDING
                                               AND 6 PRECEDING),
       sum(val) over (order by row_id ROWS BETWEEN UNBOUNDED PRECEDING
                                               AND 7 PRECEDING),
       sum(val) over (order by row_id ROWS BETWEEN UNBOUNDED PRECEDING
                                               AND 8 PRECEDING),
       sum(val) over (order by row_id ROWS BETWEEN UNBOUNDED PRECEDING
                                               AND 9 PRECEDING),
       sum(val) over (order by row_id ROWS BETWEEN UNBOUNDED PRECEDING
                                               AND 10 PRECEDING),
       sum(val) over (order by row_id ROWS BETWEEN UNBOUNDED PRECEDING
                                               AND 11 PRECEDING)

FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 4, 4            UNION ALL
      SELECT 5, 3            UNION ALL
      SELECT 7, NULL         UNION ALL
      SELECT 8, 2            UNION ALL
      SELECT 6, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64,
             val INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64>>
[{1,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL},
 {2, 2, 2, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
 {3, 3, 5, 2, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
 {4, 4, 9, 5, 2, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
 {5, 3, 12, 9, 5, 2, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
 {6, 4, 16, 12, 9, 5, 2, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
 {7, NULL, 16, 16, 12, 9, 5, 2, NULL, NULL, NULL, NULL, NULL, NULL},
 {8, 2, 18, 16, 16, 12, 9, 5, 2, NULL, NULL, NULL, NULL, NULL}]
==

# ROWS window frame ROWS BETWEEN UNBOUNDED PRECEDING AND <offset> PRECEDING with
# partitions.
[name=analytic_sum_rows_unbounded_and_preceding_with_partitions]
[labels=analytic_sum_over_rows_between_unbounded_and_preceding]
select part, row_id, val,
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN UNBOUNDED PRECEDING
                                                               AND 0 PRECEDING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN UNBOUNDED PRECEDING
                                                               AND 1 PRECEDING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN UNBOUNDED PRECEDING
                                                               AND 2 PRECEDING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN UNBOUNDED PRECEDING
                                                               AND 3 PRECEDING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN UNBOUNDED PRECEDING
                                                               AND 4 PRECEDING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN UNBOUNDED PRECEDING
                                                               AND 5 PRECEDING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN UNBOUNDED PRECEDING
                                                               AND 6 PRECEDING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN UNBOUNDED PRECEDING
                                                               AND 7 PRECEDING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN UNBOUNDED PRECEDING
                                                               AND 8 PRECEDING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN UNBOUNDED PRECEDING
                                                               AND 9 PRECEDING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN UNBOUNDED PRECEDING
                                                              AND 10 PRECEDING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN UNBOUNDED PRECEDING
                                                              AND 11 PRECEDING)
FROM (SELECT 1 row_id, 3 val, 1 part UNION ALL
      SELECT 2,  1,    2             UNION ALL
      SELECT 3,  2,    1             UNION ALL
      SELECT 4,  NULL, 3             UNION ALL
      SELECT 5,  1,    2             UNION ALL
      SELECT 6,  3,    3             UNION ALL
      SELECT 7,  3,    1             UNION ALL
      SELECT 8,  6,    1             UNION ALL
      SELECT 9,  NULL, 2             UNION ALL
      SELECT 10, 5,    3             UNION ALL
      SELECT 11, 3,    1             UNION ALL
      SELECT 12, 1,    2             UNION ALL
      SELECT 13, 2,    1             UNION ALL
      SELECT 14, NULL, 3             UNION ALL
      SELECT 15, 1,    2             UNION ALL
      SELECT 16, 3,    3             UNION ALL
      SELECT 17, 3,    1             UNION ALL
      SELECT 18, 6,    1             UNION ALL
      SELECT 19, NULL, 2             UNION ALL
      SELECT 20, 5,    3)
order by part, row_id, val
--
ARRAY<STRUCT<part INT64,
             row_id INT64,
             val INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64>>
[
  {1, 1, 3, 3, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {1, 3, 2, 5, 3, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {1, 7, 3, 8, 5, 3, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {1, 8, 6, 14, 8, 5, 3, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {1, 11, 3, 17, 14, 8, 5, 3, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {1, 13, 2, 19, 17, 14, 8, 5, 3, NULL, NULL, NULL, NULL, NULL, NULL},
  {1, 17, 3, 22, 19, 17, 14, 8, 5, 3, NULL, NULL, NULL, NULL, NULL},
  {1, 18, 6, 28, 22, 19, 17, 14, 8, 5, 3, NULL, NULL, NULL, NULL},
  {2, 2, 1, 1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {2, 5, 1, 2, 1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {2, 9, NULL, 2, 2, 1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {2, 12, 1, 3, 2, 2, 1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {2, 15, 1, 4, 3, 2, 2, 1, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {2, 19, NULL, 4, 4, 3, 2, 2, 1, NULL, NULL, NULL, NULL, NULL, NULL},
  {3,
   4,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL},
  {3, 6, 3, 3, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {3, 10, 5, 8, 3, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {3, 14, NULL, 8, 8, 3, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {3, 16, 3, 11, 8, 8, 3, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {3, 20, 5, 16, 11, 8, 8, 3, NULL, NULL, NULL, NULL, NULL, NULL, NULL}
]
==

# ROWS window frame ROWS BETWEEN UNBOUNDED PRECEDING AND <offset> PRECEDING with
# desc ordering.
[name=analytic_sum_rows_unbounded_and_preceding_desc_ordering]
[labels=analytic_sum_over_rows_between_unbounded_and_preceding]
select part, row_id, val,
       sum(val) over (partition by part order by row_id desc
                                              ROWS BETWEEN UNBOUNDED PRECEDING
                                                               AND 0 PRECEDING),
       sum(val) over (partition by part order by row_id desc
                                              ROWS BETWEEN UNBOUNDED PRECEDING
                                                               AND 1 PRECEDING),
       sum(val) over (partition by part order by row_id desc
                                              ROWS BETWEEN UNBOUNDED PRECEDING
                                                               AND 2 PRECEDING),
       sum(val) over (partition by part order by row_id desc
                                              ROWS BETWEEN UNBOUNDED PRECEDING
                                                               AND 3 PRECEDING),
       sum(val) over (partition by part order by row_id desc
                                              ROWS BETWEEN UNBOUNDED PRECEDING
                                                               AND 4 PRECEDING),
       sum(val) over (partition by part order by row_id desc
                                              ROWS BETWEEN UNBOUNDED PRECEDING
                                                               AND 5 PRECEDING),
       sum(val) over (partition by part order by row_id desc
                                              ROWS BETWEEN UNBOUNDED PRECEDING
                                                               AND 6 PRECEDING),
       sum(val) over (partition by part order by row_id desc
                                              ROWS BETWEEN UNBOUNDED PRECEDING
                                                               AND 7 PRECEDING),
       sum(val) over (partition by part order by row_id desc
                                              ROWS BETWEEN UNBOUNDED PRECEDING
                                                               AND 8 PRECEDING),
       sum(val) over (partition by part order by row_id desc
                                              ROWS BETWEEN UNBOUNDED PRECEDING
                                                               AND 9 PRECEDING),
       sum(val) over (partition by part order by row_id desc
                                              ROWS BETWEEN UNBOUNDED PRECEDING
                                                              AND 10 PRECEDING),
       sum(val) over (partition by part order by row_id desc
                                              ROWS BETWEEN UNBOUNDED PRECEDING
                                                              AND 11 PRECEDING)
FROM (SELECT 1 row_id, 3 val, 1 part UNION ALL
      SELECT 2,  1,    2             UNION ALL
      SELECT 3,  2,    1             UNION ALL
      SELECT 4,  NULL, 3             UNION ALL
      SELECT 5,  1,    2             UNION ALL
      SELECT 6,  3,    3             UNION ALL
      SELECT 7,  3,    1             UNION ALL
      SELECT 8,  6,    1             UNION ALL
      SELECT 9,  NULL, 2             UNION ALL
      SELECT 10, 5,    3             UNION ALL
      SELECT 11, 3,    1             UNION ALL
      SELECT 12, 1,    2             UNION ALL
      SELECT 13, 2,    1             UNION ALL
      SELECT 14, NULL, 3             UNION ALL
      SELECT 15, 1,    2             UNION ALL
      SELECT 16, 3,    3             UNION ALL
      SELECT 17, 3,    1             UNION ALL
      SELECT 18, 6,    1             UNION ALL
      SELECT 19, NULL, 2             UNION ALL
      SELECT 20, 5,    3)
order by part, row_id, val
--
ARRAY<STRUCT<part INT64,
             row_id INT64,
             val INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64>>
[{1, 1, 3, 28, 25, 23, 20, 14, 11, 9, 6, NULL, NULL, NULL, NULL},
 {1, 3, 2, 25, 23, 20, 14, 11, 9, 6, NULL, NULL, NULL, NULL, NULL},
 {1, 7, 3, 23, 20, 14, 11, 9, 6, NULL, NULL, NULL, NULL, NULL, NULL},
 {1, 8, 6, 20, 14, 11, 9, 6, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
 {1, 11, 3, 14, 11, 9, 6, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
 {1, 13, 2, 11, 9, 6, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
 {1, 17, 3, 9, 6, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
 {1,
  18,
  6,
  6,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL},
 {2, 2, 1, 4, 3, 2, 2, 1, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
 {2, 5, 1, 3, 2, 2, 1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
 {2, 9, NULL, 2, 2, 1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
 {2, 12, 1, 2, 1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
 {2,
  15,
  1,
  1,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL},
 {2,
  19,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL},
 {3, 4, NULL, 16, 16, 13, 8, 8, 5, NULL, NULL, NULL, NULL, NULL, NULL},
 {3, 6, 3, 16, 13, 8, 8, 5, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
 {3, 10, 5, 13, 8, 8, 5, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
 {3, 14, NULL, 8, 8, 5, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
 {3, 16, 3, 8, 5, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
 {3,
  20,
  5,
  5,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL}]
==

# ROWS window frame ROWS BETWEEN UNBOUNDED PRECEDING AND <offset> FOLLOWING.
[name=analytic_sum_rows_unbounded_and_following_with_different_offsets]
[labels=analytic_sum_over_rows_between_unbounded_and_following]
select row_id, val,
       sum(val) over (order by row_id ROWS BETWEEN UNBOUNDED PRECEDING
                                               AND 0 FOLLOWING),
       sum(val) over (order by row_id ROWS BETWEEN UNBOUNDED PRECEDING
                                               AND 1 FOLLOWING),
       sum(val) over (order by row_id ROWS BETWEEN UNBOUNDED PRECEDING
                                               AND 2 FOLLOWING),
       sum(val) over (order by row_id ROWS BETWEEN UNBOUNDED PRECEDING
                                               AND 3 FOLLOWING),
       sum(val) over (order by row_id ROWS BETWEEN UNBOUNDED PRECEDING
                                               AND 4 FOLLOWING),
       sum(val) over (order by row_id ROWS BETWEEN UNBOUNDED PRECEDING
                                               AND 5 FOLLOWING),
       sum(val) over (order by row_id ROWS BETWEEN UNBOUNDED PRECEDING
                                               AND 6 FOLLOWING),
       sum(val) over (order by row_id ROWS BETWEEN UNBOUNDED PRECEDING
                                               AND 7 FOLLOWING),
       sum(val) over (order by row_id ROWS BETWEEN UNBOUNDED PRECEDING
                                               AND 8 FOLLOWING),
       sum(val) over (order by row_id ROWS BETWEEN UNBOUNDED PRECEDING
                                               AND 9 FOLLOWING),
       sum(val) over (order by row_id ROWS BETWEEN UNBOUNDED PRECEDING
                                               AND 10 FOLLOWING),
       sum(val) over (order by row_id ROWS BETWEEN UNBOUNDED PRECEDING
                                               AND 11 FOLLOWING)

FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 4, 4            UNION ALL
      SELECT 5, 3            UNION ALL
      SELECT 7, NULL         UNION ALL
      SELECT 8, 2            UNION ALL
      SELECT 6, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64,
             val INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64>>
[
  {1, NULL, NULL, 2, 5, 9, 12, 16, 16, 18, 18, 18, 18, 18},
  {2, 2, 2, 5, 9, 12, 16, 16, 18, 18, 18, 18, 18, 18},
  {3, 3, 5, 9, 12, 16, 16, 18, 18, 18, 18, 18, 18, 18},
  {4, 4, 9, 12, 16, 16, 18, 18, 18, 18, 18, 18, 18, 18},
  {5, 3, 12, 16, 16, 18, 18, 18, 18, 18, 18, 18, 18, 18},
  {6, 4, 16, 16, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18},
  {7, NULL, 16, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18},
  {8, 2, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18}
]
==

# ROWS window frame ROWS BETWEEN UNBOUNDED PRECEDING AND <offset> FOLLOWING with
# partitions.
[name=analytic_sum_rows_unbounded_and_following_with_partitions]
[labels=analytic_sum_over_rows_between_unbounded_and_following]
select part, row_id, val,
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN UNBOUNDED PRECEDING
                                                               AND 0 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN UNBOUNDED PRECEDING
                                                               AND 1 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN UNBOUNDED PRECEDING
                                                               AND 2 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN UNBOUNDED PRECEDING
                                                               AND 3 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN UNBOUNDED PRECEDING
                                                               AND 4 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN UNBOUNDED PRECEDING
                                                               AND 5 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN UNBOUNDED PRECEDING
                                                               AND 6 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN UNBOUNDED PRECEDING
                                                               AND 7 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN UNBOUNDED PRECEDING
                                                               AND 8 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN UNBOUNDED PRECEDING
                                                               AND 9 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN UNBOUNDED PRECEDING
                                                              AND 10 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN UNBOUNDED PRECEDING
                                                              AND 11 FOLLOWING)
FROM (SELECT 1 row_id, 3 val, 1 part UNION ALL
      SELECT 2,  1,    2             UNION ALL
      SELECT 3,  2,    1             UNION ALL
      SELECT 4,  NULL, 3             UNION ALL
      SELECT 5,  1,    2             UNION ALL
      SELECT 6,  3,    3             UNION ALL
      SELECT 7,  3,    1             UNION ALL
      SELECT 8,  6,    1             UNION ALL
      SELECT 9,  NULL, 2             UNION ALL
      SELECT 10, 5,    3             UNION ALL
      SELECT 11, 3,    1             UNION ALL
      SELECT 12, 1,    2             UNION ALL
      SELECT 13, 2,    1             UNION ALL
      SELECT 14, NULL, 3             UNION ALL
      SELECT 15, 1,    2             UNION ALL
      SELECT 16, 3,    3             UNION ALL
      SELECT 17, 3,    1             UNION ALL
      SELECT 18, 6,    1             UNION ALL
      SELECT 19, NULL, 2             UNION ALL
      SELECT 20, 5,    3)
order by part, row_id, val
--
ARRAY<STRUCT<part INT64,
             row_id INT64,
             val INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64>>
[
  {1, 1, 3, 3, 5, 8, 14, 17, 19, 22, 28, 28, 28, 28, 28},
  {1, 3, 2, 5, 8, 14, 17, 19, 22, 28, 28, 28, 28, 28, 28},
  {1, 7, 3, 8, 14, 17, 19, 22, 28, 28, 28, 28, 28, 28, 28},
  {1, 8, 6, 14, 17, 19, 22, 28, 28, 28, 28, 28, 28, 28, 28},
  {1, 11, 3, 17, 19, 22, 28, 28, 28, 28, 28, 28, 28, 28, 28},
  {1, 13, 2, 19, 22, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28},
  {1, 17, 3, 22, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28},
  {1, 18, 6, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28},
  {2, 2, 1, 1, 2, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4},
  {2, 5, 1, 2, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4},
  {2, 9, NULL, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},
  {2, 12, 1, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},
  {2, 15, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},
  {2, 19, NULL, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},
  {3, 4, NULL, NULL, 3, 8, 8, 11, 16, 16, 16, 16, 16, 16, 16},
  {3, 6, 3, 3, 8, 8, 11, 16, 16, 16, 16, 16, 16, 16, 16},
  {3, 10, 5, 8, 8, 11, 16, 16, 16, 16, 16, 16, 16, 16, 16},
  {3, 14, NULL, 8, 11, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16},
  {3, 16, 3, 11, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16},
  {3, 20, 5, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16}
]
==

# ROWS window frame ROWS BETWEEN UNBOUNDED PRECEDING AND <offset> FOLLOWING with
# desc ordering.
[name=analytic_sum_rows_unbounded_and_following_desc_ordering]
[labels=analytic_sum_over_rows_between_unbounded_and_following]
select part, row_id, val,
       sum(val) over (partition by part order by row_id desc
                                              ROWS BETWEEN UNBOUNDED PRECEDING
                                                               AND 0 FOLLOWING),
       sum(val) over (partition by part order by row_id desc
                                              ROWS BETWEEN UNBOUNDED PRECEDING
                                                               AND 1 FOLLOWING),
       sum(val) over (partition by part order by row_id desc
                                              ROWS BETWEEN UNBOUNDED PRECEDING
                                                               AND 2 FOLLOWING),
       sum(val) over (partition by part order by row_id desc
                                              ROWS BETWEEN UNBOUNDED PRECEDING
                                                               AND 3 FOLLOWING),
       sum(val) over (partition by part order by row_id desc
                                              ROWS BETWEEN UNBOUNDED PRECEDING
                                                               AND 4 FOLLOWING),
       sum(val) over (partition by part order by row_id desc
                                              ROWS BETWEEN UNBOUNDED PRECEDING
                                                               AND 5 FOLLOWING),
       sum(val) over (partition by part order by row_id desc
                                              ROWS BETWEEN UNBOUNDED PRECEDING
                                                               AND 6 FOLLOWING),
       sum(val) over (partition by part order by row_id desc
                                              ROWS BETWEEN UNBOUNDED PRECEDING
                                                               AND 7 FOLLOWING),
       sum(val) over (partition by part order by row_id desc
                                              ROWS BETWEEN UNBOUNDED PRECEDING
                                                               AND 8 FOLLOWING),
       sum(val) over (partition by part order by row_id desc
                                              ROWS BETWEEN UNBOUNDED PRECEDING
                                                               AND 9 FOLLOWING),
       sum(val) over (partition by part order by row_id desc
                                              ROWS BETWEEN UNBOUNDED PRECEDING
                                                              AND 10 FOLLOWING),
       sum(val) over (partition by part order by row_id desc
                                              ROWS BETWEEN UNBOUNDED PRECEDING
                                                              AND 11 FOLLOWING)
FROM (SELECT 1 row_id, 3 val, 1 part UNION ALL
      SELECT 2,  1,    2             UNION ALL
      SELECT 3,  2,    1             UNION ALL
      SELECT 4,  NULL, 3             UNION ALL
      SELECT 5,  1,    2             UNION ALL
      SELECT 6,  3,    3             UNION ALL
      SELECT 7,  3,    1             UNION ALL
      SELECT 8,  6,    1             UNION ALL
      SELECT 9,  NULL, 2             UNION ALL
      SELECT 10, 5,    3             UNION ALL
      SELECT 11, 3,    1             UNION ALL
      SELECT 12, 1,    2             UNION ALL
      SELECT 13, 2,    1             UNION ALL
      SELECT 14, NULL, 3             UNION ALL
      SELECT 15, 1,    2             UNION ALL
      SELECT 16, 3,    3             UNION ALL
      SELECT 17, 3,    1             UNION ALL
      SELECT 18, 6,    1             UNION ALL
      SELECT 19, NULL, 2             UNION ALL
      SELECT 20, 5,    3)
order by part, row_id, val
--
ARRAY<STRUCT<part INT64,
             row_id INT64,
             val INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64>>
[
  {1, 1, 3, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28},
  {1, 3, 2, 25, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28},
  {1, 7, 3, 23, 25, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28},
  {1, 8, 6, 20, 23, 25, 28, 28, 28, 28, 28, 28, 28, 28, 28},
  {1, 11, 3, 14, 20, 23, 25, 28, 28, 28, 28, 28, 28, 28, 28},
  {1, 13, 2, 11, 14, 20, 23, 25, 28, 28, 28, 28, 28, 28, 28},
  {1, 17, 3, 9, 11, 14, 20, 23, 25, 28, 28, 28, 28, 28, 28},
  {1, 18, 6, 6, 9, 11, 14, 20, 23, 25, 28, 28, 28, 28, 28},
  {2, 2, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},
  {2, 5, 1, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},
  {2, 9, NULL, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},
  {2, 12, 1, 2, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4},
  {2, 15, 1, 1, 2, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4},
  {2, 19, NULL, NULL, 1, 2, 2, 3, 4, 4, 4, 4, 4, 4, 4},
  {3, 4, NULL, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16},
  {3, 6, 3, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16},
  {3, 10, 5, 13, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16},
  {3, 14, NULL, 8, 13, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16},
  {3, 16, 3, 8, 8, 13, 16, 16, 16, 16, 16, 16, 16, 16, 16},
  {3, 20, 5, 5, 8, 8, 13, 16, 16, 16, 16, 16, 16, 16, 16}
]
==

[name=analytic_sum_rows_preceding_and_following]
[labels=analytic_sum_over_rows_between_preceding_and_following]
SELECT bool_val, row_id, int64_val,
       SUM(uint64_val) OVER (ORDER BY row_id
                             ROWS BETWEEN 2 PRECEDING AND 1 FOLLOWING)
FROM TestTable
--
ARRAY<STRUCT<bool_val BOOL, row_id INT64, int64_val INT64, UINT64>>[
  {NULL, 1, NULL, 3},
  {true, 2, 2, 9},
  {false, 3, 1, 11},
  {true, 4, NULL, 11},
  {false, 5, 1, 10},
  {true, 6, 2, 9},
  {false, 7, 1, 9},
  {true, 8, 4, 12},
  {false, 9, 2, 11},
  {true, 10, 3, 6}
]
==

[name=analytic_sum_rows_current_and_following]
[labels=analytic_sum_over_range_between_current_and_following]
SELECT bool_val, row_id, int64_val,
       SUM(double_val) OVER (PARTITION BY bool_val
                             ORDER BY row_id
                             RANGE BETWEEN CURRENT ROW AND 2 FOLLOWING)
FROM TestTable
--
ARRAY<STRUCT<bool_val BOOL, row_id INT64, int64_val INT64, DOUBLE>>[
  {NULL, 1, NULL, NULL},
  {false, 3, 1, 5},
  {false, 5, 1, 3},
  {false, 7, 1, 1},
  {false, 9, 2, 1.5},
  {true, 2, 2, 4},
  {true, 4, NULL, 2.5},
  {true, 6, 2, -1.5},
  {true, 8, 4, 1},
  {true, 10, 3, 2.5}
]
==

[name=analytic_sum_range_preceding_and_following_0]
[labels=analytic_sum_over_range_between_preceding_and_following]
SELECT bool_val, int64_val, double_val,
       SUM(double_val) OVER (PARTITION BY bool_val ORDER BY int64_val
                             RANGE BETWEEN 2 PRECEDING AND 0 FOLLOWING),
       SUM(double_val) OVER (PARTITION BY bool_val ORDER BY int64_val
                             RANGE BETWEEN 0 PRECEDING AND 2 FOLLOWING),
       SUM(double_val) OVER (PARTITION BY bool_val ORDER BY int64_val
                             RANGE BETWEEN 1 PRECEDING AND 2 FOLLOWING),
       SUM(double_val) OVER (PARTITION BY bool_val ORDER BY int64_val
                             RANGE BETWEEN 2 PRECEDING AND 1 FOLLOWING)
FROM TestTable
--
ARRAY<STRUCT<bool_val BOOL,
             int64_val INT64,
             double_val DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE>>
[
  {NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {false, 1, 3.5, 4.5, 6, 6, 6},
  {false, 1, -0.5, 4.5, 6, 6, 6},
  {false, 1, 1.5, 4.5, 6, 6, 6},
  {false, 2, 1.5, 6, 1.5, 6, 6},
  {true, NULL, 2.5, 2.5, 2.5, 2.5, 2.5},
  {true, 2, 1.5, 1.5, 2.5, 2.5, 4},
  {true, 2, NULL, 1.5, 2.5, 2.5, 4},
  {true, 3, 2.5, 4, 1, 2.5, 2.5},
  {true, 4, -1.5, 2.5, -1.5, 1, 2.5}
]
==

[name=analytic_sum_range_preceding_and_following_1]
[labels=analytic_sum_over_range_between_preceding_and_following]
[parameters=9223372036854775807 as int64_max]
SELECT bool_val, int64_val, double_val,
       SUM(double_val) OVER (ORDER BY int64_val
                             RANGE BETWEEN 200 PRECEDING AND 1 FOLLOWING),
       SUM(double_val) OVER (ORDER BY int64_val
                             RANGE BETWEEN 1 PRECEDING AND 200 FOLLOWING),
       SUM(double_val) OVER (ORDER BY int64_val
                             RANGE BETWEEN 200 PRECEDING AND 300 FOLLOWING),
       SUM(double_val) OVER (ORDER BY int64_val
                             RANGE BETWEEN @int64_max PRECEDING AND
                                           4 FOLLOWING),
       SUM(double_val) OVER (ORDER BY int64_val
                             RANGE BETWEEN 2 PRECEDING AND
                                           @int64_max FOLLOWING),
       SUM(double_val) OVER (ORDER BY int64_val
                             RANGE BETWEEN @int64_max PRECEDING AND
                                           @int64_max FOLLOWING)
FROM TestTable
--
ARRAY<STRUCT<bool_val BOOL,
             int64_val INT64,
             double_val DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE>>
[
  {true, NULL, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5},
  {NULL, NULL, NULL, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5},
  {false, 1, 1.5, 7.5, 8.5, 8.5, 8.5, 8.5, 8.5},
  {false, 1, 3.5, 7.5, 8.5, 8.5, 8.5, 8.5, 8.5},
  {false, 1, -0.5, 7.5, 8.5, 8.5, 8.5, 8.5, 8.5},
  {true, 2, NULL, 10, 8.5, 8.5, 8.5, 8.5, 8.5},
  {false, 2, 1.5, 10, 8.5, 8.5, 8.5, 8.5, 8.5},
  {true, 2, 1.5, 10, 8.5, 8.5, 8.5, 8.5, 8.5},
  {true, 3, 2.5, 8.5, 4, 8.5, 8.5, 8.5, 8.5},
  {true, 4, -1.5, 8.5, 1, 8.5, 8.5, 4, 8.5}
]
==

[name=analytic_sum_range_preceding_and_following_2]
[labels=analytic_sum_over_range_between_preceding_and_following]
[parameters=cast("NaN" as double) as nan,
            cast("+inf" as double) as pos_inf,
            cast("-inf" as double) as neg_inf]
SELECT row_id, val,
       SUM(val) OVER (ORDER BY row_id
                      RANGE BETWEEN 1 PRECEDING AND 2 FOLLOWING)
FROM (SELECT null row_id, 1 val UNION ALL
      SELECT 2, 2 UNION ALL
      SELECT 1, 3 UNION ALL
      SELECT @nan, 4 UNION ALL
      SELECT @pos_inf, 5 UNION ALL
      SELECT @nan, 6 UNION ALL
      SELECT @pos_inf, 7 UNION ALL
      SELECT 2, 8 UNION ALL
      SELECT @neg_inf, 9 UNION ALL
      SELECT null, 10 UNION ALL
      SELECT 1, 11 UNION ALL
      SELECT @nan, 12 UNION ALL
      SELECT 3, 13 UNION ALL
      SELECT @neg_inf, 14)
--
ARRAY<STRUCT<row_id DOUBLE, val INT64, INT64>>[
  {NULL, 1, 11},
  {NULL, 10, 11},
  {nan, 6, 22},
  {nan, 4, 22},
  {nan, 12, 22},
  {-inf, 9, 23},
  {-inf, 14, 23},
  {1, 11, 37},
  {1, 3, 37},
  {2, 8, 37},
  {2, 2, 37},
  {3, 13, 23},
  {inf, 7, 12},
  {inf, 5, 12}
]
==

[name=analytic_sum_range_preceding_and_following_3]
[labels=analytic_sum_over_range_between_preceding_and_following]
[parameters=cast("NaN" as double) as nan,
            cast("+inf" as double) as pos_inf,
            cast("-inf" as double) as neg_inf]
SELECT row_id, val,
       SUM(val) OVER (ORDER BY row_id
                      RANGE BETWEEN 1 PRECEDING AND 2 FOLLOWING)
FROM (SELECT 1 row_id, @pos_inf val UNION ALL
      SELECT 2, 2 UNION ALL
      SELECT 1, 3 UNION ALL
      SELECT 2, 2 UNION ALL
      SELECT 3, @neg_inf UNION ALL
      SELECT 4, @pos_inf UNION ALL
      SELECT 4, 2 UNION ALL
      SELECT 5, 5 UNION ALL
      SELECT 6, @pos_inf UNION ALL
      SELECT 6, @pos_inf UNION ALL
      SELECT 8, null UNION ALL
      SELECT 9, null UNION ALL
      SELECT 10, @neg_inf UNION ALL
      SELECT 3, 13 UNION ALL
      SELECT 15, 14)
--
ARRAY<STRUCT<row_id INT64, val DOUBLE, DOUBLE>>[
  {1, 3, nan},
  {1, inf, nan},
  {2, 2, nan},
  {2, 2, nan},
  {3, -inf, nan},
  {3, 13, nan},
  {4, 2, nan},
  {4, inf, nan},
  {5, 5, inf},
  {6, inf, inf},
  {6, inf, inf},
  {8, NULL, -inf},
  {9, NULL, -inf},
  {10, -inf, -inf},
  {15, 14, 14}
]
==

[name=analytic_sum_range_preceding_and_following_orderby_desc_with_small_values]
[labels=analytic_sum_over_range_between_preceding_and_following]
SELECT uint32_val, double_val,
       SUM(double_val) OVER (
         ORDER BY uint32_val DESC
         RANGE BETWEEN 1 PRECEDING AND 2 FOLLOWING
       )
FROM (SELECT CAST(0 AS uint32) uint32_val, NULL double_val UNION ALL
      SELECT CAST(1 AS uint32),            1.0 UNION ALL
      SELECT CAST(2 AS uint32),            2.0 UNION ALL
      SELECT CAST(3 AS uint32),            3.0 UNION ALL
      SELECT NULL,                         4.0)
ORDER BY 1 DESC
--
ARRAY<STRUCT<uint32_val UINT32, double_val DOUBLE, DOUBLE>>[
  {3, 3, 6},
  {2, 2, 6},
  {1, 1, 3},
  {0, NULL, 1},
  {NULL, 4, 4}
]
==

[name=analytic_sum_range_preceding_and_following_orderby_float_desc_with_neg_inf]
[labels=analytic_sum_over_range_between_preceding_and_following]
[parameters=-1.79769e+308 as min_double_val,
            cast("-inf" as double) as neg_inf]
SELECT double_val, int64_val,
       SUM(int64_val) OVER (
         ORDER BY double_val DESC
         RANGE BETWEEN 1 PRECEDING AND 9223372036854775807 FOLLOWING
       )
FROM (SELECT @min_double_val double_val, NULL int64_val UNION ALL
      SELECT 1,                          1 UNION ALL
      SELECT 2,                          2 UNION ALL
      SELECT 3,                          3 UNION ALL
      SELECT @neg_inf,                   4 UNION ALL
      SELECT @neg_inf,                   4)
ORDER BY 1 DESC
--
ARRAY<STRUCT<double_val DOUBLE, int64_val INT64, INT64>>[
  {3, 3, 6},
  {2, 2, 6},
  {1, 1, 3},
  {-1.79769e+308, NULL, NULL},
  {-inf, 4, 8},
  {-inf, 4, 8}
]
==

[name=analytic_sum_range_preceding_and_following_orderby_float_desc_with_nan]
[labels=analytic_sum_over_range_between_preceding_and_following]
[parameters=-1.79769e+308 as min_double_val,
            cast("nan" as double) as nan]
SELECT double_val, int64_val,
       SUM(int64_val) OVER (
         ORDER BY double_val DESC
         RANGE BETWEEN 1 PRECEDING AND 9223372036854775807 FOLLOWING
       )
FROM (SELECT @min_double_val double_val, NULL int64_val UNION ALL
      SELECT 1,                          1 UNION ALL
      SELECT 2,                          2 UNION ALL
      SELECT 3,                          3 UNION ALL
      SELECT @nan,                       4)
ORDER BY 1 DESC
--
ARRAY<STRUCT<double_val DOUBLE, int64_val INT64, INT64>>[
  {3, 3, 6},
  {2, 2, 6},
  {1, 1, 3},
  {-1.79769e+308, NULL, NULL},
  {nan, 4, 4}
]
==

[name=analytic_sum_range_preceding_and_following_orderby_float_desc_with_special_values]
[labels=analytic_sum_over_range_between_preceding_and_following]
[parameters=-1.79769e+308 as min_double_val,
            cast("nan" as double) as nan,
            cast("-inf" as double) as neg_inf]
SELECT double_val, int64_val,
       SUM(int64_val) OVER (
         ORDER BY double_val DESC
         RANGE BETWEEN 1 PRECEDING AND 9223372036854775807 FOLLOWING
       )
FROM (SELECT @min_double_val double_val, NULL int64_val UNION ALL
      SELECT 1,                          1 UNION ALL
      SELECT 2,                          2 UNION ALL
      SELECT 3,                          3 UNION ALL
      SELECT @nan,                       4 UNION ALL
      SELECT @neg_inf,                   5 UNION ALL
      SELECT @neg_inf,                   6 UNION ALL
      SELECT NULL,                       8)
ORDER BY 1 DESC
--
ARRAY<STRUCT<double_val DOUBLE, int64_val INT64, INT64>>[
  {3, 3, 6},
  {2, 2, 6},
  {1, 1, 3},
  {-1.79769e+308, NULL, NULL},
  {-inf, 5, 11},
  {-inf, 6, 11},
  {nan, 4, 4},
  {NULL, 8, 8}
]
==

[name=analytic_sum_range_preceding_and_following_orderby_asc_with_large_values]
[labels=analytic_sum_over_range_between_preceding_and_following]
[parameters=1.79769e+308 as max_double_val,
            cast("+inf" as double) as pos_inf]
SELECT double_val, int64_val,
       SUM(int64_val) OVER (
         ORDER BY double_val
         RANGE BETWEEN 1 PRECEDING AND 9223372036854775807 FOLLOWING
       )
FROM (SELECT @max_double_val double_val, NULL int64_val UNION ALL
      SELECT 1,                          1 UNION ALL
      SELECT 2,                          2 UNION ALL
      SELECT 3,                          3 UNION ALL
      SELECT @pos_inf,                   4)
ORDER BY 1
--
ARRAY<STRUCT<double_val DOUBLE, int64_val INT64, INT64>>[
  {1, 1, 6},
  {2, 2, 6},
  {3, 3, 5},
  {1.79769e+308, NULL, NULL},
  {inf, 4, 4}
]
==

[name=analytic_sum_range_following_and_following_orderby_asc]
[labels=analytic_sum_over_range_between_following_and_following]
SELECT bool_val, int64_val, double_val,
       SUM(double_val) OVER (PARTITION BY bool_val ORDER BY int64_val
                             RANGE BETWEEN 0 FOLLOWING AND 2 FOLLOWING),
       SUM(double_val) OVER (PARTITION BY bool_val ORDER BY int64_val
                             RANGE BETWEEN 1 FOLLOWING AND 2 FOLLOWING),
       SUM(double_val) OVER (PARTITION BY bool_val ORDER BY int64_val
                             RANGE BETWEEN 2 FOLLOWING AND 2 FOLLOWING)
FROM TestTable
--
ARRAY<STRUCT<bool_val BOOL,
             int64_val INT64,
             double_val DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE>>
[
  {NULL, NULL, NULL, NULL, NULL, NULL},
  {false, 1, 3.5, 6, 1.5, NULL},
  {false, 1, -0.5, 6, 1.5, NULL},
  {false, 1, 1.5, 6, 1.5, NULL},
  {false, 2, 1.5, 1.5, NULL, NULL},
  {true, NULL, 2.5, 2.5, 2.5, 2.5},
  {true, 2, 1.5, 2.5, 1, -1.5},
  {true, 2, NULL, 2.5, 1, -1.5},
  {true, 3, 2.5, 1, -1.5, NULL},
  {true, 4, -1.5, -1.5, NULL, NULL}
]
==

[name=analytic_sum_range_following_and_following_orderby_desc]
[labels=analytic_sum_over_range_between_following_and_following]
SELECT bool_val, int64_val, double_val,
       SUM(double_val) OVER (PARTITION BY bool_val ORDER BY int64_val DESC
                             RANGE BETWEEN 0 FOLLOWING AND 2 FOLLOWING),
       SUM(double_val) OVER (PARTITION BY bool_val ORDER BY int64_val DESC
                             RANGE BETWEEN 1 FOLLOWING AND 2 FOLLOWING),
       SUM(double_val) OVER (PARTITION BY bool_val ORDER BY int64_val DESC
                             RANGE BETWEEN 2 FOLLOWING AND 2 FOLLOWING)
FROM TestTable
--
ARRAY<STRUCT<bool_val BOOL,
             int64_val INT64,
             double_val DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE>>
[
  {NULL, NULL, NULL, NULL, NULL, NULL},
  {false, 2, 1.5, 6, 4.5, NULL},
  {false, 1, 1.5, 4.5, NULL, NULL},
  {false, 1, 3.5, 4.5, NULL, NULL},
  {false, 1, -0.5, 4.5, NULL, NULL},
  {true, 4, -1.5, 2.5, 4, 1.5},
  {true, 3, 2.5, 4, 1.5, NULL},
  {true, 2, NULL, 1.5, NULL, NULL},
  {true, 2, 1.5, 1.5, NULL, NULL},
  {true, NULL, 2.5, 2.5, 2.5, 2.5}
]
==

[name=analytic_sum_range_following_and_following_large_offsets_0]
[labels=analytic_sum_over_range_between_following_and_following]
[parameters=9223372036854775807 as int64_max]
SELECT bool_val, int64_val, double_val,
       SUM(double_val) OVER (ORDER BY int64_val
                             RANGE BETWEEN 200 FOLLOWING AND 1 FOLLOWING),
       SUM(double_val) OVER (ORDER BY int64_val
                             RANGE BETWEEN 1 FOLLOWING AND 200 FOLLOWING),
       SUM(double_val) OVER (ORDER BY int64_val
                             RANGE BETWEEN 200 FOLLOWING AND 300 FOLLOWING)
FROM TestTable
--
ARRAY<STRUCT<bool_val BOOL,
             int64_val INT64,
             double_val DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE>>
[
  {true, NULL, 2.5, 2.5, 2.5, 2.5},
  {NULL, NULL, NULL, 2.5, 2.5, 2.5},
  {false, 1, 1.5, NULL, 4, NULL},
  {false, 1, 3.5, NULL, 4, NULL},
  {false, 1, -0.5, NULL, 4, NULL},
  {true, 2, NULL, NULL, 1, NULL},
  {false, 2, 1.5, NULL, 1, NULL},
  {true, 2, 1.5, NULL, 1, NULL},
  {true, 3, 2.5, NULL, -1.5, NULL},
  {true, 4, -1.5, NULL, NULL, NULL}
]
==



[name=analytic_sum_range_following_and_following_large_offsets_1]
[labels=analytic_sum_over_range_between_following_and_following]
[parameters=9223372036854775807 as int64_max]
SELECT bool_val, int64_val, double_val,
       SUM(double_val) OVER (ORDER BY int64_val
                             RANGE BETWEEN @int64_max FOLLOWING AND
                                           4 FOLLOWING),
       SUM(double_val) OVER (ORDER BY int64_val
                             RANGE BETWEEN 2 FOLLOWING AND
                                           @int64_max FOLLOWING),
       SUM(double_val) OVER (ORDER BY int64_val
                             RANGE BETWEEN @int64_max FOLLOWING AND
                                           @int64_max FOLLOWING)
FROM TestTable
--
ARRAY<STRUCT<bool_val BOOL,
             int64_val INT64,
             double_val DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE>>
[
  {true, NULL, 2.5, 2.5, 2.5, 2.5},
  {NULL, NULL, NULL, 2.5, 2.5, 2.5},
  {false, 1, 1.5, NULL, 1, NULL},
  {false, 1, 3.5, NULL, 1, NULL},
  {false, 1, -0.5, NULL, 1, NULL},
  {true, 2, NULL, NULL, -1.5, NULL},
  {false, 2, 1.5, NULL, -1.5, NULL},
  {true, 2, 1.5, NULL, -1.5, NULL},
  {true, 3, 2.5, NULL, NULL, NULL},
  {true, 4, -1.5, NULL, NULL, NULL}
]
==

[name=analytic_sum_range_following_and_following_orderby_asc_special_doubles]
[labels=analytic_sum_over_range_between_following_and_following]
[parameters=cast("NaN" as double) as nan,
            cast("+inf" as double) as pos_inf,
            cast("-inf" as double) as neg_inf]
SELECT row_id, val,
       SUM(val) OVER (ORDER BY row_id
                      RANGE BETWEEN 1 FOLLOWING AND 2 FOLLOWING),
       SUM(val) OVER (ORDER BY row_id
                      RANGE BETWEEN 2 FOLLOWING AND 1 FOLLOWING)
FROM (SELECT null row_id, 1 val UNION ALL
      SELECT 2, 2 UNION ALL
      SELECT 1, 3 UNION ALL
      SELECT @nan, 4 UNION ALL
      SELECT @pos_inf, 5 UNION ALL
      SELECT @nan, 6 UNION ALL
      SELECT @pos_inf, 7 UNION ALL
      SELECT 2, 8 UNION ALL
      SELECT @neg_inf, 9 UNION ALL
      SELECT null, 10 UNION ALL
      SELECT 1, 11 UNION ALL
      SELECT @nan, 12 UNION ALL
      SELECT 3, 13 UNION ALL
      SELECT @neg_inf, 14)
--
ARRAY<STRUCT<row_id DOUBLE, val INT64, INT64, INT64>>[
  {NULL, 10, 11, 11},
  {NULL, 1, 11, 11},
  {nan, 4, 22, 22},
  {nan, 6, 22, 22},
  {nan, 12, 22, 22},
  {-inf, 9, 23, 23},
  {-inf, 14, 23, 23},
  {1, 11, 23, NULL},
  {1, 3, 23, NULL},
  {2, 8, 13, NULL},
  {2, 2, 13, NULL},
  {3, 13, NULL, NULL},
  {inf, 5, 12, 12},
  {inf, 7, 12, 12}
]
==

[name=analytic_sum_range_following_and_following_orderby_asc_special_doubles_with_large_offset]
[labels=analytic_sum_over_range_between_following_and_following]
[parameters=cast("NaN" as double) as nan,
            cast("+inf" as double) as pos_inf,
            cast("-inf" as double) as neg_inf]
SELECT row_id, val,
       SUM(val) OVER (ORDER BY row_id
                      RANGE BETWEEN 1 FOLLOWING AND
                                    9223372036854775807 FOLLOWING),
       SUM(val) OVER (ORDER BY row_id
                      RANGE BETWEEN 9223372036854775806 FOLLOWING AND
                                    9223372036854775807 FOLLOWING)
FROM (SELECT null row_id, 1 val UNION ALL
      SELECT 2, 2 UNION ALL
      SELECT 1, 3 UNION ALL
      SELECT @nan, 4 UNION ALL
      SELECT @pos_inf, 5 UNION ALL
      SELECT @nan, 6 UNION ALL
      SELECT @pos_inf, 7 UNION ALL
      SELECT 2, 8 UNION ALL
      SELECT @neg_inf, 9 UNION ALL
      SELECT null, 10 UNION ALL
      SELECT 1, 11 UNION ALL
      SELECT @nan, 12 UNION ALL
      SELECT 3, 13 UNION ALL
      SELECT @neg_inf, 14)
--
ARRAY<STRUCT<row_id DOUBLE, val INT64, INT64, INT64>>[
  {NULL, 10, 11, 11},
  {NULL, 1, 11, 11},
  {nan, 4, 22, 22},
  {nan, 6, 22, 22},
  {nan, 12, 22, 22},
  {-inf, 9, 23, 23},
  {-inf, 14, 23, 23},
  {1, 11, 23, NULL},
  {1, 3, 23, NULL},
  {2, 8, 13, NULL},
  {2, 2, 13, NULL},
  {3, 13, NULL, NULL},
  {inf, 5, 12, 12},
  {inf, 7, 12, 12}
]
==

[name=analytic_sum_range_following_and_following_orderby_desc_nan_with_large_offset]
[labels=analytic_sum_over_range_between_following_and_following]
[parameters=cast("NaN" as double) as nan]
SELECT row_id, val,
       SUM(val) OVER (ORDER BY row_id DESC
                      RANGE BETWEEN 1 FOLLOWING AND
                                    9223372036854775807 FOLLOWING),
       SUM(val) OVER (ORDER BY row_id DESC
                      RANGE BETWEEN 9223372036854775806 FOLLOWING AND
                                    1 FOLLOWING)
FROM (SELECT 2 row_id, 2 val UNION ALL
      SELECT 1, 3 UNION ALL
      SELECT @nan, 4 UNION ALL
      SELECT @nan, 6 UNION ALL
      SELECT 2, 8 UNION ALL
      SELECT 1, 11 UNION ALL
      SELECT @nan, 12 UNION ALL
      SELECT 3, 13)
--
ARRAY<STRUCT<row_id DOUBLE, val INT64, INT64, INT64>>[
  {3, 13, 24, NULL},
  {2, 8, 14, NULL},
  {2, 2, 14, NULL},
  {1, 11, NULL, NULL},
  {1, 3, NULL, NULL},
  {nan, 4, 22, 22},
  {nan, 12, 22, 22},
  {nan, 6, 22, 22}
]
==

[name=analytic_sum_range_following_and_following_orderby_desc_neg_inf_with_large_offset]
[labels=analytic_sum_over_range_between_following_and_following]
[parameters=cast("-inf" as double) as neg_inf]
SELECT row_id, val,
       SUM(val) OVER (ORDER BY row_id DESC
                      RANGE BETWEEN 1 FOLLOWING AND
                                    9223372036854775807 FOLLOWING),
       SUM(val) OVER (ORDER BY row_id DESC
                      RANGE BETWEEN 9223372036854775806 FOLLOWING AND
                                    1 FOLLOWING)
FROM (SELECT 2 row_id, 2 val UNION ALL
      SELECT 1, 3 UNION ALL
      SELECT 2, 8 UNION ALL
      SELECT @neg_inf, 9 UNION ALL
      SELECT null, 10 UNION ALL
      SELECT 1, 11 UNION ALL
      SELECT 3, 13 UNION ALL
      SELECT @neg_inf, 14)
--
ARRAY<STRUCT<row_id DOUBLE, val INT64, INT64, INT64>>[
  {3, 13, 24, NULL},
  {2, 8, 14, NULL},
  {2, 2, 14, NULL},
  {1, 11, NULL, NULL},
  {1, 3, NULL, NULL},
  {-inf, 14, 23, 23},
  {-inf, 9, 23, 23},
  {NULL, 10, 10, 10}
]
==

[name=analytic_sum_range_following_and_following_orderby_desc_null_with_large_offset]
[labels=analytic_sum_over_range_between_following_and_following]
[parameters=cast("-inf" as double) as neg_inf]
SELECT row_id, val,
       SUM(val) OVER (ORDER BY row_id DESC
                      RANGE BETWEEN 1 FOLLOWING AND
                                    9223372036854775807 FOLLOWING),
       SUM(val) OVER (ORDER BY row_id DESC
                      RANGE BETWEEN 9223372036854775806 FOLLOWING AND
                                    1 FOLLOWING)
FROM (SELECT null row_id, 1 val UNION ALL
      SELECT 2, 2 UNION ALL
      SELECT 1, 3 UNION ALL
      SELECT 2, 8 UNION ALL
      SELECT null, 10 UNION ALL
      SELECT 1, 11 UNION ALL
      SELECT 3, 13 UNION ALL
      SELECT null, 14)
--
ARRAY<STRUCT<row_id INT64, val INT64, INT64, INT64>>[
  {3, 13, 24, NULL},
  {2, 8, 14, NULL},
  {2, 2, 14, NULL},
  {1, 3, NULL, NULL},
  {1, 11, NULL, NULL},
  {NULL, 1, 25, 25},
  {NULL, 10, 25, 25},
  {NULL, 14, 25, 25}
]
==

[name=analytic_sum_range_following_and_following_orderby_desc_special_doubles_with_large_offset]
[labels=analytic_sum_over_range_between_following_and_following]
[parameters=cast("NaN" as double) as nan,
            cast("+inf" as double) as pos_inf,
            cast("-inf" as double) as neg_inf]
SELECT row_id, val,
       SUM(val) OVER (ORDER BY row_id DESC
                      RANGE BETWEEN 1 FOLLOWING AND
                                    9223372036854775807 FOLLOWING),
       SUM(val) OVER (ORDER BY row_id DESC
                      RANGE BETWEEN 9223372036854775806 FOLLOWING AND
                                    9223372036854775807 FOLLOWING)
FROM (SELECT null row_id, 1 val UNION ALL
      SELECT 2, 2 UNION ALL
      SELECT 1, 3 UNION ALL
      SELECT @nan, 4 UNION ALL
      SELECT @pos_inf, 5 UNION ALL
      SELECT @nan, 6 UNION ALL
      SELECT @pos_inf, 7 UNION ALL
      SELECT 2, 8 UNION ALL
      SELECT @neg_inf, 9 UNION ALL
      SELECT null, 10 UNION ALL
      SELECT 1, 11 UNION ALL
      SELECT @nan, 12 UNION ALL
      SELECT 3, 13 UNION ALL
      SELECT @neg_inf, 14)
--
ARRAY<STRUCT<row_id DOUBLE, val INT64, INT64, INT64>>[
  {inf, 5, 12, 12},
  {inf, 7, 12, 12},
  {3, 13, 24, NULL},
  {2, 8, 14, NULL},
  {2, 2, 14, NULL},
  {1, 11, NULL, NULL},
  {1, 3, NULL, NULL},
  {-inf, 9, 23, 23},
  {-inf, 14, 23, 23},
  {nan, 6, 22, 22},
  {nan, 12, 22, 22},
  {nan, 4, 22, 22},
  {NULL, 10, 11, 11},
  {NULL, 1, 11, 11}
]
==

[name=analytic_sum_range_following_and_following_sum_special_doubles]
[labels=analytic_sum_over_range_between_following_and_following]
[parameters=cast("NaN" as double) as nan,
            cast("+inf" as double) as pos_inf,
            cast("-inf" as double) as neg_inf]
SELECT row_id, val,
       SUM(val) OVER (ORDER BY row_id
                      RANGE BETWEEN 1 FOLLOWING AND 2 FOLLOWING)
FROM (SELECT 1 row_id, @pos_inf val UNION ALL
      SELECT 2, 2 UNION ALL
      SELECT 1, 3 UNION ALL
      SELECT 2, 2 UNION ALL
      SELECT 3, @neg_inf UNION ALL
      SELECT 4, @pos_inf UNION ALL
      SELECT 4, 2 UNION ALL
      SELECT 5, 5 UNION ALL
      SELECT 6, @pos_inf UNION ALL
      SELECT 6, @pos_inf UNION ALL
      SELECT 8, null UNION ALL
      SELECT 9, null UNION ALL
      SELECT 10, @neg_inf UNION ALL
      SELECT 3, 13 UNION ALL
      SELECT 15, 14)
--
ARRAY<STRUCT<row_id INT64, val DOUBLE, DOUBLE>>[
  {1, 3, -inf},
  {1, inf, -inf},
  {2, 2, nan},
  {2, 2, nan},
  {3, -inf, inf},
  {3, 13, inf},
  {4, 2, inf},
  {4, inf, inf},
  {5, 5, inf},
  {6, inf, NULL},
  {6, inf, NULL},
  {8, NULL, -inf},
  {9, NULL, -inf},
  {10, -inf, NULL},
  {15, 14, NULL}
]
==

[name=analytic_cumulative_sum_int64_no_overflow_1]
[parameters=9223372036854775807 as max_val, -9223372036854775808 as min_val]
[labels=analytic_sum_over_range_with_cumulative_window]
SELECT row_id, val, SUM(val) OVER (ORDER BY row_id)
FROM (SELECT 1 row_id, cast(1 as int64) val UNION ALL
      SELECT 2, @max_val - 2 UNION ALL
      SELECT 3, 1 UNION ALL
      SELECT 4, @min_val + 2 UNION ALL
      SELECT 5, @min_val UNION ALL
      SELECT 6, @max_val UNION ALL
      SELECT 7, @max_val UNION ALL
      SELECT 8, @min_val UNION ALL
      SELECT 9, 1 UNION ALL
      SELECT 10, @min_val UNION ALL
      SELECT 11, @max_val)
--
ARRAY<STRUCT<row_id INT64, val INT64, INT64>>[
  {1, 1, 1},
  {2, 9223372036854775805, 9223372036854775806},
  {3, 1, 9223372036854775807},
  {4, -9223372036854775806, 1},
  {5, -9223372036854775808, -9223372036854775807},
  {6, 9223372036854775807, 0},
  {7, 9223372036854775807, 9223372036854775807},
  {8, -9223372036854775808, -1},
  {9, 1, 0},
  {10, -9223372036854775808, -9223372036854775808},
  {11, 9223372036854775807, -1}
]
==

[name=analytic_cumulative_sum_int64_no_overflow_2]
[labels=analytic_sum_over_range_with_cumulative_window]
[parameters=9223372036854775807 as max_val, -9223372036854775808 as min_val]
SELECT row_id, val, SUM(val) OVER (ORDER BY row_id)
FROM (SELECT 1 row_id, cast(1 as int64) val UNION ALL
      SELECT 2, @max_val - 2 UNION ALL
      SELECT 3, 1            UNION ALL
      SELECT 4, @min_val + 2 UNION ALL
      SELECT 5, 100          UNION ALL
      SELECT 6, @min_val     UNION ALL
      SELECT 6, 5)
--
ARRAY<STRUCT<row_id INT64, val INT64, INT64>>[
  {1, 1, 1},
  {2, 9223372036854775805, 9223372036854775806},
  {3, 1, 9223372036854775807},
  {4, -9223372036854775806, 1},
  {5, 100, 101},
  {6, 5, -9223372036854775702},
  {6, -9223372036854775808, -9223372036854775702}
]
==

[name=analytic_cumulative_sum_int64_no_overflow_3]
[labels=analytic_sum_over_range_with_cumulative_window]
[parameters=9223372036854775807 as max_val, -9223372036854775808 as min_val]
SELECT row_id, val, SUM(val) OVER (ORDER BY row_id)
FROM (SELECT 1 row_id, cast(1 as int64) val UNION ALL
      SELECT 2, @max_val - 2 UNION ALL
      SELECT 3, 1 UNION ALL
      SELECT 4, @min_val + 2 UNION ALL
      SELECT 5, 100 UNION ALL
      SELECT 6, @min_val)
--
ARRAY<STRUCT<row_id INT64, val INT64, INT64>>[
  {1, 1, 1},
  {2, 9223372036854775805, 9223372036854775806},
  {3, 1, 9223372036854775807},
  {4, -9223372036854775806, 1},
  {5, 100, 101},
  {6, -9223372036854775808, -9223372036854775707}
]
==

[name=analytic_cumulative_sum_int64_overflow]
[labels=analytic_sum_over_range_with_cumulative_window]
[parameters=9223372036854775807 as max_val, -9223372036854775808 as min_val]
SELECT row_id, val, SUM(val) OVER (ORDER BY row_id)
FROM (SELECT 1 row_id, cast(1 as int64) val UNION ALL
      SELECT 2, @max_val - 2 UNION ALL
      SELECT 3, 1 UNION ALL
      SELECT 4, 1)
--
ERROR: generic::out_of_range: int64 overflow
==

[name=analytic_moving_sum_int64_no_overflow_1]
[labels=analytic_sum_over_rows_between_preceding_and_following]
[parameters=9223372036854775807 as max_val, -9223372036854775808 as min_val]
SELECT row_id, val, SUM(val) OVER (ORDER BY row_id
                                   ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)
FROM (SELECT 1 row_id, cast(1 as int64) val UNION ALL
      SELECT 2, @max_val - 2 UNION ALL
      SELECT 3, 1 UNION ALL
      SELECT 4, 1 UNION ALL
      SELECT 5, @max_val - 2 UNION ALL
      SELECT 6, 1 UNION ALL
      SELECT 7, @min_val UNION ALL
      SELECT 8, @max_val UNION ALL
      SELECT 9, @min_val + 1 UNION ALL
      SELECT 10, @max_val - 1 UNION ALL
      SELECT 11, 1)
--
ARRAY<STRUCT<row_id INT64, val INT64, INT64>>[
  {1, 1, 9223372036854775806},
  {2, 9223372036854775805, 9223372036854775807},
  {3, 1, 9223372036854775807},
  {4, 1, 9223372036854775807},
  {5, 9223372036854775805, 9223372036854775807},
  {6, 1, -2},
  {7, -9223372036854775808, 0},
  {8, 9223372036854775807, -9223372036854775808},
  {9, -9223372036854775807, 9223372036854775806},
  {10, 9223372036854775806, 0},
  {11, 1, 9223372036854775807}
]
==

# The ordering group with val=4 is not in any range windows and does not cause
# overflow.
[name=analytic_moving_sum_int64_no_overflow_2]
[labels=analytic_sum_over_range_between_preceding_and_preceding]
[parameters=9223372036854775807 as max_val, -9223372036854775808 as min_val]
SELECT range_val, val, SUM(val) OVER (ORDER BY range_val
                                      RANGE BETWEEN 3 PRECEDING AND 1 PRECEDING)
FROM (SELECT -1 range_val, @min_val val UNION ALL
      SELECT 1, @max_val UNION ALL
      SELECT 2, -5 UNION ALL
      SELECT 4, @min_val UNION ALL
      SELECT 4, @min_val UNION ALL
      SELECT 4, @min_val UNION ALL
      SELECT 4, @min_val UNION ALL
      SELECT 4, @min_val UNION ALL
      SELECT 4, @max_val UNION ALL
      SELECT 4, @max_val UNION ALL
      SELECT 4, @max_val UNION ALL
      SELECT 8, @max_val UNION ALL
      SELECT 9, @max_val UNION ALL
      SELECT 12, @min_val)
--
ARRAY<STRUCT<range_val INT64, val INT64, INT64>>[
  {-1, -9223372036854775808, NULL},
  {1, 9223372036854775807, -9223372036854775808},
  {2, -5, -1},
  {4, -9223372036854775808, 9223372036854775802},
  {4, 9223372036854775807, 9223372036854775802},
  {4, -9223372036854775808, 9223372036854775802},
  {4, 9223372036854775807, 9223372036854775802},
  {4, -9223372036854775808, 9223372036854775802},
  {4, -9223372036854775808, 9223372036854775802},
  {4, -9223372036854775808, 9223372036854775802},
  {4, 9223372036854775807, 9223372036854775802},
  {8, 9223372036854775807, NULL},
  {9, 9223372036854775807, 9223372036854775807},
  {12, -9223372036854775808, 9223372036854775807}
]
==

# Same as the previous with the ordering direction and the boundary direction
# reversed.
[name=analytic_moving_sum_int64_no_overflow_3]
[labels=analytic_sum_over_range_between_following_and_following]
[parameters=9223372036854775807 as max_val, -9223372036854775808 as min_val]
SELECT range_val, val, SUM(val) OVER (ORDER BY range_val DESC
                                      RANGE BETWEEN 1 FOLLOWING AND 3 FOLLOWING)
FROM (SELECT -1 range_val, @min_val val UNION ALL
      SELECT 1, @max_val UNION ALL
      SELECT 2, -5 UNION ALL
      SELECT 4, @min_val UNION ALL
      SELECT 4, @min_val UNION ALL
      SELECT 4, @min_val UNION ALL
      SELECT 4, @min_val UNION ALL
      SELECT 4, @min_val UNION ALL
      SELECT 4, @max_val UNION ALL
      SELECT 4, @max_val UNION ALL
      SELECT 4, @max_val UNION ALL
      SELECT 8, @max_val UNION ALL
      SELECT 9, @max_val UNION ALL
      SELECT 12, @min_val)
--
ARRAY<STRUCT<range_val INT64, val INT64, INT64>>[
  {12, -9223372036854775808, 9223372036854775807},
  {9, 9223372036854775807, 9223372036854775807},
  {8, 9223372036854775807, NULL},
  {4, -9223372036854775808, 9223372036854775802},
  {4, 9223372036854775807, 9223372036854775802},
  {4, -9223372036854775808, 9223372036854775802},
  {4, 9223372036854775807, 9223372036854775802},
  {4, -9223372036854775808, 9223372036854775802},
  {4, -9223372036854775808, 9223372036854775802},
  {4, -9223372036854775808, 9223372036854775802},
  {4, 9223372036854775807, 9223372036854775802},
  {2, -5, -1},
  {1, 9223372036854775807, -9223372036854775808},
  {-1, -9223372036854775808, NULL}
]
==

[name=analytic_moving_sum_numeric_no_overflow_1]
[required_features=ANALYTIC_FUNCTIONS,NUMERIC_TYPE]
[labels=analytic_sum_over_range_between_following_and_following]
[parameters="99999999999999999999999999999.999999999" as max_val,
            "-99999999999999999999999999999.999999999" as min_val]
SELECT row_id, val, SUM(val) OVER (ORDER BY row_id
                                   RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING)
FROM (SELECT 1 row_id, CAST(@max_val AS NUMERIC) val UNION ALL
      SELECT 2, CAST(@min_val AS NUMERIC) UNION ALL
      SELECT 3, CAST(@min_val AS NUMERIC) UNION ALL
      SELECT 4, CAST(@max_val AS NUMERIC) UNION ALL
      SELECT 5, CAST(@max_val AS NUMERIC) UNION ALL
      SELECT 6, CAST(@min_val AS NUMERIC))
--
ARRAY<STRUCT<row_id INT64, val NUMERIC, NUMERIC>>[
  {
    1,
    99999999999999999999999999999.999999999,
    0
  },
  {
    2,
    -99999999999999999999999999999.999999999,
    -99999999999999999999999999999.999999999
  },
  {
    3,
    -99999999999999999999999999999.999999999,
    -99999999999999999999999999999.999999999
  },
  {
    4,
    99999999999999999999999999999.999999999,
    99999999999999999999999999999.999999999
  },
  {
    5,
    99999999999999999999999999999.999999999,
    99999999999999999999999999999.999999999
  },
  {
    6,
    -99999999999999999999999999999.999999999,
    0
  }
]
==

[name=analytic_sum_int64_overflow_1]
[labels=analytic_sum_over_rows_with_unbounded_window]
[parameters=9223372036854775807 as max_val]
SELECT row_id, val, SUM(val) OVER (ORDER BY row_id
                                   ROWS BETWEEN UNBOUNDED PRECEDING AND
                                                UNBOUNDED FOLLOWING)
FROM (SELECT 1 row_id, @max_val val UNION ALL
      SELECT 2, 10)
--
ERROR: generic::out_of_range: int64 overflow
==

[name=analytic_sum_int64_overflow_2]
[labels=analytic_sum_over_rows_with_unbounded_window]
[parameters=-9223372036854775808 as min_val]
SELECT row_id, val, SUM(val) OVER (ORDER BY row_id
                                   ROWS BETWEEN UNBOUNDED PRECEDING AND
                                                UNBOUNDED FOLLOWING)
FROM (SELECT 1 row_id, @min_val val UNION ALL
      SELECT 2, -10)
--
ERROR: generic::out_of_range: int64 overflow
==

[name=analytic_sum_numeric_overflow_1]
[required_features=ANALYTIC_FUNCTIONS,NUMERIC_TYPE]
[parameters="99999999999999999999999999999.999999999" as max_val]
SELECT row_id, val, SUM(val) OVER (ORDER BY row_id
                                   ROWS BETWEEN UNBOUNDED PRECEDING AND
                                                UNBOUNDED FOLLOWING)
FROM (SELECT 1 row_id, CAST(@max_val as NUMERIC) val UNION ALL
      SELECT 2, 10)
--
ERROR: generic::out_of_range: numeric overflow: SUM
==

[name=analytic_sum_numeric_overflow_2]
[required_features=ANALYTIC_FUNCTIONS,NUMERIC_TYPE]
[parameters="-99999999999999999999999999999.999999999" as min_val]
SELECT row_id, val, SUM(val) OVER (ORDER BY row_id
                                   ROWS BETWEEN UNBOUNDED PRECEDING AND
                                                UNBOUNDED FOLLOWING)
FROM (SELECT 1 row_id, CAST(@min_val as NUMERIC) val UNION ALL
      SELECT 2, -10)
--
ERROR: generic::out_of_range: numeric overflow: SUM
==

# The total sum does not overflow, even though the partial sum exceeds INT64
# range during aggregation.
[name=analytic_sum_int64_overflow_3]
[labels=analytic_sum_over_rows_with_unbounded_window]
[parameters=9223372036854775807 as max_val, -9223372036854775808 as min_val]
SELECT row_id, val, SUM(val) OVER (ORDER BY row_id
                                   ROWS BETWEEN UNBOUNDED PRECEDING AND
                                                UNBOUNDED FOLLOWING)
FROM (SELECT 1 row_id, @max_val val UNION ALL
      SELECT 2, 1 UNION ALL
      SELECT 3, @min_val)
--
ARRAY<STRUCT<row_id INT64, val INT64, INT64>>[
  {1, 9223372036854775807, 0},
  {2, 1, 0},
  {3, -9223372036854775808, 0}
]
==

[name=analytic_sum_uint64_overflow]
[labels=analytic_sum_over_rows_with_unbounded_window]
[parameters=18446744073709551615 as max_val]
SELECT row_id, val, SUM(val) OVER (ORDER BY row_id
                                   ROWS BETWEEN UNBOUNDED PRECEDING AND
                                                UNBOUNDED FOLLOWING)
FROM (SELECT 1 row_id, @max_val val UNION ALL
      SELECT 2, 10)
--
ERROR: generic::out_of_range: uint64 overflow
==

[name=analytic_sum_double_overflow_1]
[labels=analytic_sum_over_rows_between_preceding_and_following]
[parameters=1.79769e+308 as max_val]
SELECT row_id, val, SUM(val) OVER (ORDER BY row_id
                                   ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)
FROM (SELECT 1 row_id, @max_val val UNION ALL
      SELECT 2, @max_val)
--
ERROR: generic::out_of_range: double overflow
==

[name=analytic_sum_double_overflow_2]
[labels=analytic_sum_over_rows_between_preceding_and_following]
[parameters=-1.79769e+308 as min_val]
SELECT row_id, val, SUM(val) OVER (ORDER BY row_id
                                   ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)
FROM (SELECT 1 row_id, @min_val val UNION ALL
      SELECT 2, @min_val)
--
ERROR: generic::out_of_range: double overflow
==

[name=analytic_sum_double_overflow_3]
[labels=analytic_sum_over_rows_with_unbounded_window]
[parameters=1.79769e+308 as max_val, -1.79769e+308 as min_val]
SELECT row_id, val, SUM(val) OVER (ORDER BY row_id
                                   ROWS BETWEEN UNBOUNDED PRECEDING AND
                                                UNBOUNDED FOLLOWING)
FROM (SELECT 1 row_id, @max_val val UNION ALL
      SELECT 2, 1.79769e+307 UNION ALL
      SELECT 3, @min_val)
--
ARRAY<STRUCT<row_id INT64, val DOUBLE, DOUBLE>>[
  {1, 1.79769e+308, 1.79769e+307},
  {2, 1.79769e+307, 1.79769e+307},
  {3, -1.79769e+308, 1.79769e+307}
]
==

[name=analytic_sum_double_inf_1]
[labels=analytic_sum_over_rows_between_preceding_and_current]
[parameters=cast("+inf" as double) as pos_inf]
SELECT row_id, val, SUM(val) OVER (ORDER BY row_id
                                   ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)
FROM (SELECT 1 row_id, @pos_inf val UNION ALL
      SELECT 2, @pos_inf UNION ALL
      SELECT 3, @pos_inf)
--
ARRAY<STRUCT<row_id INT64, val DOUBLE, DOUBLE>>[
  {1, inf, inf},
  {2, inf, inf},
  {3, inf, inf}
]
==

[name=analytic_sum_double_inf_2]
[labels=analytic_sum_over_rows_between_preceding_and_current]
[parameters=cast("-inf" as double) as neg_inf]
SELECT row_id, val, SUM(val) OVER (ORDER BY row_id
                                   ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)
FROM (SELECT 1 row_id, @neg_inf val UNION ALL
      SELECT 2, @neg_inf UNION ALL
      SELECT 3, @neg_inf)
--
ARRAY<STRUCT<row_id INT64, val DOUBLE, DOUBLE>>[
  {1, -inf, -inf},
  {2, -inf, -inf},
  {3, -inf, -inf}
]
==

[name=analytic_sum_double_inf_3]
[labels=analytic_sum_over_rows_between_preceding_and_current]
[parameters=cast("+inf" as double) as pos_inf,
            cast("-inf" as double) as neg_inf]
SELECT row_id, val, SUM(val) OVER (ORDER BY row_id
                                   ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)
FROM (SELECT 1 row_id, @pos_inf val UNION ALL
      SELECT 2, @neg_inf UNION ALL
      SELECT 3, @neg_inf)
--
ARRAY<STRUCT<row_id INT64, val DOUBLE, DOUBLE>>[
  {1, inf, inf},
  {2, -inf, nan},
  {3, -inf, -inf}
]
==

# An implementation will have a wrong result on the third row if it compute the
# sum for the third row by first subtracting the sum for the second row by the
# val value on the first row and then adding the result with the val value on
# the third row.
[name=analytic_sum_double_possible_error_by_subtraction_1]
[labels=analytic_sum_over_rows_between_preceding_and_current]
[parameters=cast("+inf" as double) as pos_inf]
SELECT row_id, val, SUM(val) OVER (ORDER BY row_id
                                   ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)
FROM (SELECT 1 row_id, @pos_inf val UNION ALL
      SELECT 2, 1 UNION ALL
      SELECT 3, 2)
--
ARRAY<STRUCT<row_id INT64, val DOUBLE, DOUBLE>>[
  {1, inf, inf},
  {2, 1, inf},
  {3, 2, 3}
]
==

# Similar to the previous query, an implementation will have a wrong result
# on the third row if it does not compute the sum over the entire window but
# based on the result for the second row.
[name=analytic_sum_double_possible_error_by_subtraction_2]
[labels=analytic_sum_over_rows_between_preceding_and_current]
[parameters=cast("-inf" as double) as neg_inf]
SELECT row_id, val, SUM(val) OVER (ORDER BY row_id
                                   ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)
FROM (SELECT 1 row_id, @neg_inf val UNION ALL
      SELECT 2, 1 UNION ALL
      SELECT 3, 2)
--
ARRAY<STRUCT<row_id INT64, val DOUBLE, DOUBLE>>[
  {1, -inf, -inf},
  {2, 1, -inf},
  {3, 2, 3}
]
==

[name=analytic_sum_double_possible_error_by_subtraction_3]
[labels=analytic_sum_over_rows_between_preceding_and_current]
[parameters=cast("NaN" as double) as nan]
SELECT row_id, val, SUM(val) OVER (ORDER BY row_id
                                   ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)
FROM (SELECT 1 row_id, @nan val UNION ALL
      SELECT 2, 1 UNION ALL
      SELECT 3, 2)
--
ARRAY<STRUCT<row_id INT64, val DOUBLE, DOUBLE>>[
  {1, nan, nan},
  {2, 1, nan},
  {3, 2, 3}
]
==

[name=analytic_sum_double_possible_error_by_subtraction_4]
[labels=analytic_sum_over_rows_between_preceding_and_current]
[parameters=1.79769e+308 as max_val]
SELECT row_id, val, SUM(val) OVER (ORDER BY row_id
                                   ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)
FROM (SELECT 1 row_id, @max_val val UNION ALL
      SELECT 2, 1 UNION ALL
      SELECT 3, 2)
--
ARRAY<STRUCT<row_id INT64, val DOUBLE, DOUBLE>>[
  {1, 1.79769e+308, 1.79769e+308},
  {2, 1, 1.79769e+308},
  {3, 2, 3}
]
==

[name=analytic_sum_double_possible_error_by_subtraction_5]
[labels=analytic_sum_over_rows_between_preceding_and_current]
[parameters=-1.79769e+308 as min_val]
SELECT row_id, val, SUM(val) OVER (ORDER BY row_id
                                   ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)
FROM (SELECT 1 row_id, @min_val val UNION ALL
      SELECT 2, 1 UNION ALL
      SELECT 3, 2)
--
ARRAY<STRUCT<row_id INT64, val DOUBLE, DOUBLE>>[
  {1, -1.79769e+308, -1.79769e+308},
  {2, 1, -1.79769e+308},
  {3, 2, 3}
]
==

[name=analytic_sum_double_nan]
[labels=analytic_sum_over_rows_between_preceding_and_current]
[parameters=cast("NaN" as double) as nan,
            cast("+inf" as double) as pos_inf,
            cast("-inf" as double) as neg_inf]
SELECT row_id, val, SUM(val) OVER (ORDER BY row_id
                                   ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)
FROM (SELECT 1 row_id, @nan val UNION ALL
      SELECT 2, @nan UNION ALL
      SELECT 3, 2 UNION ALL
      SELECT 4, 5 UNION ALL
      SELECT 5, 6 UNION ALL
      SELECT 6, @nan UNION ALL
      SELECT 7, @pos_inf UNION ALL
      SELECT 8, @nan UNION ALL
      SELECT 9, @neg_inf UNION ALL
      SELECT 10, @nan)
--
ARRAY<STRUCT<row_id INT64, val DOUBLE, DOUBLE>>[
  {1, nan, nan},
  {2, nan, nan},
  {3, 2, nan},
  {4, 5, 7},
  {5, 6, 11},
  {6, nan, nan},
  {7, inf, nan},
  {8, nan, nan},
  {9, -inf, nan},
  {10, nan, nan}
]
==

# Range-based "empty" window BETWEEN <n> PRECEDING AND <m> PRECEDING with
# finite <n> less than finite <m> is not empty for tuples with non-finite order
# keys.
[name=analytic_sum_double_range_empty_window]
[parameters=cast("NaN" as double) as nan,
            cast("+inf" as double) as pos_inf,
            cast("-inf" as double) as neg_inf]
SELECT row_id, val,
       SUM(val) OVER (ORDER BY row_id
                      RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING)
FROM (SELECT null row_id, 1 val UNION ALL
      SELECT 2, 2 UNION ALL
      SELECT 1, 3 UNION ALL
      SELECT @nan, 4 UNION ALL
      SELECT @pos_inf, 5 UNION ALL
      SELECT @nan, 6 UNION ALL
      SELECT @pos_inf, 7 UNION ALL
      SELECT 2, 8 UNION ALL
      SELECT @neg_inf, 9 UNION ALL
      SELECT null, 10 UNION ALL
      SELECT 1, 11 UNION ALL
      SELECT @nan, 12 UNION ALL
      SELECT 3, 13 UNION ALL
      SELECT @neg_inf, 14)
--
ARRAY<STRUCT<row_id DOUBLE, val INT64, INT64>>[
  {NULL, 1, 11},
  {NULL, 10, 11},
  {nan, 6, 22},
  {nan, 4, 22},
  {nan, 12, 22},
  {-inf, 9, 23},
  {-inf, 14, 23},
  {1, 11, NULL},
  {1, 3, NULL},
  {2, 8, NULL},
  {2, 2, NULL},
  {3, 13, NULL},
  {inf, 7, 12},
  {inf, 5, 12}
]
==

[name=analytic_sum_range_orderby_bool]
[labels=analytic_sum_over_range_between_current_and_unbounded]

SELECT bool_val, int64_val,
       SUM(int64_val) OVER (ORDER BY bool_val
                            RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)

FROM TestTable
--
ARRAY<STRUCT<bool_val BOOL, int64_val INT64, INT64>>[
  {NULL, NULL, 16},
  {false, 1, 16},
  {false, 2, 16},
  {false, 1, 16},
  {false, 1, 16},
  {true, NULL, 11},
  {true, 4, 11},
  {true, 2, 11},
  {true, 2, 11},
  {true, 3, 11}
]
==

[name=analytic_sum_range_orderby_bool_nulls_last]
[labels=analytic_sum_over_range_between_current_and_unbounded]
[required_features=ANALYTIC_FUNCTIONS,V_1_3_NULLS_FIRST_LAST_IN_ORDER_BY]
SELECT bool_val, int64_val,
       SUM(int64_val) OVER (ORDER BY bool_val NULLS LAST
                            RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)

FROM TestTable
--
ARRAY<STRUCT<bool_val BOOL, int64_val INT64, INT64>>[
  {false, 1, 16},
  {false, 2, 16},
  {false, 1, 16},
  {false, 1, 16},
  {true, NULL, 11},
  {true, 4, 11},
  {true, 2, 11},
  {true, 2, 11},
  {true, 3, 11},
  {NULL, NULL, NULL}
]
==

[name=analytic_sum_range_orderby_bool_desc_nulls_first]
[labels=analytic_sum_over_range_between_current_and_unbounded]
[required_features=ANALYTIC_FUNCTIONS,V_1_3_NULLS_FIRST_LAST_IN_ORDER_BY]
SELECT bool_val, int64_val,
       SUM(int64_val) OVER (ORDER BY bool_val DESC NULLS FIRST
                            RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)

FROM TestTable
--
ARRAY<STRUCT<bool_val BOOL, int64_val INT64, INT64>>[
  {NULL, NULL, 16},
  {true, NULL, 16},
  {true, 4, 16},
  {true, 2, 16},
  {true, 2, 16},
  {true, 3, 16},
  {false, 1, 5},
  {false, 2, 5},
  {false, 1, 5},
  {false, 1, 5}
]
==

[name=analytic_sum_range_preceding_orderby_bool_nulls_first]
[labels=analytic_sum_over_range_between_preceding]
[required_features=ANALYTIC_FUNCTIONS,V_1_3_NULLS_FIRST_LAST_IN_ORDER_BY]
SELECT double_val, int64_val,
       SUM(int64_val) OVER (ORDER BY double_val DESC NULLS FIRST
                            RANGE BETWEEN 2 PRECEDING AND CURRENT ROW)

FROM TestTable2
--
ARRAY<STRUCT<double_val DOUBLE, int64_val INT64, INT64>>[
  {NULL, NULL, 2},
  {NULL, 2, 2},
  {inf, 2, 2},
  {3.5, NULL, NULL},
  {2.5, 3, 3},
  {1.5, 1, 6},
  {1.5, 2, 6},
  {-0.5, 1, 4},
  {-inf, 4, 4},
  {nan, 1, 1}
]
==


[name=analytic_sum_range_preceding_orderby_bool_nulls_last]
[labels=analytic_sum_over_range_between_preceding]
[required_features=ANALYTIC_FUNCTIONS,V_1_3_NULLS_FIRST_LAST_IN_ORDER_BY]
SELECT double_val, int64_val,
       SUM(int64_val) OVER (ORDER BY double_val ASC NULLS LAST
                            RANGE BETWEEN 2 PRECEDING AND CURRENT ROW)

FROM TestTable2
--
ARRAY<STRUCT<double_val DOUBLE, int64_val INT64, INT64>>[
  {nan, 1, 1},
  {-inf, 4, 4},
  {-0.5, 1, 1},
  {1.5, 1, 4},
  {1.5, 2, 4},
  {2.5, 3, 6},
  {3.5, NULL, 6},
  {inf, 2, 2},
  {NULL, NULL, 2},
  {NULL, 2, 2}
]
==

[name=analytic_sum_range_following_orderby_bool_nulls_first]
[labels=analytic_sum_over_range_between_following]
[required_features=ANALYTIC_FUNCTIONS,V_1_3_NULLS_FIRST_LAST_IN_ORDER_BY]
SELECT double_val, int64_val,
       SUM(int64_val) OVER (ORDER BY double_val DESC NULLS FIRST
                            RANGE BETWEEN CURRENT ROW AND 2 FOLLOWING)

FROM TestTable2
--
ARRAY<STRUCT<double_val DOUBLE, int64_val INT64, INT64>>[
  {NULL, NULL, 2},
  {NULL, 2, 2},
  {inf, 2, 2},
  {3.5, NULL, 6},
  {2.5, 3, 6},
  {1.5, 1, 4},
  {1.5, 2, 4},
  {-0.5, 1, 1},
  {-inf, 4, 4},
  {nan, 1, 1}
]
==

[name=analytic_sum_range_following_orderby_bool_nulls_last]
[labels=analytic_sum_over_range_between_following]
[required_features=ANALYTIC_FUNCTIONS,V_1_3_NULLS_FIRST_LAST_IN_ORDER_BY]
SELECT double_val, int64_val,
       SUM(int64_val) OVER (ORDER BY double_val ASC NULLS LAST
                            RANGE BETWEEN CURRENT ROW AND 2 FOLLOWING)

FROM TestTable2
--
ARRAY<STRUCT<double_val DOUBLE, int64_val INT64, INT64>>[
  {nan, 1, 1},
  {-inf, 4, 4},
  {-0.5, 1, 4},
  {1.5, 1, 6},
  {1.5, 2, 6},
  {2.5, 3, 3},
  {3.5, NULL, NULL},
  {inf, 2, 2},
  {NULL, NULL, 2},
  {NULL, 2, 2}
]
==

[name=analytic_sum_range_preceding_preceding_orderby_bool_nulls_last]
[labels=analytic_sum_over_range_between_following]
[required_features=ANALYTIC_FUNCTIONS,V_1_3_NULLS_FIRST_LAST_IN_ORDER_BY]
SELECT double_val, int64_val,
       SUM(int64_val) OVER (ORDER BY double_val ASC NULLS LAST
                            RANGE BETWEEN 2 PRECEDING AND 1 PRECEDING)

FROM TestTable3
--
ARRAY<STRUCT<double_val DOUBLE, int64_val INT64, INT64>>[
  {nan, 1, 1},
  {-inf, 4, 4},
  {-0.5, 1, NULL},
  {1.5, 2, 1},
  {2.5, 3, 2},
  {3.5, NULL, 5},
  {inf, 2, 2},
  {NULL, NULL, NULL}
]
==

[name=analytic_sum_range_preceding_preceding_orderby_bool_nulls_first]
[labels=analytic_sum_over_range_between_following]
[required_features=ANALYTIC_FUNCTIONS,V_1_3_NULLS_FIRST_LAST_IN_ORDER_BY]
SELECT double_val, int64_val,
       SUM(int64_val) OVER (ORDER BY double_val DESC NULLS FIRST
                            RANGE BETWEEN 2 PRECEDING AND 1 PRECEDING)

FROM TestTable2
--
ARRAY<STRUCT<double_val DOUBLE, int64_val INT64, INT64>>[
  {NULL, NULL, 2},
  {NULL, 2, 2},
  {inf, 2, 2},
  {3.5, NULL, NULL},
  {2.5, 3, NULL},
  {1.5, 1, 3},
  {1.5, 2, 3},
  {-0.5, 1, 3},
  {-inf, 4, 4},
  {nan, 1, 1}
]
==

[name=analytic_sum_range_following_following_orderby_bool_nulls_last]
[labels=analytic_sum_over_range_between_following]
[required_features=ANALYTIC_FUNCTIONS,V_1_3_NULLS_FIRST_LAST_IN_ORDER_BY]
SELECT double_val, int64_val,
       SUM(int64_val) OVER (ORDER BY double_val ASC NULLS LAST
                            RANGE BETWEEN 1 FOLLOWING AND 2 FOLLOWING)

FROM TestTable2
--
ARRAY<STRUCT<double_val DOUBLE, int64_val INT64, INT64>>[
  {nan, 1, 1},
  {-inf, 4, 4},
  {-0.5, 1, 3},
  {1.5, 1, 3},
  {1.5, 2, 3},
  {2.5, 3, NULL},
  {3.5, NULL, NULL},
  {inf, 2, 2},
  {NULL, NULL, 2},
  {NULL, 2, 2}
]
==

[name=analytic_sum_range_following_following_orderby_bool_nulls_first]
[labels=analytic_sum_over_range_between_following]
[required_features=ANALYTIC_FUNCTIONS,V_1_3_NULLS_FIRST_LAST_IN_ORDER_BY]
SELECT double_val, int64_val,
       SUM(int64_val) OVER (ORDER BY double_val DESC NULLS FIRST
                            RANGE BETWEEN 1 FOLLOWING AND 2 FOLLOWING)

FROM TestTable2
--
ARRAY<STRUCT<double_val DOUBLE, int64_val INT64, INT64>>[
  {NULL, NULL, 2},
  {NULL, 2, 2},
  {inf, 2, 2},
  {3.5, NULL, 6},
  {2.5, 3, 3},
  {1.5, 1, 1},
  {1.5, 2, 1},
  {-0.5, 1, NULL},
  {-inf, 4, 4},
  {nan, 1, 1}
]
==

[name=analytic_sum_range_preceding_infinite_orderby_bool_nulls_last]
[parameters=IEEE_DIVIDE(1, 0) as offset_val,
            cast("NaN" as double) as nan,
            cast("-inf" as double) as neg_inf]
[labels=analytic_sum_over_range_between_preceding]
[required_features=ANALYTIC_FUNCTIONS,V_1_3_NULLS_FIRST_LAST_IN_ORDER_BY]
SELECT double_val, int64_val,
       SUM(int64_val) OVER (ORDER BY double_val NULLS LAST
                            RANGE BETWEEN @offset_val PRECEDING AND CURRENT ROW)

FROM (SELECT null double_val, 2048 int64_val UNION ALL
      SELECT 2, 1 UNION ALL
      SELECT 1, 2 UNION ALL
      SELECT @nan, 4 UNION ALL
      SELECT @nan, 8 UNION ALL
      SELECT 2, 16 UNION ALL
      SELECT @neg_inf, 32 UNION ALL
      SELECT null, 64 UNION ALL
      SELECT 1, 128 UNION ALL
      SELECT @nan, 256 UNION ALL
      SELECT 3, 512 UNION ALL
      SELECT @neg_inf, 1024)
--
ARRAY<STRUCT<double_val DOUBLE, int64_val INT64, INT64>>[
  {nan, 256, 268},
  {nan, 4, 268},
  {nan, 8, 268},
  {-inf, 32, 1056},
  {-inf, 1024, 1056},
  {1, 128, 1186},
  {1, 2, 1186},
  {2, 16, 1203},
  {2, 1, 1203},
  {3, 512, 1715},
  {NULL, 2048, 2112},
  {NULL, 64, 2112}
]
==

[name=analytic_sum_range_preceding_preceding_infinite_orderby_bool_nulls_last]
[parameters=IEEE_DIVIDE(1, 0) as offset_val,
            cast("NaN" as double) as nan,
            cast("-inf" as double) as neg_inf]
[labels=analytic_sum_over_range_between_preceding]
[required_features=ANALYTIC_FUNCTIONS,V_1_3_NULLS_FIRST_LAST_IN_ORDER_BY]
SELECT double_val, int64_val,
       SUM(int64_val) OVER (ORDER BY double_val NULLS LAST
                            RANGE BETWEEN 2 PRECEDING AND @offset_val PRECEDING)

FROM (SELECT null double_val, 2048 int64_val UNION ALL
      SELECT 2, 1 UNION ALL
      SELECT 1, 2 UNION ALL
      SELECT @nan, 4 UNION ALL
      SELECT @nan, 8 UNION ALL
      SELECT 2, 16 UNION ALL
      SELECT @neg_inf, 32 UNION ALL
      SELECT null, 64 UNION ALL
      SELECT 1, 128 UNION ALL
      SELECT @nan, 256 UNION ALL
      SELECT 3, 512 UNION ALL
      SELECT @neg_inf, 1024)
--
ARRAY<STRUCT<double_val DOUBLE, int64_val INT64, INT64>>[
  {nan, 256, 268},
  {nan, 4, 268},
  {nan, 8, 268},
  {-inf, 32, 1056},
  {-inf, 1024, 1056},
  {1, 128, NULL},
  {1, 2, NULL},
  {2, 16, NULL},
  {2, 1, NULL},
  {3, 512, NULL},
  {NULL, 2048, 2112},
  {NULL, 64, 2112}
]
==

[name=analytic_sum_range_preceding_infinite_orderby_bool_nulls_first]
[parameters=IEEE_DIVIDE(1, 0) as offset_val,
            cast("NaN" as double) as nan,
            cast("inf" as double) as inf]
[labels=analytic_sum_over_range_between_preceding]
[required_features=ANALYTIC_FUNCTIONS,V_1_3_NULLS_FIRST_LAST_IN_ORDER_BY]
SELECT double_val, int64_val,
       SUM(int64_val) OVER (ORDER BY double_val DESC NULLS FIRST
                            RANGE BETWEEN @offset_val PRECEDING AND CURRENT ROW)

FROM (SELECT null double_val, 2048 int64_val UNION ALL
      SELECT 2, 1 UNION ALL
      SELECT 1, 2 UNION ALL
      SELECT @nan, 4 UNION ALL
      SELECT @nan, 8 UNION ALL
      SELECT 2, 16 UNION ALL
      SELECT @inf, 32 UNION ALL
      SELECT null, 64 UNION ALL
      SELECT 1, 128 UNION ALL
      SELECT @nan, 256 UNION ALL
      SELECT 3, 512 UNION ALL
      SELECT @inf, 1024)
--
ARRAY<STRUCT<double_val DOUBLE, int64_val INT64, INT64>>[
  {NULL, 2048, 2112},
  {NULL, 64, 2112},
  {inf, 32, 1056},
  {inf, 1024, 1056},
  {3, 512, 1568},
  {2, 16, 1585},
  {2, 1, 1585},
  {1, 128, 1715},
  {1, 2, 1715},
  {nan, 256, 268},
  {nan, 4, 268},
  {nan, 8, 268}
]
==

[name=analytic_sum_range_preceding_preceding_infinite_orderby_bool_nulls_first]
[parameters=IEEE_DIVIDE(1, 0) as offset_val,
            cast("NaN" as double) as nan,
            cast("inf" as double) as inf]
[labels=analytic_sum_over_range_between_preceding]
[required_features=ANALYTIC_FUNCTIONS,V_1_3_NULLS_FIRST_LAST_IN_ORDER_BY]
SELECT double_val, int64_val,
       SUM(int64_val) OVER (ORDER BY double_val DESC NULLS FIRST
                            RANGE BETWEEN 2 PRECEDING AND @offset_val PRECEDING)

FROM (SELECT null double_val, 2048 int64_val UNION ALL
      SELECT 2, 1 UNION ALL
      SELECT 1, 2 UNION ALL
      SELECT @nan, 4 UNION ALL
      SELECT @nan, 8 UNION ALL
      SELECT 2, 16 UNION ALL
      SELECT @inf, 32 UNION ALL
      SELECT null, 64 UNION ALL
      SELECT 1, 128 UNION ALL
      SELECT @nan, 256 UNION ALL
      SELECT 3, 512 UNION ALL
      SELECT @inf, 1024)
--
ARRAY<STRUCT<double_val DOUBLE, int64_val INT64, INT64>>[
  {NULL, 2048, 2112},
  {NULL, 64, 2112},
  {inf, 32, 1056},
  {inf, 1024, 1056},
  {3, 512, NULL},
  {2, 16, NULL},
  {2, 1, NULL},
  {1, 128, NULL},
  {1, 2, NULL},
  {nan, 256, 268},
  {nan, 4, 268},
  {nan, 8, 268}
]
==

[name=analytic_sum_range_following_infinite_orderby_bool_nulls_last]
[parameters=IEEE_DIVIDE(1, 0) as offset_val,
            cast("NaN" as double) as nan,
            cast("inf" as double) as inf]
[labels=analytic_sum_over_range_between_preceding]
[required_features=ANALYTIC_FUNCTIONS,V_1_3_NULLS_FIRST_LAST_IN_ORDER_BY]
SELECT double_val, int64_val,
       SUM(int64_val) OVER (ORDER BY double_val ASC NULLS LAST
                            RANGE BETWEEN CURRENT ROW AND @offset_val FOLLOWING)

FROM (SELECT null double_val, 2048 int64_val UNION ALL
      SELECT 2, 1 UNION ALL
      SELECT 1, 2 UNION ALL
      SELECT @nan, 4 UNION ALL
      SELECT @nan, 8 UNION ALL
      SELECT 2, 16 UNION ALL
      SELECT @inf, 32 UNION ALL
      SELECT null, 64 UNION ALL
      SELECT 1, 128 UNION ALL
      SELECT @nan, 256 UNION ALL
      SELECT 3, 512 UNION ALL
      SELECT @inf, 1024)
--
ARRAY<STRUCT<double_val DOUBLE, int64_val INT64, INT64>>[
  {nan, 256, 268},
  {nan, 4, 268},
  {nan, 8, 268},
  {1, 128, 1715},
  {1, 2, 1715},
  {2, 16, 1585},
  {2, 1, 1585},
  {3, 512, 1568},
  {inf, 32, 1056},
  {inf, 1024, 1056},
  {NULL, 2048, 2112},
  {NULL, 64, 2112}
]
==

[name=analytic_sum_range_following_following_infinite_orderby_bool_nulls_last]
[parameters=IEEE_DIVIDE(1, 0) as offset_val,
            cast("NaN" as double) as nan,
            cast("inf" as double) as inf]
[labels=analytic_sum_over_range_between_preceding]
[required_features=ANALYTIC_FUNCTIONS,V_1_3_NULLS_FIRST_LAST_IN_ORDER_BY]
SELECT double_val, int64_val,
       SUM(int64_val) OVER (ORDER BY double_val ASC NULLS LAST
                            RANGE BETWEEN @offset_val FOLLOWING AND 2 FOLLOWING)

FROM (SELECT null double_val, 2048 int64_val UNION ALL
      SELECT 2, 1 UNION ALL
      SELECT 1, 2 UNION ALL
      SELECT @nan, 4 UNION ALL
      SELECT @nan, 8 UNION ALL
      SELECT 2, 16 UNION ALL
      SELECT @inf, 32 UNION ALL
      SELECT null, 64 UNION ALL
      SELECT 1, 128 UNION ALL
      SELECT @nan, 256 UNION ALL
      SELECT 3, 512 UNION ALL
      SELECT @inf, 1024)
--
ARRAY<STRUCT<double_val DOUBLE, int64_val INT64, INT64>>[
  {nan, 256, 268},
  {nan, 4, 268},
  {nan, 8, 268},
  {1, 128, NULL},
  {1, 2, NULL},
  {2, 16, NULL},
  {2, 1, NULL},
  {3, 512, NULL},
  {inf, 32, 1056},
  {inf, 1024, 1056},
  {NULL, 2048, 2112},
  {NULL, 64, 2112}
]
==

[name=analytic_sum_range_following_infinite_orderby_bool_nulls_first]
[parameters=IEEE_DIVIDE(1, 0) as offset_val,
            cast("NaN" as double) as nan,
            cast("-inf" as double) as neg_inf]
[labels=analytic_sum_over_range_between_following]
[required_features=ANALYTIC_FUNCTIONS,V_1_3_NULLS_FIRST_LAST_IN_ORDER_BY]
SELECT double_val, int64_val,
       SUM(int64_val) OVER (ORDER BY double_val DESC NULLS FIRST
                            RANGE BETWEEN CURRENT ROW AND @offset_val FOLLOWING)

FROM (SELECT null double_val, 2048 int64_val UNION ALL
      SELECT 2, 1 UNION ALL
      SELECT 1, 2 UNION ALL
      SELECT @nan, 4 UNION ALL
      SELECT @nan, 8 UNION ALL
      SELECT 2, 16 UNION ALL
      SELECT @neg_inf, 32 UNION ALL
      SELECT null, 64 UNION ALL
      SELECT 1, 128 UNION ALL
      SELECT @nan, 256 UNION ALL
      SELECT 3, 512 UNION ALL
      SELECT @neg_inf, 1024)
--
ARRAY<STRUCT<double_val DOUBLE, int64_val INT64, INT64>>[
  {NULL, 2048, 2112},
  {NULL, 64, 2112},
  {3, 512, 1715},
  {2, 16, 1203},
  {2, 1, 1203},
  {1, 128, 1186},
  {1, 2, 1186},
  {-inf, 32, 1056},
  {-inf, 1024, 1056},
  {nan, 256, 268},
  {nan, 4, 268},
  {nan, 8, 268}
]
==

[name=analytic_sum_range_following_following_infinite_orderby_bool_nulls_first]
[parameters=IEEE_DIVIDE(1, 0) as offset_val,
            cast("NaN" as double) as nan,
            cast("-inf" as double) as neg_inf]
[labels=analytic_sum_over_range_between_following]
[required_features=ANALYTIC_FUNCTIONS,V_1_3_NULLS_FIRST_LAST_IN_ORDER_BY]
SELECT double_val, int64_val,
       SUM(int64_val) OVER (ORDER BY double_val DESC NULLS FIRST
                            RANGE BETWEEN @offset_val FOLLOWING AND 2 FOLLOWING)

FROM (SELECT null double_val, 2048 int64_val UNION ALL
      SELECT 2, 1 UNION ALL
      SELECT 1, 2 UNION ALL
      SELECT @nan, 4 UNION ALL
      SELECT @nan, 8 UNION ALL
      SELECT 2, 16 UNION ALL
      SELECT @neg_inf, 32 UNION ALL
      SELECT null, 64 UNION ALL
      SELECT 1, 128 UNION ALL
      SELECT @nan, 256 UNION ALL
      SELECT 3, 512 UNION ALL
      SELECT @neg_inf, 1024)
--
ARRAY<STRUCT<double_val DOUBLE, int64_val INT64, INT64>>[
  {NULL, 2048, 2112},
  {NULL, 64, 2112},
  {3, 512, NULL},
  {2, 16, NULL},
  {2, 1, NULL},
  {1, 128, NULL},
  {1, 2, NULL},
  {-inf, 32, 1056},
  {-inf, 1024, 1056},
  {nan, 256, 268},
  {nan, 4, 268},
  {nan, 8, 268}
]
==

[name=analytic_sum_range_orderby_multi_keys]
[labels=analytic_sum_over_range_between_current_and_unbounded]

SELECT bool_val, int64_val,
       SUM(int64_val) OVER (ORDER BY bool_val, int64_val
                            RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)

FROM TestTable
--
ARRAY<STRUCT<bool_val BOOL, int64_val INT64, INT64>>[
  {NULL, NULL, 16},
  {false, 1, 16},
  {false, 1, 16},
  {false, 1, 16},
  {false, 2, 13},
  {true, NULL, 11},
  {true, 2, 11},
  {true, 2, 11},
  {true, 3, 7},
  {true, 4, 4}
]
==

[name=analytic_sum_range_orderby_multi_keys_different_sort_order]
[labels=analytic_sum_over_range_between_current_and_unbounded]

SELECT bool_val, int64_val,
       SUM(int64_val) OVER (ORDER BY bool_val ASC, int64_val DESC
                            RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)

FROM TestTable
--
ARRAY<STRUCT<bool_val BOOL, int64_val INT64, INT64>>[
  {NULL, NULL, 16},
  {false, 2, 16},
  {false, 1, 14},
  {false, 1, 14},
  {false, 1, 14},
  {true, 4, 11},
  {true, 3, 7},
  {true, 2, 4},
  {true, 2, 4},
  {true, NULL, NULL}
]
==

[name=analytic_sum_range_orderby_bool_zero_offset]
[labels=analytic_sum_over_range_between_preceding_and_unbounded]

SELECT bool_val, int64_val,
       SUM(int64_val) OVER (ORDER BY bool_val
                            RANGE BETWEEN 0 PRECEDING AND UNBOUNDED FOLLOWING)

FROM TestTable
--
ERROR: generic::invalid_argument: ORDER BY key must be numeric in a RANGE-based window with OFFSET PRECEDING or OFFSET FOLLOWING boundaries, but has type BOOL [at 2:29]
       SUM(int64_val) OVER (ORDER BY bool_val
                            ^
==

[name=analytic_sum_range_orderby_bool_non_zero_offset]
[labels=analytic_sum_over_range_between_unbounded_and_following]
SELECT bool_val, int64_val,
       SUM(int64_val) OVER (ORDER BY bool_val
                            RANGE BETWEEN UNBOUNDED PRECEDING AND 4 FOLLOWING)
FROM TestTable
--
ERROR: generic::invalid_argument: ORDER BY key must be numeric in a RANGE-based window with OFFSET PRECEDING or OFFSET FOLLOWING boundaries, but has type BOOL [at 2:29]
       SUM(int64_val) OVER (ORDER BY bool_val
                            ^
==

[name=analytic_sum_double_nan_and_inf_unbounded]
[labels=analytic_sum_with_unbounded_window]
[parameters=cast("NaN" as double) as nan,
            cast("+inf" as double) as pos_inf,
            cast("-inf" as double) as neg_inf]
SELECT partition_id, val, SUM(val) OVER (PARTITION BY partition_id)
FROM (SELECT 1 partition_id, @nan val UNION ALL
      SELECT 1, @nan UNION ALL
      SELECT 1, NULL UNION ALL
      SELECT 2, 2 UNION ALL
      SELECT 2, @nan UNION ALL
      SELECT 3, @pos_inf UNION ALL
      SELECT 3, @nan UNION ALL
      SELECT 4, @neg_inf UNION ALL
      SELECT 4, @nan UNION ALL
      SELECT 5, @neg_inf UNION ALL
      SELECT 5, 2 UNION ALL
      SELECT 5, NULL UNION ALL
      SELECT 6, @pos_inf UNION ALL
      SELECT 6, 2 UNION ALL
      SELECT 6, NULL UNION ALL
      SELECT 7, @pos_inf UNION ALL
      SELECT 7, @neg_inf)
--
ARRAY<STRUCT<partition_id INT64, val DOUBLE, DOUBLE>>[
  {1, nan, nan},
  {1, nan, nan},
  {1, NULL, nan},
  {2, nan, nan},
  {2, 2, nan},
  {3, nan, nan},
  {3, inf, nan},
  {4, nan, nan},
  {4, -inf, nan},
  {5, NULL, -inf},
  {5, -inf, -inf},
  {5, 2, -inf},
  {6, inf, inf},
  {6, 2, inf},
  {6, NULL, inf},
  {7, -inf, nan},
  {7, inf, nan}
]
==

[name=analytic_sum_distinct_no_overflow_general]
SELECT bool_val, row_id, int64_val, double_val,
       SUM(DISTINCT int64_val) OVER (PARTITION BY bool_val),
       SUM(DISTINCT uint64_val) OVER (PARTITION BY bool_val),
       SUM(DISTINCT double_val) OVER ()
FROM TestTable
--
ARRAY<STRUCT<bool_val BOOL,
             row_id INT64,
             int64_val INT64,
             double_val DOUBLE,
             INT64,
             UINT64,
             DOUBLE>>
[
  {NULL, 1, NULL, NULL, NULL, NULL, 5.5},
  {false, 5, 1, 3.5, 3, 14, 5.5},
  {false, 3, 1, 1.5, 3, 14, 5.5},
  {false, 9, 2, 1.5, 3, 14, 5.5},
  {false, 7, 1, -0.5, 3, 14, 5.5},
  {true, 4, NULL, 2.5, 9, 6, 5.5},
  {true, 2, 2, 1.5, 9, 6, 5.5},
  {true, 10, 3, 2.5, 9, 6, 5.5},
  {true, 8, 4, -1.5, 9, 6, 5.5},
  {true, 6, 2, NULL, 9, 6, 5.5}
]
==

# The same as above but with NUMERIC type in all columns
[name=analytic_sum_distinct_no_overflow_numeric]
[required_features=ANALYTIC_FUNCTIONS,NUMERIC_TYPE]
SELECT bool_val, row_id, numeric_val1, numeric_val3,
       SUM(DISTINCT numeric_val1) OVER (PARTITION BY bool_val),
       SUM(DISTINCT numeric_val2) OVER (PARTITION BY bool_val),
       SUM(DISTINCT numeric_val3) OVER ()
FROM (select row_id,
             bool_val,
             cast(int64_val as NUMERIC) as numeric_val1,
             cast(uint64_val as NUMERIC) as numeric_val2,
             cast(double_val as NUMERIC) as numeric_val3
      from TestTable)
ORDER BY 1, 2
--
ARRAY<STRUCT<bool_val BOOL,
             row_id INT64,
             numeric_val1 NUMERIC,
             numeric_val3 NUMERIC,
             NUMERIC,
             NUMERIC,
             NUMERIC>>
[
  {NULL, 1, NULL, NULL, NULL, NULL, 5.5},
  {false, 3, 1, 1.5, 3, 14, 5.5},
  {false, 5, 1, 3.5, 3, 14, 5.5},
  {false, 7, 1, -0.5, 3, 14, 5.5},
  {false, 9, 2, 1.5, 3, 14, 5.5},
  {true, 2, 2, 1.5, 9, 6, 5.5},
  {true, 4, NULL, 2.5, 9, 6, 5.5},
  {true, 6, 2, NULL, 9, 6, 5.5},
  {true, 8, 4, -1.5, 9, 6, 5.5},
  {true, 10, 3, 2.5, 9, 6, 5.5}
]
==

[name=analytic_sum_distinct_no_overflow_int64_1]
[parameters=9223372036854775807 as max_val]
SELECT row_id, val, SUM(DISTINCT val) OVER ()
FROM (SELECT 1 row_id, @max_val val UNION ALL
      SELECT 2, @max_val)
--
ARRAY<STRUCT<row_id INT64, val INT64, INT64>>[
  {2, 9223372036854775807, 9223372036854775807},
  {1, 9223372036854775807, 9223372036854775807}
]
==

[name=analytic_sum_distinct_no_overflow_int64_2]
[parameters=-9223372036854775808 as min_val]
SELECT row_id, val, SUM(DISTINCT val) OVER ()
FROM (SELECT 1 row_id, @min_val val UNION ALL
      SELECT 2, @min_val)
--
ARRAY<STRUCT<row_id INT64, val INT64, INT64>>[
  {2, -9223372036854775808, -9223372036854775808},
  {1, -9223372036854775808, -9223372036854775808}
]
==

[name=analytic_sum_distinct_overflow_int64_1]
[parameters=9223372036854775807 as max_val]
SELECT row_id, val, SUM(DISTINCT val) OVER ()
FROM (SELECT 1 row_id, @max_val val UNION ALL
      SELECT 2, 2)
--
ERROR: generic::out_of_range: int64 overflow
==

[name=analytic_sum_distinct_overflow_int64_2]
[parameters=-9223372036854775808 as min_val]
SELECT row_id, val, SUM(DISTINCT val) OVER ()
FROM (SELECT 1 row_id, @min_val val UNION ALL
      SELECT 2, -2)
--
ERROR: generic::out_of_range: int64 overflow
==

[name=analytic_sum_distinct_no_overflow_uint64]
[parameters=18446744073709551615 as max_val]
SELECT row_id, val, SUM(DISTINCT val) OVER ()
FROM (SELECT 1 row_id, @max_val val UNION ALL
      SELECT 2, @max_val)
--
ARRAY<STRUCT<row_id INT64, val UINT64, UINT64>>[
  {2, 18446744073709551615, 18446744073709551615},
  {1, 18446744073709551615, 18446744073709551615}
]
==

[name=analytic_sum_distinct_overflow_uint64]
[parameters=18446744073709551615 as max_val]
SELECT row_id, val, SUM(DISTINCT val) OVER ()
FROM (SELECT 1 row_id, @max_val val UNION ALL
      SELECT 2, 2)
--
ERROR: generic::out_of_range: uint64 overflow
==

[name=analytic_sum_distinct_no_overflow_double_1]
[parameters=1.79769e+308 as max_val]
SELECT row_id, val, SUM(DISTINCT val) OVER ()
FROM (SELECT 1 row_id, @max_val val UNION ALL
      SELECT 2, @max_val)
--
ARRAY<STRUCT<row_id INT64, val DOUBLE, DOUBLE>>[
  {2, 1.79769e+308, 1.79769e+308},
  {1, 1.79769e+308, 1.79769e+308}
]
==

[name=analytic_sum_distinct_no_overflow_double_2]
[parameters=-1.79769e+308 as min_val]
SELECT row_id, val, SUM(DISTINCT val) OVER ()
FROM (SELECT 1 row_id, @min_val val UNION ALL
      SELECT 2, @min_val)
--
ARRAY<STRUCT<row_id INT64, val DOUBLE, DOUBLE>>[
  {2, -1.79769e+308, -1.79769e+308},
  {1, -1.79769e+308, -1.79769e+308}
]
==

[name=analytic_sum_distinct_overflow_double_1]
[parameters=1.79769e+308 as max_val]
SELECT row_id, val, SUM(DISTINCT val) OVER ()
FROM (SELECT 1 row_id, @max_val val UNION ALL
      SELECT 2, 1.79769e+307)
--
ERROR: generic::out_of_range: double overflow
==

[name=analytic_sum_distinct_overflow_double_2]
[parameters=-1.79769e+308 as min_val]
SELECT row_id, val, SUM(DISTINCT val) OVER ()
FROM (SELECT 1 row_id, @min_val val UNION ALL
      SELECT 2, -1.79769e+307)
--
ERROR: generic::out_of_range: double overflow
==

[name=analytic_sum_distinct_no_overflow_numeric_1]
[required_features=ANALYTIC_FUNCTIONS,NUMERIC_TYPE]
[parameters="99999999999999999999999999999.999999999" as max_val]
SELECT row_id, val, SUM(DISTINCT val) OVER ()
FROM (SELECT 1 row_id, CAST(@max_val as NUMERIC) val UNION ALL
      SELECT 2, CAST(@max_val as NUMERIC))
--
ARRAY<STRUCT<row_id INT64, val NUMERIC, NUMERIC>>[
  {
    2,
    99999999999999999999999999999.999999999,
    99999999999999999999999999999.999999999
  },
  {
    1,
    99999999999999999999999999999.999999999,
    99999999999999999999999999999.999999999
  }
]
==

[name=analytic_sum_distinct_no_overflow_numeric_2]
[required_features=ANALYTIC_FUNCTIONS,NUMERIC_TYPE]
[parameters="-99999999999999999999999999999.999999999" as min_val]
SELECT row_id, val, SUM(DISTINCT val) OVER ()
FROM (SELECT 1 row_id, CAST(NULL as NUMERIC) val UNION ALL
      SELECT 2, 0                         UNION ALL
      SELECT 3, NULL                      UNION ALL
      SELECT 4, CAST(@min_val AS NUMERIC) UNION ALL
      SELECT 5, -2                        UNION ALL
      SELECT 6, 1.999999999               UNION ALL
      SELECT 7, CAST(@min_val AS NUMERIC) UNION ALL
      SELECT 8, 2)
--
ARRAY<STRUCT<row_id INT64, val NUMERIC, NUMERIC>>[
  {
    2,
    0,
    -99999999999999999999999999998
  },
  {
    4,
    -99999999999999999999999999999.999999999,
    -99999999999999999999999999998
  },
  {
    6,
    1.999999999,
    -99999999999999999999999999998
  },
  {
    8,
    2,
    -99999999999999999999999999998
  },
  {
    1,
    NULL,
    -99999999999999999999999999998
  },
  {
    3,
    NULL,
    -99999999999999999999999999998
  },
  {
    5,
    -2,
    -99999999999999999999999999998
  },
  {
    7,
    -99999999999999999999999999999.999999999,
    -99999999999999999999999999998
  }
]
==

# Functional tests for ROWS BETWEEN <offset> PRECEDING and CURRENT ROW.
[name=analytic_sum_rows_between_preceding_and_current_1]
[labels=analytic_sum_over_rows_between_preceding_and_current]
select row_id, val, sum(val) over (order by row_id ROWS 1 PRECEDING)
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 4, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val INT64, INT64>>[
  {1, NULL, NULL},
  {2, 2, 2},
  {3, 3, 5},
  {4, 4, 7}
]
==

# With offset = 0 each tuple is its own window.
[name=analytic_sum_rows_between_preceding_and_current_2]
[labels=analytic_sum_over_rows_between_preceding_and_current]
select row_id, val, sum(val) over (order by row_id ROWS 0 PRECEDING)
FROM (SELECT 2 row_id, 3 val UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, 2            UNION ALL
      SELECT 3, 5            UNION ALL
      SELECT 4, 6            UNION ALL
      SELECT 4, 2            UNION ALL
      SELECT 4, 7            UNION ALL
      SELECT 2, 4)
order by row_id, val
--
ARRAY<STRUCT<row_id INT64, val INT64, INT64>>[
  {1, NULL, NULL},
  {2, 2, 2},
  {2, 3, 3},
  {2, 4, 4},
  {3, 5, 5},
  {4, 2, 2},
  {4, 6, 6},
  {4, 7, 7}
]
==

# Some rows have NULL values in their windows, some have all NULL
# values, and some have no NULL values.
[name=analytic_sum_rows_between_preceding_and_current_3a]
[labels=analytic_sum_over_rows_between_preceding_and_current]
select row_id, val,
       sum(val) over (order by row_id ROWS 1 PRECEDING)
FROM (SELECT 21 row_id, 10 val     UNION ALL
      SELECT 40, NULL              UNION ALL
      SELECT 12, NULL              UNION ALL
      SELECT NULL, NULL            UNION ALL
      SELECT 22, 20                UNION ALL
      SELECT 30, NULL              UNION ALL
      SELECT 20, NULL              UNION ALL
      SELECT 41, 40                UNION ALL
      SELECT 11, NULL              UNION ALL
      SELECT 50, -40               UNION ALL
      SELECT 60, 100)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val INT64, INT64>>[
  {NULL, NULL, NULL},
  {11, NULL, NULL},
  {12, NULL, NULL},
  {20, NULL, NULL},
  {21, 10, 10},
  {22, 20, 30},
  {30, NULL, 20},
  {40, NULL, NULL},
  {41, 40, 40},
  {50, -40, 0},
  {60, 100, 60}
]
==

# Same as previous, but DESC.
[name=analytic_sum_rows_between_preceding_and_current_3b]
[labels=analytic_sum_over_rows_between_preceding_and_current]
select row_id, val,
       sum(val) over (order by row_id DESC ROWS 1 PRECEDING)
FROM (SELECT 21 row_id, 10 val     UNION ALL
      SELECT 40, NULL              UNION ALL
      SELECT 12, NULL              UNION ALL
      SELECT NULL, NULL            UNION ALL
      SELECT 22, 20                UNION ALL
      SELECT 30, NULL              UNION ALL
      SELECT 20, NULL              UNION ALL
      SELECT 41, 40                UNION ALL
      SELECT 11, NULL              UNION ALL
      SELECT 50, -40               UNION ALL
      SELECT 60, 100)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val INT64, INT64>>[
  {NULL, NULL, NULL},
  {11, NULL, NULL},
  {12, NULL, NULL},
  {20, NULL, 10},
  {21, 10, 30},
  {22, 20, 20},
  {30, NULL, NULL},
  {40, NULL, 40},
  {41, 40, 0},
  {50, -40, 60},
  {60, 100, 100}
]
==

# Same as previous, but with offset 3.
[name=analytic_sum_rows_between_preceding_and_current_3c]
[labels=analytic_sum_over_rows_between_preceding_and_current]
select row_id, val,
       sum(val) over (order by row_id DESC ROWS 3 PRECEDING)
FROM (SELECT 21 row_id, 10 val     UNION ALL
      SELECT 40, NULL              UNION ALL
      SELECT 12, NULL              UNION ALL
      SELECT NULL, NULL            UNION ALL
      SELECT 22, 20                UNION ALL
      SELECT 30, NULL              UNION ALL
      SELECT 20, NULL              UNION ALL
      SELECT 41, 40                UNION ALL
      SELECT 11, NULL              UNION ALL
      SELECT 50, -40               UNION ALL
      SELECT 60, 100)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val INT64, INT64>>[
  {NULL, NULL, NULL},
  {11, NULL, 10},
  {12, NULL, 30},
  {20, NULL, 30},
  {21, 10, 30},
  {22, 20, 60},
  {30, NULL, 0},
  {40, NULL, 100},
  {41, 40, 100},
  {50, -40, 60},
  {60, 100, 100}
]
==

[name=analytic_sum_rows_between_preceding_and_current_4]
[labels=analytic_sum_over_rows_between_preceding_and_current]
[parameters=9223372036854775807 as int64_max, -9223372036854775808 as int64_min]
select row_id, val,
       sum(val) over (order by row_id
                      ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)
FROM (SELECT 1 row_id, @int64_max val UNION ALL
      SELECT 2, @int64_min            UNION ALL
      SELECT 3, @int64_max            UNION ALL
      SELECT 4, -2                    UNION ALL
      SELECT 5, 1                     UNION ALL
      SELECT 6, @int64_min            UNION ALL
      SELECT 7, 5                     UNION ALL
      SELECT 8, @int64_min            UNION ALL
      SELECT 9, @int64_max            UNION ALL
      SELECT 10, @int64_min           UNION ALL
      SELECT 11, 1                    UNION ALL
      SELECT 12, 0                    UNION ALL
      SELECT 13, @int64_max           UNION ALL
      SELECT 14, 0                    UNION ALL
      SELECT 15, @int64_max)
order by row_id, val
--
ARRAY<STRUCT<row_id INT64, val INT64, INT64>>[
  {1, 9223372036854775807, 9223372036854775807},
  {2, -9223372036854775808, -1},
  {3, 9223372036854775807, -1},
  {4, -2, 9223372036854775805},
  {5, 1, -1},
  {6, -9223372036854775808, -9223372036854775807},
  {7, 5, -9223372036854775803},
  {8, -9223372036854775808, -9223372036854775803},
  {9, 9223372036854775807, -1},
  {10, -9223372036854775808, -1},
  {11, 1, -9223372036854775807},
  {12, 0, 1},
  {13, 9223372036854775807, 9223372036854775807},
  {14, 0, 9223372036854775807},
  {15, 9223372036854775807, 9223372036854775807}
]
==

# SUM of UINT64 values.
[name=analytic_sum_rows_between_preceding_and_current_5]
[labels=analytic_sum_over_rows_between_preceding_and_current]
[parameters=18446744073709551615 as uint64_max]
select row_id, val,
       sum(val) over (order by row_id
                      ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)
FROM (SELECT 1 row_id, 0 val          UNION ALL
      SELECT 2, NULL                  UNION ALL
      SELECT 3, @uint64_max           UNION ALL
      SELECT 4, 0                     UNION ALL
      SELECT 5, 18446744073709551613  UNION ALL
      SELECT 6, 2                     UNION ALL
      SELECT 7, 3                     UNION ALL
      SELECT 8, 0                     UNION ALL
      SELECT 9, @uint64_max           UNION ALL
      SELECT null, @uint64_max)
order by row_id, val
--
ARRAY<STRUCT<row_id INT64, val UINT64, UINT64>>[
  {NULL, 18446744073709551615, 18446744073709551615},
  {1, 0, 18446744073709551615},
  {2, NULL, 0},
  {3, 18446744073709551615, 18446744073709551615},
  {4, 0, 18446744073709551615},
  {5, 18446744073709551613, 18446744073709551613},
  {6, 2, 18446744073709551615},
  {7, 3, 5},
  {8, 0, 3},
  {9, 18446744073709551615, 18446744073709551615}
]
==

# SUM of DOUBLE values.
[name=analytic_sum_rows_between_preceding_and_current_6]
[labels=analytic_sum_over_rows_between_preceding_and_current]
[parameters=1.79769e+308 as double_max, -1.79769e+308 as double_min]
select row_id, val,
       sum(val) over (order by row_id
                      ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)
FROM (SELECT 1 row_id, @double_max val UNION ALL
      SELECT 2, @double_min            UNION ALL
      SELECT 3, @double_max            UNION ALL
      SELECT 4, -2                     UNION ALL
      SELECT 5, @double_min            UNION ALL
      SELECT 6, 3                      UNION ALL
      SELECT 7, @double_max            UNION ALL
      SELECT 8, @double_min            UNION ALL
      SELECT 9, @double_max            UNION ALL
      SELECT 10, @double_min           UNION ALL
      SELECT 11, 1                     UNION ALL
      SELECT 12, @double_min           UNION ALL
      SELECT 13, 4                     UNION ALL
      SELECT 14, -555)
order by row_id, val
--
ARRAY<STRUCT<row_id INT64, val DOUBLE, DOUBLE>>[
  {1, 1.79769e+308, 1.79769e+308},
  {2, -1.79769e+308, 0},
  {3, 1.79769e+308, 0},
  {4, -2, 1.79769e+308},
  {5, -1.79769e+308, -1.79769e+308},
  {6, 3, -1.79769e+308},
  {7, 1.79769e+308, 1.79769e+308},
  {8, -1.79769e+308, 0},
  {9, 1.79769e+308, 0},
  {10, -1.79769e+308, 0},
  {11, 1, -1.79769e+308},
  {12, -1.79769e+308, -1.79769e+308},
  {13, 4, -1.79769e+308},
  {14, -555, -551}
]
==

[name=analytic_sum_range_unbounded_and_following_0]
[labels=analytic_sum_over_range_between_unbounded_and_following]
[parameters=cast("NaN" as double) as nan,
            cast("+inf" as double) as pos_inf,
            cast("-inf" as double) as neg_inf]
SELECT row_id, val,
       SUM(val) OVER (ORDER BY row_id
                      RANGE BETWEEN UNBOUNDED PRECEDING AND 0 FOLLOWING),
       SUM(val) OVER (ORDER BY row_id
                      RANGE BETWEEN UNBOUNDED PRECEDING AND 1 FOLLOWING),
       SUM(val) OVER (ORDER BY row_id
                      RANGE BETWEEN UNBOUNDED PRECEDING AND 2 FOLLOWING),
       SUM(val) OVER (ORDER BY row_id
                      RANGE BETWEEN UNBOUNDED PRECEDING AND 100 FOLLOWING)
FROM (SELECT null row_id, 1 val UNION ALL
      SELECT 2, 2 UNION ALL
      SELECT 1, 3 UNION ALL
      SELECT @nan, 4 UNION ALL
      SELECT @pos_inf, 5 UNION ALL
      SELECT @nan, 6 UNION ALL
      SELECT @pos_inf, 7 UNION ALL
      SELECT 9, 9 UNION ALL
      SELECT 2, 8 UNION ALL
      SELECT @neg_inf, 9 UNION ALL
      SELECT 5, 9 UNION ALL
      SELECT 5, 9 UNION ALL
      SELECT null, 10 UNION ALL
      SELECT 1, 11 UNION ALL
      SELECT @nan, 12 UNION ALL
      SELECT 1, 11 UNION ALL
      SELECT 3, 13 UNION ALL
      SELECT 5, 9 UNION ALL
      SELECT @neg_inf, 14)
--
ARRAY<STRUCT<row_id DOUBLE, val INT64, INT64, INT64, INT64, INT64>>[
  {NULL, 1, 11, 11, 11, 11},
  {NULL, 10, 11, 11, 11, 11},
  {nan, 4, 33, 33, 33, 33},
  {nan, 6, 33, 33, 33, 33},
  {nan, 12, 33, 33, 33, 33},
  {-inf, 14, 56, 56, 56, 56},
  {-inf, 9, 56, 56, 56, 56},
  {1, 11, 81, 91, 104, 140},
  {1, 3, 81, 91, 104, 140},
  {1, 11, 81, 91, 104, 140},
  {2, 2, 91, 104, 104, 140},
  {2, 8, 91, 104, 104, 140},
  {3, 13, 104, 104, 131, 140},
  {5, 9, 131, 131, 131, 140},
  {5, 9, 131, 131, 131, 140},
  {5, 9, 131, 131, 131, 140},
  {9, 9, 140, 140, 140, 140},
  {inf, 7, 152, 152, 152, 152},
  {inf, 5, 152, 152, 152, 152}
]
==

[name=analytic_sum_range_unbounded_and_following_1]
[labels=analytic_sum_over_range_between_unbounded_and_following]
[parameters=cast("NaN" as double) as nan,
            cast("+inf" as double) as pos_inf,
            cast("-inf" as double) as neg_inf]
SELECT row_id, val,
       SUM(val) OVER (ORDER BY row_id DESC
                      RANGE BETWEEN UNBOUNDED PRECEDING AND 0 FOLLOWING),
       SUM(val) OVER (ORDER BY row_id DESC
                      RANGE BETWEEN UNBOUNDED PRECEDING AND 1 FOLLOWING),
       SUM(val) OVER (ORDER BY row_id DESC
                      RANGE BETWEEN UNBOUNDED PRECEDING AND 2 FOLLOWING),
       SUM(val) OVER (ORDER BY row_id DESC
                      RANGE BETWEEN UNBOUNDED PRECEDING AND 100 FOLLOWING)
FROM (SELECT null row_id, 1 val UNION ALL
      SELECT 2, 2 UNION ALL
      SELECT 1, 3 UNION ALL
      SELECT @nan, 4 UNION ALL
      SELECT @pos_inf, 5 UNION ALL
      SELECT @nan, 6 UNION ALL
      SELECT @pos_inf, 7 UNION ALL
      SELECT 9, 9 UNION ALL
      SELECT 2, 8 UNION ALL
      SELECT @neg_inf, 9 UNION ALL
      SELECT 5, 9 UNION ALL
      SELECT 5, 9 UNION ALL
      SELECT null, 10 UNION ALL
      SELECT 1, 11 UNION ALL
      SELECT @nan, 12 UNION ALL
      SELECT 1, 11 UNION ALL
      SELECT 3, 13 UNION ALL
      SELECT 5, 9 UNION ALL
      SELECT @neg_inf, 14)
--
ARRAY<STRUCT<row_id DOUBLE, val INT64, INT64, INT64, INT64, INT64>>[
  {inf, 5, 12, 12, 12, 12},
  {inf, 7, 12, 12, 12, 12},
  {9, 9, 21, 21, 21, 96},
  {5, 9, 48, 48, 61, 96},
  {5, 9, 48, 48, 61, 96},
  {5, 9, 48, 48, 61, 96},
  {3, 13, 61, 71, 96, 96},
  {2, 8, 71, 96, 96, 96},
  {2, 2, 71, 96, 96, 96},
  {1, 11, 96, 96, 96, 96},
  {1, 3, 96, 96, 96, 96},
  {1, 11, 96, 96, 96, 96},
  {-inf, 9, 119, 119, 119, 119},
  {-inf, 14, 119, 119, 119, 119},
  {nan, 4, 141, 141, 141, 141},
  {nan, 6, 141, 141, 141, 141},
  {nan, 12, 141, 141, 141, 141},
  {NULL, 10, 152, 152, 152, 152},
  {NULL, 1, 152, 152, 152, 152}
]
==

[name=analytic_sum_range_unbounded_and_following_2]
[labels=analytic_sum_over_range_between_unbounded_and_following]
[parameters=9223372036854775807 as int64_max, -9223372036854775808 as int64_min]
SELECT row_id, val,
       SUM(val) OVER (ORDER BY row_id
                      RANGE BETWEEN UNBOUNDED PRECEDING AND 2 FOLLOWING),
       SUM(val) OVER (ORDER BY row_id
                      RANGE BETWEEN UNBOUNDED PRECEDING AND @int64_max FOLLOWING)
FROM (SELECT 1 row_id, null val UNION ALL
      SELECT 2, 3 UNION ALL
      SELECT @int64_max - 2, 4 UNION ALL
      SELECT @int64_max - 2, 5 UNION ALL
      SELECT @int64_max, 6 UNION ALL
      SELECT @int64_max - 3, 10 UNION ALL
      SELECT -1, 7 UNION ALL
      SELECT @int64_min+2, 8 UNION ALL
      SELECT @int64_max, 9 UNION ALL
      SELECT @int64_min, 11 UNION ALL
      SELECT @int64_min+3, 12)
--
ARRAY<STRUCT<row_id INT64, val INT64, INT64, INT64>>[
  {-9223372036854775808, 11, 19, 38},
  {-9223372036854775806, 8, 31, 38},
  {-9223372036854775805, 12, 31, 41},
  {-1, 7, 38, 60},
  {1, NULL, 41, 75},
  {2, 3, 41, 75},
  {9223372036854775804, 10, 60, 75},
  {9223372036854775805, 4, 75, 75},
  {9223372036854775805, 5, 75, 75},
  {9223372036854775807, 9, 75, 75},
  {9223372036854775807, 6, 75, 75}
]
==

[name=analytic_sum_range_unbounded_and_following_3]
[labels=analytic_sum_over_range_between_unbounded_and_following]
[parameters=9223372036854775807 as int64_max, -9223372036854775808 as int64_min]
SELECT row_id, val,
       SUM(val) OVER (ORDER BY row_id DESC
                      RANGE BETWEEN UNBOUNDED PRECEDING AND 2 FOLLOWING),
       SUM(val) OVER (ORDER BY row_id DESC
                      RANGE BETWEEN UNBOUNDED PRECEDING AND @int64_max FOLLOWING)
FROM (SELECT 1 row_id, null val UNION ALL
      SELECT 2, 3 UNION ALL
      SELECT @int64_max - 2, 4 UNION ALL
      SELECT @int64_max - 2, 5 UNION ALL
      SELECT @int64_max, 6 UNION ALL
      SELECT @int64_max - 3, 10 UNION ALL
      SELECT -1, 7 UNION ALL
      SELECT @int64_min+2, 8 UNION ALL
      SELECT @int64_max, 9 UNION ALL
      SELECT @int64_min, 11 UNION ALL
      SELECT @int64_min+3, 12)
--
ARRAY<STRUCT<row_id INT64, val INT64, INT64, INT64>>[
  {9223372036854775807, 6, 24, 37},
  {9223372036854775807, 9, 24, 37},
  {9223372036854775805, 5, 34, 44},
  {9223372036854775805, 4, 34, 44},
  {9223372036854775804, 10, 34, 44},
  {2, 3, 37, 56},
  {1, NULL, 44, 64},
  {-1, 7, 44, 75},
  {-9223372036854775805, 12, 64, 75},
  {-9223372036854775806, 8, 75, 75},
  {-9223372036854775808, 11, 75, 75}
]
==

[name=analytic_sum_range_current_and_following_order_by_double_asc]
[labels=analytic_sum_over_range_between_current_and_following]
[parameters=cast("NaN" as double) as nan,
            cast("+inf" as double) as pos_inf,
            cast("-inf" as double) as neg_inf]
SELECT row_id, val,
       SUM(val) OVER (ORDER BY row_id
                      RANGE BETWEEN CURRENT ROW AND 0 FOLLOWING),
       SUM(val) OVER (ORDER BY row_id
                      RANGE BETWEEN CURRENT ROW AND 1 FOLLOWING),
       SUM(val) OVER (ORDER BY row_id
                      RANGE BETWEEN CURRENT ROW AND 2 FOLLOWING),
       SUM(val) OVER (ORDER BY row_id
                      RANGE BETWEEN CURRENT ROW AND 100 FOLLOWING)
FROM (SELECT null row_id, 1 val UNION ALL
      SELECT 2, 2 UNION ALL
      SELECT 1, 3 UNION ALL
      SELECT @nan, 4 UNION ALL
      SELECT @pos_inf, 5 UNION ALL
      SELECT @nan, 6 UNION ALL
      SELECT @pos_inf, 7 UNION ALL
      SELECT 9, 9 UNION ALL
      SELECT 2, 8 UNION ALL
      SELECT @neg_inf, 9 UNION ALL
      SELECT 5, 9 UNION ALL
      SELECT 5, 9 UNION ALL
      SELECT null, 10 UNION ALL
      SELECT 1, 11 UNION ALL
      SELECT @nan, 12 UNION ALL
      SELECT 1, 11 UNION ALL
      SELECT 3, 13 UNION ALL
      SELECT 5, 9 UNION ALL
      SELECT @neg_inf, 14)
--
ARRAY<STRUCT<row_id DOUBLE, val INT64, INT64, INT64, INT64, INT64>>[
  {NULL, 1, 11, 11, 11, 11},
  {NULL, 10, 11, 11, 11, 11},
  {nan, 4, 22, 22, 22, 22},
  {nan, 6, 22, 22, 22, 22},
  {nan, 12, 22, 22, 22, 22},
  {-inf, 14, 23, 23, 23, 23},
  {-inf, 9, 23, 23, 23, 23},
  {1, 11, 25, 35, 48, 84},
  {1, 3, 25, 35, 48, 84},
  {1, 11, 25, 35, 48, 84},
  {2, 2, 10, 23, 23, 59},
  {2, 8, 10, 23, 23, 59},
  {3, 13, 13, 13, 40, 49},
  {5, 9, 27, 27, 27, 36},
  {5, 9, 27, 27, 27, 36},
  {5, 9, 27, 27, 27, 36},
  {9, 9, 9, 9, 9, 9},
  {inf, 7, 12, 12, 12, 12},
  {inf, 5, 12, 12, 12, 12}
]
==

# Same as the previous one, but in descending order.
[name=analytic_sum_range_current_and_following_order_by_double_desc]
[labels=analytic_sum_over_range_between_current_and_following]
[parameters=cast("NaN" as double) as nan,
            cast("+inf" as double) as pos_inf,
            cast("-inf" as double) as neg_inf]
SELECT row_id, val,
       SUM(val) OVER (ORDER BY row_id DESC
                      RANGE BETWEEN CURRENT ROW AND 0 FOLLOWING),
       SUM(val) OVER (ORDER BY row_id DESC
                      RANGE BETWEEN CURRENT ROW AND 1 FOLLOWING),
       SUM(val) OVER (ORDER BY row_id DESC
                      RANGE BETWEEN CURRENT ROW AND 2 FOLLOWING),
       SUM(val) OVER (ORDER BY row_id DESC
                      RANGE BETWEEN CURRENT ROW AND 100 FOLLOWING)
FROM (SELECT null row_id, 1 val UNION ALL
      SELECT 2, 2 UNION ALL
      SELECT 1, 3 UNION ALL
      SELECT @nan, 4 UNION ALL
      SELECT @pos_inf, 5 UNION ALL
      SELECT @nan, 6 UNION ALL
      SELECT @pos_inf, 7 UNION ALL
      SELECT 9, 9 UNION ALL
      SELECT 2, 8 UNION ALL
      SELECT @neg_inf, 9 UNION ALL
      SELECT 5, 9 UNION ALL
      SELECT 5, 9 UNION ALL
      SELECT null, 10 UNION ALL
      SELECT 1, 11 UNION ALL
      SELECT @nan, 12 UNION ALL
      SELECT 1, 11 UNION ALL
      SELECT 3, 13 UNION ALL
      SELECT 5, 9 UNION ALL
      SELECT @neg_inf, 14)
--
ARRAY<STRUCT<row_id DOUBLE, val INT64, INT64, INT64, INT64, INT64>>[
  {inf, 5, 12, 12, 12, 12},
  {inf, 7, 12, 12, 12, 12},
  {9, 9, 9, 9, 9, 84},
  {5, 9, 27, 27, 40, 75},
  {5, 9, 27, 27, 40, 75},
  {5, 9, 27, 27, 40, 75},
  {3, 13, 13, 23, 48, 48},
  {2, 8, 10, 35, 35, 35},
  {2, 2, 10, 35, 35, 35},
  {1, 11, 25, 25, 25, 25},
  {1, 3, 25, 25, 25, 25},
  {1, 11, 25, 25, 25, 25},
  {-inf, 9, 23, 23, 23, 23},
  {-inf, 14, 23, 23, 23, 23},
  {nan, 4, 22, 22, 22, 22},
  {nan, 6, 22, 22, 22, 22},
  {nan, 12, 22, 22, 22, 22},
  {NULL, 10, 11, 11, 11, 11},
  {NULL, 1, 11, 11, 11, 11}
]
==

[name=analytic_sum_range_current_and_following_order_by_int64_asc]
[labels=analytic_sum_over_range_between_current_and_following]
[parameters=9223372036854775807 as int64_max, -9223372036854775808 as int64_min]
SELECT row_id, val,
       SUM(val) OVER (ORDER BY row_id
                      RANGE BETWEEN CURRENT ROW AND 2 FOLLOWING),
       SUM(val) OVER (ORDER BY row_id
                      RANGE BETWEEN CURRENT ROW AND @int64_max FOLLOWING)
FROM (SELECT 1 row_id, null val UNION ALL
      SELECT 2, 3 UNION ALL
      SELECT @int64_max - 2, 4 UNION ALL
      SELECT @int64_max - 2, 5 UNION ALL
      SELECT @int64_max, 6 UNION ALL
      SELECT @int64_max - 3, 10 UNION ALL
      SELECT -1, 7 UNION ALL
      SELECT @int64_min+2, 8 UNION ALL
      SELECT @int64_max, 9 UNION ALL
      SELECT @int64_min, 11 UNION ALL
      SELECT @int64_min+3, 12)
--
ARRAY<STRUCT<row_id INT64, val INT64, INT64, INT64>>[
  {-9223372036854775808, 11, 19, 38},
  {-9223372036854775806, 8, 20, 27},
  {-9223372036854775805, 12, 12, 22},
  {-1, 7, 7, 29},
  {1, NULL, 3, 37},
  {2, 3, 3, 37},
  {9223372036854775804, 10, 19, 34},
  {9223372036854775805, 4, 24, 24},
  {9223372036854775805, 5, 24, 24},
  {9223372036854775807, 9, 15, 15},
  {9223372036854775807, 6, 15, 15}
]
==

# Same as the previous one, but in descending order.
[name=analytic_sum_range_current_and_following_order_by_int64_desc]
[labels=analytic_sum_over_range_between_current_and_following]
[parameters=9223372036854775807 as int64_max, -9223372036854775808 as int64_min]
SELECT row_id, val,
       SUM(val) OVER (ORDER BY row_id DESC
                      RANGE BETWEEN CURRENT ROW AND 2 FOLLOWING),
       SUM(val) OVER (ORDER BY row_id DESC
                      RANGE BETWEEN CURRENT ROW AND @int64_max FOLLOWING)
FROM (SELECT 1 row_id, null val UNION ALL
      SELECT 2, 3 UNION ALL
      SELECT @int64_max - 2, 4 UNION ALL
      SELECT @int64_max - 2, 5 UNION ALL
      SELECT @int64_max, 6 UNION ALL
      SELECT @int64_max - 3, 10 UNION ALL
      SELECT -1, 7 UNION ALL
      SELECT @int64_min+2, 8 UNION ALL
      SELECT @int64_max, 9 UNION ALL
      SELECT @int64_min, 11 UNION ALL
      SELECT @int64_min+3, 12)
--
ARRAY<STRUCT<row_id INT64, val INT64, INT64, INT64>>[
  {9223372036854775807, 6, 24, 37},
  {9223372036854775807, 9, 24, 37},
  {9223372036854775805, 5, 19, 29},
  {9223372036854775805, 4, 19, 29},
  {9223372036854775804, 10, 10, 20},
  {2, 3, 3, 22},
  {1, NULL, 7, 27},
  {-1, 7, 7, 38},
  {-9223372036854775805, 12, 20, 31},
  {-9223372036854775806, 8, 19, 19},
  {-9223372036854775808, 11, 11, 11}
]
==

[name=analytic_sum_range_unbounded_and_preceding_order_by_double_asc]
[labels=analytic_sum_over_range_between_unbounded_and_preceding]
[parameters=cast("NaN" as double) as nan,
            cast("+inf" as double) as pos_inf,
            cast("-inf" as double) as neg_inf]
SELECT row_id, val,
       SUM(val) OVER (ORDER BY row_id
                      RANGE BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING),
       SUM(val) OVER (ORDER BY row_id
                      RANGE BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING),
       SUM(val) OVER (ORDER BY row_id
                      RANGE BETWEEN UNBOUNDED PRECEDING AND 2 PRECEDING),
       SUM(val) OVER (ORDER BY row_id
                      RANGE BETWEEN UNBOUNDED PRECEDING AND 100 PRECEDING)
FROM (SELECT null row_id, 1 val UNION ALL
      SELECT 2, 2 UNION ALL
      SELECT 1, 3 UNION ALL
      SELECT @nan, 4 UNION ALL
      SELECT @pos_inf, 5 UNION ALL
      SELECT @nan, 6 UNION ALL
      SELECT @pos_inf, 7 UNION ALL
      SELECT 9, 9 UNION ALL
      SELECT 2, 8 UNION ALL
      SELECT @neg_inf, 9 UNION ALL
      SELECT 5, 9 UNION ALL
      SELECT 5, 9 UNION ALL
      SELECT null, 10 UNION ALL
      SELECT 1, 11 UNION ALL
      SELECT @nan, 12 UNION ALL
      SELECT 1, 11 UNION ALL
      SELECT 3, 13 UNION ALL
      SELECT 5, 9 UNION ALL
      SELECT @neg_inf, 14)
--
ARRAY<STRUCT<row_id DOUBLE, val INT64, INT64, INT64, INT64, INT64>>[
  {NULL, 1, 11, 11, 11, 11},
  {NULL, 10, 11, 11, 11, 11},
  {nan, 4, 33, 33, 33, 33},
  {nan, 6, 33, 33, 33, 33},
  {nan, 12, 33, 33, 33, 33},
  {-inf, 14, 56, 56, 56, 56},
  {-inf, 9, 56, 56, 56, 56},
  {1, 11, 81, 56, 56, 56},
  {1, 3, 81, 56, 56, 56},
  {1, 11, 81, 56, 56, 56},
  {2, 2, 91, 81, 56, 56},
  {2, 8, 91, 81, 56, 56},
  {3, 13, 104, 91, 81, 56},
  {5, 9, 131, 104, 104, 56},
  {5, 9, 131, 104, 104, 56},
  {5, 9, 131, 104, 104, 56},
  {9, 9, 140, 131, 131, 56},
  {inf, 7, 152, 152, 152, 152},
  {inf, 5, 152, 152, 152, 152}
]
==

[name=analytic_sum_range_unbounded_and_preceding_order_by_double_desc]
[labels=analytic_sum_over_range_between_unbounded_and_preceding]
[parameters=cast("NaN" as double) as nan,
            cast("+inf" as double) as pos_inf,
            cast("-inf" as double) as neg_inf]
SELECT row_id, val,
       SUM(val) OVER (ORDER BY row_id DESC
                      RANGE BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING),
       SUM(val) OVER (ORDER BY row_id DESC
                      RANGE BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING),
       SUM(val) OVER (ORDER BY row_id DESC
                      RANGE BETWEEN UNBOUNDED PRECEDING AND 2 PRECEDING),
       SUM(val) OVER (ORDER BY row_id DESC
                      RANGE BETWEEN UNBOUNDED PRECEDING AND 100 PRECEDING)
FROM (SELECT null row_id, 1 val UNION ALL
      SELECT 2, 2 UNION ALL
      SELECT 1, 3 UNION ALL
      SELECT @nan, 4 UNION ALL
      SELECT @pos_inf, 5 UNION ALL
      SELECT @nan, 6 UNION ALL
      SELECT @pos_inf, 7 UNION ALL
      SELECT 9, 9 UNION ALL
      SELECT 2, 8 UNION ALL
      SELECT @neg_inf, 9 UNION ALL
      SELECT 5, 9 UNION ALL
      SELECT 5, 9 UNION ALL
      SELECT null, 10 UNION ALL
      SELECT 1, 11 UNION ALL
      SELECT @nan, 12 UNION ALL
      SELECT 1, 11 UNION ALL
      SELECT 3, 13 UNION ALL
      SELECT 5, 9 UNION ALL
      SELECT @neg_inf, 14)
--
ARRAY<STRUCT<row_id DOUBLE, val INT64, INT64, INT64, INT64, INT64>>[
  {inf, 5, 12, 12, 12, 12},
  {inf, 7, 12, 12, 12, 12},
  {9, 9, 21, 12, 12, 12},
  {5, 9, 48, 21, 21, 12},
  {5, 9, 48, 21, 21, 12},
  {5, 9, 48, 21, 21, 12},
  {3, 13, 61, 48, 48, 12},
  {2, 8, 71, 61, 48, 12},
  {2, 2, 71, 61, 48, 12},
  {1, 11, 96, 71, 61, 12},
  {1, 3, 96, 71, 61, 12},
  {1, 11, 96, 71, 61, 12},
  {-inf, 9, 119, 119, 119, 119},
  {-inf, 14, 119, 119, 119, 119},
  {nan, 4, 141, 141, 141, 141},
  {nan, 6, 141, 141, 141, 141},
  {nan, 12, 141, 141, 141, 141},
  {NULL, 10, 152, 152, 152, 152},
  {NULL, 1, 152, 152, 152, 152}
]
==

[name=analytic_sum_range_unbounded_and_preceding_order_by_int64_asc]
[labels=analytic_sum_over_range_between_unbounded_and_preceding]
[parameters=9223372036854775807 as int64_max,
            -9223372036854775808 as int64_min]
SELECT row_id, val,
       SUM(val) OVER (ORDER BY row_id
                      RANGE BETWEEN UNBOUNDED PRECEDING AND 2 PRECEDING),
       SUM(val) OVER (ORDER BY row_id
                      RANGE BETWEEN UNBOUNDED PRECEDING AND
                                    @int64_max PRECEDING)
FROM (SELECT 1 row_id, null val UNION ALL
      SELECT 2, 3 UNION ALL
      SELECT @int64_max - 2, 4 UNION ALL
      SELECT @int64_max - 2, 5 UNION ALL
      SELECT @int64_max, 6 UNION ALL
      SELECT @int64_max - 3, 10 UNION ALL
      SELECT -1, 7 UNION ALL
      SELECT @int64_min+2, 8 UNION ALL
      SELECT @int64_max, 9 UNION ALL
      SELECT @int64_min, 11 UNION ALL
      SELECT @int64_min+3, 12)
--
ARRAY<STRUCT<row_id INT64, val INT64, INT64, INT64>>[
  {-9223372036854775808, 11, NULL, NULL},
  {-9223372036854775806, 8, 11, NULL},
  {-9223372036854775805, 12, 11, NULL},
  {-1, 7, 31, 11},
  {1, NULL, 38, 19},
  {2, 3, 38, 31},
  {9223372036854775804, 10, 41, 31},
  {9223372036854775805, 4, 41, 31},
  {9223372036854775805, 5, 41, 31},
  {9223372036854775807, 9, 60, 38},
  {9223372036854775807, 6, 60, 38}
]
==

[name=analytic_sum_range_unbounded_and_preceding_order_by_int64_desc]
[labels=analytic_sum_over_range_between_unbounded_and_preceding]
[parameters=9223372036854775807 as int64_max, -9223372036854775808 as int64_min]
SELECT row_id, val,
       SUM(val) OVER (ORDER BY row_id DESC
                      RANGE BETWEEN UNBOUNDED PRECEDING AND 2 PRECEDING),
       SUM(val) OVER (ORDER BY row_id DESC
                      RANGE BETWEEN UNBOUNDED PRECEDING AND
                                    @int64_max PRECEDING)
FROM (SELECT 1 row_id, null val UNION ALL
      SELECT 2, 3 UNION ALL
      SELECT @int64_max - 2, 4 UNION ALL
      SELECT @int64_max - 2, 5 UNION ALL
      SELECT @int64_max, 6 UNION ALL
      SELECT @int64_max - 3, 10 UNION ALL
      SELECT -1, 7 UNION ALL
      SELECT @int64_min+2, 8 UNION ALL
      SELECT @int64_max, 9 UNION ALL
      SELECT @int64_min, 11 UNION ALL
      SELECT @int64_min+3, 12)
--
ARRAY<STRUCT<row_id INT64, val INT64, INT64, INT64>>[
  {9223372036854775807, 6, NULL, NULL},
  {9223372036854775807, 9, NULL, NULL},
  {9223372036854775805, 5, 15, NULL},
  {9223372036854775805, 4, 15, NULL},
  {9223372036854775804, 10, 15, NULL},
  {2, 3, 34, NULL},
  {1, NULL, 34, NULL},
  {-1, 7, 37, 15},
  {-9223372036854775805, 12, 44, 37},
  {-9223372036854775806, 8, 44, 37},
  {-9223372036854775808, 11, 64, 44}
]
==

[name=analytic_sum_range_unbounded_and_preceding_single_row_partition_int64_asc]
[labels=analytic_sum_over_range_between_unbounded_and_preceding]
SELECT p, o,
       SUM(a) OVER (PARTITION BY p ORDER BY o
                    RANGE BETWEEN UNBOUNDED PRECEDING AND 2 PRECEDING)
FROM (SELECT 1 a, 1 p, 3 o
      UNION ALL
      SELECT 2 a, 2 p, NULL o)
--
ARRAY<STRUCT<p INT64, o INT64, INT64>>[{1, 3, NULL}, {2, NULL, 2}]
==

[name=analytic_sum_range_unbounded_and_preceding_single_row_partition_int64_desc]
[labels=analytic_sum_over_range_between_unbounded_and_preceding]
SELECT p, o,
       SUM(a) OVER (PARTITION BY p ORDER BY o DESC
                    RANGE BETWEEN UNBOUNDED PRECEDING AND 2 PRECEDING)
FROM (SELECT 1 a, 1 p, 3 o
      UNION ALL
      SELECT 2 a, 2 p, NULL o)
--
ARRAY<STRUCT<p INT64, o INT64, INT64>>[{1, 3, NULL}, {2, NULL, 2}]
==

[name=analytic_sum_range_unbounded_and_preceding_single_row_partition_double_asc]
[labels=analytic_sum_over_range_between_unbounded_and_preceding]
SELECT p, o,
       SUM(a) OVER (PARTITION BY p ORDER BY o
                    RANGE BETWEEN UNBOUNDED PRECEDING AND 2 PRECEDING)
FROM (SELECT 1 a, 1 p, 3.0 o
      UNION ALL
      SELECT 2 a, 2 p, null o
      UNION ALL
      SELECT 3 a, 3 p, CAST("+INF" AS double) o
      UNION ALL
      SELECT 4 a, 4 p, CAST("-INF" AS double) o
      UNION ALL
      SELECT 5 a, 5 p, CAST("NaN" AS double) o)
--
ARRAY<STRUCT<p INT64, o DOUBLE, INT64>>[
  {1, 3, NULL},
  {2, NULL, 2},
  {3, inf, 3},
  {4, -inf, 4},
  {5, nan, 5}
]
==

[name=analytic_sum_range_unbounded_and_preceding_single_row_partition_double_desc]
[labels=analytic_sum_over_range_between_unbounded_and_preceding]
SELECT p, o,
       SUM(a) OVER (PARTITION BY p ORDER BY o DESC
                    RANGE BETWEEN UNBOUNDED PRECEDING AND 2 PRECEDING)
FROM (SELECT 1 a, 1 p, 3.0 o
      UNION ALL
      SELECT 2 a, 2 p, null o
      UNION ALL
      SELECT 3 a, 3 p, CAST("+INF" AS double) o
      UNION ALL
      SELECT 4 a, 4 p, CAST("-INF" AS double) o
      UNION ALL
      SELECT 5 a, 5 p, CAST("NaN" AS double) o)
--
ARRAY<STRUCT<p INT64, o DOUBLE, INT64>>[
  {1, 3, NULL},
  {2, NULL, 2},
  {3, inf, 3},
  {4, -inf, 4},
  {5, nan, 5}
]
==

[name=first_partition_has_single_row_with_large_order_key]
[labels=analytic_sum_over_range_between_unbounded_and_following]
SELECT partition_col, order_col,
       SUM(10) OVER (PARTITION BY partition_col ORDER BY order_col
                     RANGE BETWEEN UNBOUNDED PRECEDING AND
                                   10 FOLLOWING)
FROM (
  SELECT 1 partition_col, 100 order_col UNION ALL
  SELECT 2,               1             UNION ALL
  SELECT 2,               2             UNION ALL
  SELECT 2,               3             UNION ALL
  SELECT 2,               4             UNION ALL
  SELECT 3,               -100          UNION ALL
  SELECT 3,               -99
)
--
ARRAY<STRUCT<partition_col INT64, order_col INT64, INT64>>[
  {1, 100, 10},
  {2, 1, 40},
  {2, 2, 40},
  {2, 3, 40},
  {2, 4, 40},
  {3, -100, 20},
  {3, -99, 20}
]
==

[name=first_partition_has_multi_rows_with_large_last_order_key]
[labels=analytic_sum_over_range_between_unbounded_and_following]
SELECT partition_col, order_col,
       SUM(10) OVER (PARTITION BY partition_col ORDER BY order_col
                     RANGE BETWEEN UNBOUNDED PRECEDING AND
                                   10 FOLLOWING)
FROM (
  SELECT 1 partition_col, NULL order_col UNION ALL
  SELECT 1,               0              UNION ALL
  SELECT 1,               100            UNION ALL
  SELECT 2,               1              UNION ALL
  SELECT 2,               2              UNION ALL
  SELECT 2,               3              UNION ALL
  SELECT 2,               4              UNION ALL
  SELECT 3,               -100           UNION ALL
  SELECT 3,               -99
)
--
ARRAY<STRUCT<partition_col INT64, order_col INT64, INT64>>[
  {1, NULL, 10},
  {1, 0, 20},
  {1, 100, 30},
  {2, 1, 40},
  {2, 2, 40},
  {2, 3, 40},
  {2, 4, 40},
  {3, -100, 20},
  {3, -99, 20}
]
==

[name=analytic_sum_range_current_and_current]
[labels=analytic_sum_over_range_between_current_and_current]
SELECT bool_val, int64_val, double_val,
       SUM(double_val) OVER (PARTITION BY bool_val ORDER BY int64_val
                             RANGE BETWEEN CURRENT ROW AND CURRENT ROW),
       SUM(double_val) OVER (PARTITION BY bool_val ORDER BY int64_val desc
                             RANGE BETWEEN CURRENT ROW AND CURRENT ROW)
FROM TestTable
--
ARRAY<STRUCT<bool_val BOOL, int64_val INT64, double_val DOUBLE, DOUBLE, DOUBLE>>[
  {NULL, NULL, NULL, NULL, NULL},
  {false, 2, 1.5, 1.5, 1.5},
  {false, 1, 3.5, 4.5, 4.5},
  {false, 1, -0.5, 4.5, 4.5},
  {false, 1, 1.5, 4.5, 4.5},
  {true, 4, -1.5, -1.5, -1.5},
  {true, 3, 2.5, 2.5, 2.5},
  {true, 2, 1.5, 1.5, 1.5},
  {true, 2, NULL, 1.5, 1.5},
  {true, NULL, 2.5, 2.5, 2.5}
]
==

[name=analytic_sum_range_preceding_and_unbounded]
[labels=analytic_sum_over_range_between_preceding_and_unbounded]
SELECT bool_val, int64_val, double_val,
       SUM(double_val) OVER (PARTITION BY bool_val ORDER BY int64_val
                             RANGE BETWEEN 2 PRECEDING AND UNBOUNDED FOLLOWING),
       SUM(double_val) OVER (PARTITION BY bool_val ORDER BY int64_val
                             RANGE BETWEEN 0 PRECEDING AND UNBOUNDED FOLLOWING),
       SUM(double_val) OVER (PARTITION BY bool_val ORDER BY int64_val
                             RANGE BETWEEN 1 PRECEDING AND UNBOUNDED FOLLOWING),
       SUM(double_val) OVER (PARTITION BY bool_val ORDER BY int64_val desc
                             RANGE BETWEEN 2 PRECEDING AND UNBOUNDED FOLLOWING)
FROM TestTable
--
ARRAY<STRUCT<bool_val BOOL,
             int64_val INT64,
             double_val DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE>>
[
  {NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {false, 2, 1.5, 6, 1.5, 6, 6},
  {false, 1, 3.5, 6, 6, 6, 6},
  {false, 1, -0.5, 6, 6, 6, 6},
  {false, 1, 1.5, 6, 6, 6, 6},
  {true, 4, -1.5, 2.5, -1.5, 1, 5},
  {true, 3, 2.5, 2.5, 1, 2.5, 5},
  {true, 2, 1.5, 2.5, 2.5, 2.5, 5},
  {true, 2, NULL, 2.5, 2.5, 2.5, 5},
  {true, NULL, 2.5, 5, 5, 5, 2.5}
]
==

[name=analytic_sum_range_current_and_unbounded]
[labels=analytic_sum_over_range_between_current_and_unbounded]
SELECT bool_val, int64_val, double_val,
       SUM(double_val) OVER (PARTITION BY bool_val ORDER BY int64_val
                             RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING),
       SUM(double_val) OVER (PARTITION BY bool_val ORDER BY int64_val desc
                             RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
FROM TestTable
--
ARRAY<STRUCT<bool_val BOOL, int64_val INT64, double_val DOUBLE, DOUBLE, DOUBLE>>[
  {NULL, NULL, NULL, NULL, NULL},
  {false, 2, 1.5, 1.5, 6},
  {false, 1, 3.5, 6, 4.5},
  {false, 1, -0.5, 6, 4.5},
  {false, 1, 1.5, 6, 4.5},
  {true, 4, -1.5, -1.5, 5},
  {true, 3, 2.5, 1, 6.5},
  {true, 2, 1.5, 2.5, 4},
  {true, 2, NULL, 2.5, 4},
  {true, NULL, 2.5, 5, 2.5}
]
==

[name=analytic_sum_range_following_and_unbounded]
[labels=analytic_sum_over_range_between_following_and_unbounded]
SELECT bool_val, int64_val, double_val,
       SUM(double_val) OVER (PARTITION BY bool_val ORDER BY int64_val
                             RANGE BETWEEN 2 FOLLOWING AND UNBOUNDED FOLLOWING),
       SUM(double_val) OVER (PARTITION BY bool_val ORDER BY int64_val
                             RANGE BETWEEN 0 FOLLOWING AND UNBOUNDED FOLLOWING),
       SUM(double_val) OVER (PARTITION BY bool_val ORDER BY int64_val
                             RANGE BETWEEN 1 FOLLOWING AND UNBOUNDED FOLLOWING),
       SUM(double_val) OVER (PARTITION BY bool_val ORDER BY int64_val desc
                             RANGE BETWEEN 2 FOLLOWING AND UNBOUNDED FOLLOWING)
FROM TestTable
--
ARRAY<STRUCT<bool_val BOOL,
             int64_val INT64,
             double_val DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE,
             DOUBLE>>
[
  {NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {false, 2, 1.5, NULL, 1.5, NULL, NULL},
  {false, 1, 3.5, NULL, 6, 1.5, NULL},
  {false, 1, -0.5, NULL, 6, 1.5, NULL},
  {false, 1, 1.5, NULL, 6, 1.5, NULL},
  {true, 4, -1.5, NULL, -1.5, NULL, 4},
  {true, 3, 2.5, NULL, 1, -1.5, 2.5},
  {true, 2, 1.5, -1.5, 2.5, 1, 2.5},
  {true, 2, NULL, -1.5, 2.5, 1, 2.5},
  {true, NULL, 2.5, 5, 5, 5, 2.5}
]
==

# ROWS window frame : ROWS BETWEEN <offset> PRECEDING AND CURRENT ROW
[name=analytic_sum_rows_preceding_and_current]
[labels=analytic_sum_over_rows_between_preceding_and_current]
select part, row_id, val,
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 0 PRECEDING
                                                       AND CURRENT ROW),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 1 PRECEDING
                                                       AND CURRENT ROW),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 2 PRECEDING
                                                       AND CURRENT ROW),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 3 PRECEDING
                                                       AND CURRENT ROW),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 4 PRECEDING
                                                       AND CURRENT ROW),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 5 PRECEDING
                                                       AND CURRENT ROW),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 6 PRECEDING
                                                       AND CURRENT ROW),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 7 PRECEDING
                                                       AND CURRENT ROW),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 8 PRECEDING
                                                       AND CURRENT ROW),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 9 PRECEDING
                                                       AND CURRENT ROW),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 10 PRECEDING
                                                       AND CURRENT ROW),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 11 PRECEDING
                                                       AND CURRENT ROW)
FROM (SELECT 1 row_id, 3 val, 1 part UNION ALL
      SELECT 2,  1,    2             UNION ALL
      SELECT 3,  2,    1             UNION ALL
      SELECT 4,  NULL, 3             UNION ALL
      SELECT 5,  1,    2             UNION ALL
      SELECT 6,  3,    3             UNION ALL
      SELECT 7,  3,    1             UNION ALL
      SELECT 8,  6,    1             UNION ALL
      SELECT 9,  NULL, 2             UNION ALL
      SELECT 10, 5,    3             UNION ALL
      SELECT 11, 3,    1             UNION ALL
      SELECT 12, 1,    2             UNION ALL
      SELECT 13, 2,    1             UNION ALL
      SELECT 14, NULL, 3             UNION ALL
      SELECT 15, 1,    2             UNION ALL
      SELECT 16, 3,    3             UNION ALL
      SELECT 17, 3,    1             UNION ALL
      SELECT 18, 6,    1             UNION ALL
      SELECT 19, NULL, 2             UNION ALL
      SELECT 20, 5,    3)
order by part, row_id, val
--
ARRAY<STRUCT<part INT64,
             row_id INT64,
             val INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64>>
[{1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3},
 {1, 3, 2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
 {1, 7, 3, 3, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8},
 {1, 8, 6, 6, 9, 11, 14, 14, 14, 14, 14, 14, 14, 14, 14},
 {1, 11, 3, 3, 9, 12, 14, 17, 17, 17, 17, 17, 17, 17, 17},
 {1, 13, 2, 2, 5, 11, 14, 16, 19, 19, 19, 19, 19, 19, 19},
 {1, 17, 3, 3, 5, 8, 14, 17, 19, 22, 22, 22, 22, 22, 22},
 {1, 18, 6, 6, 9, 11, 14, 20, 23, 25, 28, 28, 28, 28, 28},
 {2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
 {2, 5, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
 {2, 9, NULL, NULL, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
 {2, 12, 1, 1, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3},
 {2, 15, 1, 1, 2, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4},
 {2, 19, NULL, NULL, 1, 2, 2, 3, 4, 4, 4, 4, 4, 4, 4},
 {3,
  4,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL},
 {3, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3},
 {3, 10, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8},
 {3, 14, NULL, NULL, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8},
 {3, 16, 3, 3, 3, 8, 11, 11, 11, 11, 11, 11, 11, 11, 11},
 {3, 20, 5, 5, 8, 8, 13, 16, 16, 16, 16, 16, 16, 16, 16}]
==

# ROWS window frame : ROWS BETWEEN CURRENT ROW AND <offset> FOLLOWING
[name=analytic_sum_rows_current_and_following_with_diff_following_offset]
[labels=analytic_sum_over_rows_between_current_and_following]
select part, row_id, val,
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN CURRENT ROW
                                                       AND 0 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN CURRENT ROW
                                                       AND 1 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN CURRENT ROW
                                                       AND 2 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN CURRENT ROW
                                                       AND 3 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN CURRENT ROW
                                                       AND 4 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN CURRENT ROW
                                                       AND 5 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN CURRENT ROW
                                                       AND 6 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN CURRENT ROW
                                                       AND 7 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN CURRENT ROW
                                                       AND 8 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN CURRENT ROW
                                                       AND 9 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN CURRENT ROW
                                                       AND 10 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN CURRENT ROW
                                                       AND 11 FOLLOWING)
FROM (SELECT 1 row_id, 3 val, 1 part UNION ALL
      SELECT 2,  1,    2             UNION ALL
      SELECT 3,  2,    1             UNION ALL
      SELECT 4,  NULL, 3             UNION ALL
      SELECT 5,  1,    2             UNION ALL
      SELECT 6,  3,    3             UNION ALL
      SELECT 7,  3,    1             UNION ALL
      SELECT 8,  6,    1             UNION ALL
      SELECT 9,  NULL, 2             UNION ALL
      SELECT 10, 5,    3             UNION ALL
      SELECT 11, 3,    1             UNION ALL
      SELECT 12, 1,    2             UNION ALL
      SELECT 13, 2,    1             UNION ALL
      SELECT 14, NULL, 3             UNION ALL
      SELECT 15, 1,    2             UNION ALL
      SELECT 16, 3,    3             UNION ALL
      SELECT 17, 3,    1             UNION ALL
      SELECT 18, 6,    1             UNION ALL
      SELECT 19, NULL, 2             UNION ALL
      SELECT 20, 5,    3)
order by part, row_id, val
--
ARRAY<STRUCT<part INT64,
             row_id INT64,
             val INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64>>
[{1, 1, 3, 3, 5, 8, 14, 17, 19, 22, 28, 28, 28, 28, 28},
 {1, 3, 2, 2, 5, 11, 14, 16, 19, 25, 25, 25, 25, 25, 25},
 {1, 7, 3, 3, 9, 12, 14, 17, 23, 23, 23, 23, 23, 23, 23},
 {1, 8, 6, 6, 9, 11, 14, 20, 20, 20, 20, 20, 20, 20, 20},
 {1, 11, 3, 3, 5, 8, 14, 14, 14, 14, 14, 14, 14, 14, 14},
 {1, 13, 2, 2, 5, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11},
 {1, 17, 3, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9},
 {1, 18, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
 {2, 2, 1, 1, 2, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4},
 {2, 5, 1, 1, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3},
 {2, 9, NULL, NULL, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
 {2, 12, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
 {2, 15, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
 {2,
  19,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL},
 {3, 4, NULL, NULL, 3, 8, 8, 11, 16, 16, 16, 16, 16, 16, 16},
 {3, 6, 3, 3, 8, 8, 11, 16, 16, 16, 16, 16, 16, 16, 16},
 {3, 10, 5, 5, 5, 8, 13, 13, 13, 13, 13, 13, 13, 13, 13},
 {3, 14, NULL, NULL, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8},
 {3, 16, 3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8},
 {3, 20, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5}]
==

# ROWS window frame : ROWS BETWEEN CURRENT ROW AND CURRENT ROW
[name=analytic_sum_rows_current_and_current]
[labels=analytic_sum_over_rows_between_current_and_current]
select part, row_id, val,
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN CURRENT ROW
                                                       AND CURRENT ROW)
FROM (SELECT 1 row_id, 3 val, 1 part UNION ALL
      SELECT 2,  1,    2             UNION ALL
      SELECT 3,  2,    1             UNION ALL
      SELECT 4,  NULL, 3             UNION ALL
      SELECT 5,  1,    2             UNION ALL
      SELECT 6,  3,    3             UNION ALL
      SELECT 7,  3,    1             UNION ALL
      SELECT 8,  6,    1             UNION ALL
      SELECT 9,  NULL, 2             UNION ALL
      SELECT 10, 5,    3             UNION ALL
      SELECT 11, 3,    1             UNION ALL
      SELECT 12, 1,    2             UNION ALL
      SELECT 13, 2,    1             UNION ALL
      SELECT 14, NULL, 3             UNION ALL
      SELECT 15, 1,    2             UNION ALL
      SELECT 16, 3,    3             UNION ALL
      SELECT 17, 3,    1             UNION ALL
      SELECT 18, 6,    1             UNION ALL
      SELECT 19, NULL, 2             UNION ALL
      SELECT 20, 5,    3)
order by part, row_id, val
--
ARRAY<STRUCT<part INT64, row_id INT64, val INT64, INT64>>[
  {1, 1, 3, 3},
  {1, 3, 2, 2},
  {1, 7, 3, 3},
  {1, 8, 6, 6},
  {1, 11, 3, 3},
  {1, 13, 2, 2},
  {1, 17, 3, 3},
  {1, 18, 6, 6},
  {2, 2, 1, 1},
  {2, 5, 1, 1},
  {2, 9, NULL, NULL},
  {2, 12, 1, 1},
  {2, 15, 1, 1},
  {2, 19, NULL, NULL},
  {3, 4, NULL, NULL},
  {3, 6, 3, 3},
  {3, 10, 5, 5},
  {3, 14, NULL, NULL},
  {3, 16, 3, 3},
  {3, 20, 5, 5}
]
==

# ROWS window frame : ROWS BETWEEN <offset> PRECEDING AND <offset> FOLLOWING
[name=analytic_sum_rows_preceding_and_following_with_diff_following_offset]
[labels=analytic_sum_over_rows_between_preceding_and_following]
select part, row_id, val,
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 2 PRECEDING
                                                       AND 0 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 2 PRECEDING
                                                       AND 1 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 2 PRECEDING
                                                       AND 2 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 2 PRECEDING
                                                       AND 3 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 2 PRECEDING
                                                       AND 4 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 2 PRECEDING
                                                       AND 5 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 2 PRECEDING
                                                       AND 6 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 2 PRECEDING
                                                       AND 7 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 2 PRECEDING
                                                       AND 8 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 2 PRECEDING
                                                       AND 9 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 2 PRECEDING
                                                       AND 10 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 2 PRECEDING
                                                       AND 11 FOLLOWING)
FROM (SELECT 1 row_id, 3 val, 1 part UNION ALL
      SELECT 2,  1,    2             UNION ALL
      SELECT 3,  2,    1             UNION ALL
      SELECT 4,  NULL, 3             UNION ALL
      SELECT 5,  1,    2             UNION ALL
      SELECT 6,  3,    3             UNION ALL
      SELECT 7,  3,    1             UNION ALL
      SELECT 8,  6,    1             UNION ALL
      SELECT 9,  NULL, 2             UNION ALL
      SELECT 10, 5,    3             UNION ALL
      SELECT 11, 3,    1             UNION ALL
      SELECT 12, 1,    2             UNION ALL
      SELECT 13, 2,    1             UNION ALL
      SELECT 14, NULL, 3             UNION ALL
      SELECT 15, 1,    2             UNION ALL
      SELECT 16, 3,    3             UNION ALL
      SELECT 17, 3,    1             UNION ALL
      SELECT 18, 6,    1             UNION ALL
      SELECT 19, NULL, 2             UNION ALL
      SELECT 20, 5,    3)
order by part, row_id, val
--
ARRAY<STRUCT<part INT64,
             row_id INT64,
             val INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64>>
[
  {1, 1, 3, 3, 5, 8, 14, 17, 19, 22, 28, 28, 28, 28, 28},
  {1, 3, 2, 5, 8, 14, 17, 19, 22, 28, 28, 28, 28, 28, 28},
  {1, 7, 3, 8, 14, 17, 19, 22, 28, 28, 28, 28, 28, 28, 28},
  {1, 8, 6, 11, 14, 16, 19, 25, 25, 25, 25, 25, 25, 25, 25},
  {1, 11, 3, 12, 14, 17, 23, 23, 23, 23, 23, 23, 23, 23, 23},
  {1, 13, 2, 11, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20},
  {1, 17, 3, 8, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14},
  {1, 18, 6, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11},
  {2, 2, 1, 1, 2, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4},
  {2, 5, 1, 2, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4},
  {2, 9, NULL, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},
  {2, 12, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3},
  {2, 15, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
  {2, 19, NULL, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
  {3, 4, NULL, NULL, 3, 8, 8, 11, 16, 16, 16, 16, 16, 16, 16},
  {3, 6, 3, 3, 8, 8, 11, 16, 16, 16, 16, 16, 16, 16, 16},
  {3, 10, 5, 8, 8, 11, 16, 16, 16, 16, 16, 16, 16, 16, 16},
  {3, 14, NULL, 8, 11, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16},
  {3, 16, 3, 8, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13},
  {3, 20, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8}
]
==

# ROWS window frame : ROWS BETWEEN <offset> PRECEDING AND <offset> FOLLOWING
[name=analytic_sum_rows_preceding_and_following_with_diff_preceding_offset]
[labels=analytic_sum_over_rows_between_preceding_and_following]
select part, row_id, val,
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 0 PRECEDING
                                                       AND 2 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 1 PRECEDING
                                                       AND 2 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 2 PRECEDING
                                                       AND 2 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 3 PRECEDING
                                                       AND 2 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 4 PRECEDING
                                                       AND 2 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 5 PRECEDING
                                                       AND 2 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 6 PRECEDING
                                                       AND 2 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 7 PRECEDING
                                                       AND 2 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 8 PRECEDING
                                                       AND 2 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 9 PRECEDING
                                                       AND 2 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 10 PRECEDING
                                                       AND 2 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 11 PRECEDING
                                                       AND 2 FOLLOWING)
FROM (SELECT 1 row_id, 3 val, 1 part UNION ALL
      SELECT 2,  1,    2             UNION ALL
      SELECT 3,  2,    1             UNION ALL
      SELECT 4,  NULL, 3             UNION ALL
      SELECT 5,  1,    2             UNION ALL
      SELECT 6,  3,    3             UNION ALL
      SELECT 7,  3,    1             UNION ALL
      SELECT 8,  6,    1             UNION ALL
      SELECT 9,  NULL, 2             UNION ALL
      SELECT 10, 5,    3             UNION ALL
      SELECT 11, 3,    1             UNION ALL
      SELECT 12, 1,    2             UNION ALL
      SELECT 13, 2,    1             UNION ALL
      SELECT 14, NULL, 3             UNION ALL
      SELECT 15, 1,    2             UNION ALL
      SELECT 16, 3,    3             UNION ALL
      SELECT 17, 3,    1             UNION ALL
      SELECT 18, 6,    1             UNION ALL
      SELECT 19, NULL, 2             UNION ALL
      SELECT 20, 5,    3)
order by part, row_id, val
--
ARRAY<STRUCT<part INT64,
             row_id INT64,
             val INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64>>
[
  {1, 1, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8},
  {1, 3, 2, 11, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14},
  {1, 7, 3, 12, 14, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17},
  {1, 8, 6, 11, 14, 16, 19, 19, 19, 19, 19, 19, 19, 19, 19},
  {1, 11, 3, 8, 14, 17, 19, 22, 22, 22, 22, 22, 22, 22, 22},
  {1, 13, 2, 11, 14, 20, 23, 25, 28, 28, 28, 28, 28, 28, 28},
  {1, 17, 3, 9, 11, 14, 20, 23, 25, 28, 28, 28, 28, 28, 28},
  {1, 18, 6, 6, 9, 11, 14, 20, 23, 25, 28, 28, 28, 28, 28},
  {2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
  {2, 5, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3},
  {2, 9, NULL, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},
  {2, 12, 1, 2, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4},
  {2, 15, 1, 1, 2, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4},
  {2, 19, NULL, NULL, 1, 2, 2, 3, 4, 4, 4, 4, 4, 4, 4},
  {3, 4, NULL, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8},
  {3, 6, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8},
  {3, 10, 5, 8, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11},
  {3, 14, NULL, 8, 13, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16},
  {3, 16, 3, 8, 8, 13, 16, 16, 16, 16, 16, 16, 16, 16, 16},
  {3, 20, 5, 5, 8, 8, 13, 16, 16, 16, 16, 16, 16, 16, 16}
]
==

# ROWS window frame : ROWS BETWEEN <offset> PRECEDING AND <offset> FOLLOWING
[name=analytic_sum_rows_preceding_and_following_with_diff_preceding_and_following_offset]
[labels=analytic_sum_over_rows_between_preceding_and_following]
select part, row_id, val,
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 0 PRECEDING
                                                       AND 0 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 1 PRECEDING
                                                       AND 1 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 2 PRECEDING
                                                       AND 2 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 3 PRECEDING
                                                       AND 3 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 4 PRECEDING
                                                       AND 4 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 5 PRECEDING
                                                       AND 5 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 6 PRECEDING
                                                       AND 6 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 7 PRECEDING
                                                       AND 7 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 8 PRECEDING
                                                       AND 8 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 9 PRECEDING
                                                       AND 9 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 10 PRECEDING
                                                       AND 10 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 11 PRECEDING
                                                       AND 11 FOLLOWING)
FROM (SELECT 1 row_id, 3 val, 1 part UNION ALL
      SELECT 2,  1,    2             UNION ALL
      SELECT 3,  2,    1             UNION ALL
      SELECT 4,  NULL, 3             UNION ALL
      SELECT 5,  1,    2             UNION ALL
      SELECT 6,  3,    3             UNION ALL
      SELECT 7,  3,    1             UNION ALL
      SELECT 8,  6,    1             UNION ALL
      SELECT 9,  NULL, 2             UNION ALL
      SELECT 10, 5,    3             UNION ALL
      SELECT 11, 3,    1             UNION ALL
      SELECT 12, 1,    2             UNION ALL
      SELECT 13, 2,    1             UNION ALL
      SELECT 14, NULL, 3             UNION ALL
      SELECT 15, 1,    2             UNION ALL
      SELECT 16, 3,    3             UNION ALL
      SELECT 17, 3,    1             UNION ALL
      SELECT 18, 6,    1             UNION ALL
      SELECT 19, NULL, 2             UNION ALL
      SELECT 20, 5,    3)
order by part, row_id, val
--
ARRAY<STRUCT<part INT64,
             row_id INT64,
             val INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64>>
[
  {1, 1, 3, 3, 5, 8, 14, 17, 19, 22, 28, 28, 28, 28, 28},
  {1, 3, 2, 2, 8, 14, 17, 19, 22, 28, 28, 28, 28, 28, 28},
  {1, 7, 3, 3, 11, 17, 19, 22, 28, 28, 28, 28, 28, 28, 28},
  {1, 8, 6, 6, 12, 16, 22, 28, 28, 28, 28, 28, 28, 28, 28},
  {1, 11, 3, 3, 11, 17, 25, 28, 28, 28, 28, 28, 28, 28, 28},
  {1, 13, 2, 2, 8, 20, 23, 25, 28, 28, 28, 28, 28, 28, 28},
  {1, 17, 3, 3, 11, 14, 20, 23, 25, 28, 28, 28, 28, 28, 28},
  {1, 18, 6, 6, 9, 11, 14, 20, 23, 25, 28, 28, 28, 28, 28},
  {2, 2, 1, 1, 2, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4},
  {2, 5, 1, 1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4},
  {2, 9, NULL, NULL, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},
  {2, 12, 1, 1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4},
  {2, 15, 1, 1, 2, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4},
  {2, 19, NULL, NULL, 1, 2, 2, 3, 4, 4, 4, 4, 4, 4, 4},
  {3, 4, NULL, NULL, 3, 8, 8, 11, 16, 16, 16, 16, 16, 16, 16},
  {3, 6, 3, 3, 8, 8, 11, 16, 16, 16, 16, 16, 16, 16, 16},
  {3, 10, 5, 5, 8, 11, 16, 16, 16, 16, 16, 16, 16, 16, 16},
  {3, 14, NULL, NULL, 8, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16},
  {3, 16, 3, 3, 8, 13, 16, 16, 16, 16, 16, 16, 16, 16, 16},
  {3, 20, 5, 5, 8, 8, 13, 16, 16, 16, 16, 16, 16, 16, 16}
]
==

# ROWS window frame : ROWS BETWEEN <offset> PRECEDING AND UNBOUNDED FOLLOWING
[name=analytic_sum_rows_preceding_and_unbounded_with_diff_preceding_offset]
[labels=analytic_sum_over_rows_between_preceding_and_unbounded,analytic_sum_over_rows_between_current_and_unbounded]

select part, row_id, val,
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN CURRENT ROW
                                                       AND UNBOUNDED FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 0 PRECEDING
                                                       AND UNBOUNDED FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 1 PRECEDING
                                                       AND UNBOUNDED FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 2 PRECEDING
                                                       AND UNBOUNDED FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 3 PRECEDING
                                                       AND UNBOUNDED FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 4 PRECEDING
                                                       AND UNBOUNDED FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 5 PRECEDING
                                                       AND UNBOUNDED FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 6 PRECEDING
                                                       AND UNBOUNDED FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 7 PRECEDING
                                                       AND UNBOUNDED FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 8 PRECEDING
                                                       AND UNBOUNDED FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 9 PRECEDING
                                                       AND UNBOUNDED FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 10 PRECEDING
                                                       AND UNBOUNDED FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 11 PRECEDING
                                                       AND UNBOUNDED FOLLOWING)
FROM (SELECT 1 row_id, 3 val, 1 part UNION ALL
      SELECT 2,  1,    2             UNION ALL
      SELECT 3,  2,    1             UNION ALL
      SELECT 4,  NULL, 3             UNION ALL
      SELECT 5,  1,    2             UNION ALL
      SELECT 6,  3,    3             UNION ALL
      SELECT 7,  3,    1             UNION ALL
      SELECT 8,  6,    1             UNION ALL
      SELECT 9,  NULL, 2             UNION ALL
      SELECT 10, 5,    3             UNION ALL
      SELECT 11, 3,    1             UNION ALL
      SELECT 12, 1,    2             UNION ALL
      SELECT 13, 2,    1             UNION ALL
      SELECT 14, NULL, 3             UNION ALL
      SELECT 15, 1,    2             UNION ALL
      SELECT 16, 3,    3             UNION ALL
      SELECT 17, 3,    1             UNION ALL
      SELECT 18, 6,    1             UNION ALL
      SELECT 19, NULL, 2             UNION ALL
      SELECT 20, 5,    3)
order by part, row_id, val
--
ARRAY<STRUCT<part INT64,
             row_id INT64,
             val INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64>>
[
  {1, 1, 3, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28},
  {1, 3, 2, 25, 25, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28},
  {1, 7, 3, 23, 23, 25, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28},
  {1, 8, 6, 20, 20, 23, 25, 28, 28, 28, 28, 28, 28, 28, 28, 28},
  {1, 11, 3, 14, 14, 20, 23, 25, 28, 28, 28, 28, 28, 28, 28, 28},
  {1, 13, 2, 11, 11, 14, 20, 23, 25, 28, 28, 28, 28, 28, 28, 28},
  {1, 17, 3, 9, 9, 11, 14, 20, 23, 25, 28, 28, 28, 28, 28, 28},
  {1, 18, 6, 6, 6, 9, 11, 14, 20, 23, 25, 28, 28, 28, 28, 28},
  {2, 2, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},
  {2, 5, 1, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},
  {2, 9, NULL, 2, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},
  {2, 12, 1, 2, 2, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4},
  {2, 15, 1, 1, 1, 2, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4},
  {2, 19, NULL, NULL, NULL, 1, 2, 2, 3, 4, 4, 4, 4, 4, 4, 4},
  {3, 4, NULL, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16},
  {3, 6, 3, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16},
  {3, 10, 5, 13, 13, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16},
  {3, 14, NULL, 8, 8, 13, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16},
  {3, 16, 3, 8, 8, 8, 13, 16, 16, 16, 16, 16, 16, 16, 16, 16},
  {3, 20, 5, 5, 5, 8, 8, 13, 16, 16, 16, 16, 16, 16, 16, 16}
]
==

# ROWS window frame : ROWS BETWEEN <offset> FOLLOWING AND UNBOUNDED FOLLOWING
[name=analytic_sum_rows_following_and_unbounded_with_diff_following_offset]
[labels=analytic_sum_over_rows_between_following_and_unbounded]
select part, row_id, val,
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN CURRENT ROW
                                                       AND UNBOUNDED FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 0 FOLLOWING
                                                       AND UNBOUNDED FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 1 FOLLOWING
                                                       AND UNBOUNDED FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 2 FOLLOWING
                                                       AND UNBOUNDED FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 3 FOLLOWING
                                                       AND UNBOUNDED FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 4 FOLLOWING
                                                       AND UNBOUNDED FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 5 FOLLOWING
                                                       AND UNBOUNDED FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 6 FOLLOWING
                                                       AND UNBOUNDED FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 7 FOLLOWING
                                                       AND UNBOUNDED FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 8 FOLLOWING
                                                       AND UNBOUNDED FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 9 FOLLOWING
                                                       AND UNBOUNDED FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 10 FOLLOWING
                                                       AND UNBOUNDED FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 11 FOLLOWING
                                                       AND UNBOUNDED FOLLOWING)
FROM (SELECT 1 row_id, 3 val, 1 part UNION ALL
      SELECT 2,  1,    2             UNION ALL
      SELECT 3,  2,    1             UNION ALL
      SELECT 4,  NULL, 3             UNION ALL
      SELECT 5,  1,    2             UNION ALL
      SELECT 6,  3,    3             UNION ALL
      SELECT 7,  3,    1             UNION ALL
      SELECT 8,  6,    1             UNION ALL
      SELECT 9,  NULL, 2             UNION ALL
      SELECT 10, 5,    3             UNION ALL
      SELECT 11, 3,    1             UNION ALL
      SELECT 12, 1,    2             UNION ALL
      SELECT 13, 2,    1             UNION ALL
      SELECT 14, NULL, 3             UNION ALL
      SELECT 15, 1,    2             UNION ALL
      SELECT 16, 3,    3             UNION ALL
      SELECT 17, 3,    1             UNION ALL
      SELECT 18, 6,    1             UNION ALL
      SELECT 19, NULL, 2             UNION ALL
      SELECT 20, 5,    3)
order by part, row_id, val
--
ARRAY<STRUCT<part INT64,
             row_id INT64,
             val INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64>>
[
  {1, 1, 3, 28, 28, 25, 23, 20, 14, 11, 9, 6, NULL, NULL, NULL, NULL},
  {1, 3, 2, 25, 25, 23, 20, 14, 11, 9, 6, NULL, NULL, NULL, NULL, NULL},
  {1, 7, 3, 23, 23, 20, 14, 11, 9, 6, NULL, NULL, NULL, NULL, NULL, NULL},
  {1, 8, 6, 20, 20, 14, 11, 9, 6, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {1, 11, 3, 14, 14, 11, 9, 6, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {1, 13, 2, 11, 11, 9, 6, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {1,
   17,
   3,
   9,
   9,
   6,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL},
  {1,
   18,
   6,
   6,
   6,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL},
  {2, 2, 1, 4, 4, 3, 2, 2, 1, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {2, 5, 1, 3, 3, 2, 2, 1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {2, 9, NULL, 2, 2, 2, 1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {2,
   12,
   1,
   2,
   2,
   1,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL},
  {2,
   15,
   1,
   1,
   1,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL},
  {2,
   19,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL},
  {3, 4, NULL, 16, 16, 16, 13, 8, 8, 5, NULL, NULL, NULL, NULL, NULL, NULL},
  {3, 6, 3, 16, 16, 13, 8, 8, 5, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {3, 10, 5, 13, 13, 8, 8, 5, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {3,
   14,
   NULL,
   8,
   8,
   8,
   5,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL},
  {3,
   16,
   3,
   8,
   8,
   5,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL},
  {3,
   20,
   5,
   5,
   5,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL}
]
==

# ROWS window frame : ROWS BETWEEN <offset> FOLLOWING AND <offset> FOLLOWING
[name=analytic_sum_rows_following_and_following_with_diff_following_offset]
[labels=analytic_sum_over_rows_between_following_and_following]
select part, row_id, val,
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN CURRENT ROW
                                                       AND UNBOUNDED FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 0 FOLLOWING
                                                       AND 0 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 1 FOLLOWING
                                                       AND 2 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 2 FOLLOWING
                                                       AND 4 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 3 FOLLOWING
                                                       AND 6 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 4 FOLLOWING
                                                       AND 8 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 5 FOLLOWING
                                                       AND 10 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 6 FOLLOWING
                                                       AND 12 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 7 FOLLOWING
                                                       AND 14 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 3 FOLLOWING
                                                       AND 5 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 4 FOLLOWING
                                                       AND 6 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 5 FOLLOWING
                                                       AND 7 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 6 FOLLOWING
                                                       AND 8 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 5 FOLLOWING
                                                       AND 3 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 6 FOLLOWING
                                                       AND 4 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 5 FOLLOWING
                                                       AND 0 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 5 FOLLOWING
                                                       AND 5 FOLLOWING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 9 FOLLOWING
                                                       AND 9 FOLLOWING)
FROM (SELECT 1 row_id, 3 val, 1 part UNION ALL
      SELECT 2,  1,    2             UNION ALL
      SELECT 3,  2,    1             UNION ALL
      SELECT 4,  NULL, 3             UNION ALL
      SELECT 5,  1,    2             UNION ALL
      SELECT 6,  3,    3             UNION ALL
      SELECT 7,  3,    1             UNION ALL
      SELECT 8,  6,    1             UNION ALL
      SELECT 9,  NULL, 2             UNION ALL
      SELECT 10, 5,    3             UNION ALL
      SELECT 11, 3,    1             UNION ALL
      SELECT 12, 1,    2             UNION ALL
      SELECT 13, 2,    1             UNION ALL
      SELECT 14, NULL, 3             UNION ALL
      SELECT 15, 1,    2             UNION ALL
      SELECT 16, 3,    3             UNION ALL
      SELECT 17, 3,    1             UNION ALL
      SELECT 18, 6,    1             UNION ALL
      SELECT 19, NULL, 2             UNION ALL
      SELECT 20, 5,    3)
order by part, row_id, val
--
ARRAY<STRUCT<part INT64,
             row_id INT64,
             val INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64>>
[{1,
  1,
  3,
  28,
  3,
  5,
  12,
  14,
  14,
  11,
  9,
  6,
  11,
  8,
  11,
  9,
  NULL,
  NULL,
  NULL,
  2,
  NULL},
 {1,
  3,
  2,
  25,
  2,
  9,
  11,
  14,
  11,
  9,
  6,
  NULL,
  8,
  11,
  9,
  6,
  NULL,
  NULL,
  NULL,
  3,
  NULL},
 {1,
  7,
  3,
  23,
  3,
  9,
  8,
  11,
  9,
  6,
  NULL,
  NULL,
  11,
  9,
  6,
  NULL,
  NULL,
  NULL,
  NULL,
  6,
  NULL},
 {1,
  8,
  6,
  20,
  6,
  5,
  11,
  9,
  6,
  NULL,
  NULL,
  NULL,
  9,
  6,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL},
 {1,
  11,
  3,
  14,
  3,
  5,
  9,
  6,
  NULL,
  NULL,
  NULL,
  NULL,
  6,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL},
 {1,
  13,
  2,
  11,
  2,
  9,
  6,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL},
 {1,
  17,
  3,
  9,
  3,
  6,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL},
 {1,
  18,
  6,
  6,
  6,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL},
 {2,
  2,
  1,
  4,
  1,
  1,
  2,
  2,
  1,
  NULL,
  NULL,
  NULL,
  2,
  1,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL},
 {2,
  5,
  1,
  3,
  1,
  1,
  2,
  1,
  NULL,
  NULL,
  NULL,
  NULL,
  1,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL},
 {2,
  9,
  NULL,
  2,
  NULL,
  2,
  1,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL},
 {2,
  12,
  1,
  2,
  1,
  1,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL},
 {2,
  15,
  1,
  1,
  1,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL},
 {2,
  19,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL},
 {3,
  4,
  NULL,
  16,
  NULL,
  8,
  8,
  8,
  8,
  5,
  NULL,
  NULL,
  8,
  8,
  5,
  NULL,
  NULL,
  NULL,
  NULL,
  5,
  NULL},
 {3,
  6,
  3,
  16,
  3,
  5,
  8,
  8,
  5,
  NULL,
  NULL,
  NULL,
  8,
  5,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL},
 {3,
  10,
  5,
  13,
  5,
  3,
  8,
  5,
  NULL,
  NULL,
  NULL,
  NULL,
  5,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL},
 {3,
  14,
  NULL,
  8,
  NULL,
  8,
  5,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL},
 {3,
  16,
  3,
  8,
  3,
  5,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL},
 {3,
  20,
  5,
  5,
  5,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL}]
==

# ROWS window frame : ROWS BETWEEN <offset> PRECEDING AND <offset> PRECEDING
[name=analytic_sum_rows_preceding_and_preceding_with_diff_preceding_offset]
[labels=analytic_sum_over_rows_between_preceding_and_preceding]
select part, row_id, val,
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 0 PRECEDING
                                                       AND 0 PRECEDING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 2 PRECEDING
                                                       AND 1 PRECEDING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 4 PRECEDING
                                                       AND 2 PRECEDING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 6 PRECEDING
                                                       AND 3 PRECEDING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 8 PRECEDING
                                                       AND 4 PRECEDING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 10 PRECEDING
                                                       AND 5 PRECEDING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 12 PRECEDING
                                                       AND 6 PRECEDING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 14 PRECEDING
                                                       AND 7 PRECEDING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 5 PRECEDING
                                                       AND 3 PRECEDING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 6 PRECEDING
                                                       AND 4 PRECEDING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 7 PRECEDING
                                                       AND 5 PRECEDING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 8 PRECEDING
                                                       AND 6 PRECEDING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 3 PRECEDING
                                                       AND 5 PRECEDING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 4 PRECEDING
                                                       AND 6 PRECEDING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 0 PRECEDING
                                                       AND 5 PRECEDING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 5 PRECEDING
                                                       AND 5 PRECEDING),
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN 9 PRECEDING
                                                       AND 9 PRECEDING)
FROM (SELECT 1 row_id, 3 val, 1 part UNION ALL
      SELECT 2,  1,    2             UNION ALL
      SELECT 3,  2,    1             UNION ALL
      SELECT 4,  NULL, 3             UNION ALL
      SELECT 5,  1,    2             UNION ALL
      SELECT 6,  3,    3             UNION ALL
      SELECT 7,  3,    1             UNION ALL
      SELECT 8,  6,    1             UNION ALL
      SELECT 9,  NULL, 2             UNION ALL
      SELECT 10, 5,    3             UNION ALL
      SELECT 11, 3,    1             UNION ALL
      SELECT 12, 1,    2             UNION ALL
      SELECT 13, 2,    1             UNION ALL
      SELECT 14, NULL, 3             UNION ALL
      SELECT 15, 1,    2             UNION ALL
      SELECT 16, 3,    3             UNION ALL
      SELECT 17, 3,    1             UNION ALL
      SELECT 18, 6,    1             UNION ALL
      SELECT 19, NULL, 2             UNION ALL
      SELECT 20, 5,    3)
order by part, row_id, val
--
ARRAY<STRUCT<part INT64,
             row_id INT64,
             val INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64>>
[
  {1,
   1,
   3,
   3,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL},
  {1,
   3,
   2,
   2,
   3,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL},
  {1,
   7,
   3,
   3,
   5,
   3,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL},
  {1,
   8,
   6,
   6,
   5,
   5,
   3,
   NULL,
   NULL,
   NULL,
   NULL,
   3,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL},
  {1,
   11,
   3,
   3,
   9,
   8,
   5,
   3,
   NULL,
   NULL,
   NULL,
   5,
   3,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL},
  {1,
   13,
   2,
   2,
   9,
   11,
   8,
   5,
   3,
   NULL,
   NULL,
   8,
   5,
   3,
   NULL,
   NULL,
   NULL,
   NULL,
   3,
   NULL},
  {1,
   17,
   3,
   3,
   5,
   12,
   14,
   8,
   5,
   3,
   NULL,
   11,
   8,
   5,
   3,
   NULL,
   NULL,
   NULL,
   2,
   NULL},
  {1, 18, 6, 6, 5, 11, 14, 14, 8, 5, 3, 12, 11, 8, 5, NULL, NULL, NULL, 3, NULL},
  {2,
   2,
   1,
   1,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL},
  {2,
   5,
   1,
   1,
   1,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL},
  {2,
   9,
   NULL,
   NULL,
   2,
   1,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL},
  {2,
   12,
   1,
   1,
   1,
   2,
   1,
   NULL,
   NULL,
   NULL,
   NULL,
   1,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL},
  {2,
   15,
   1,
   1,
   1,
   2,
   2,
   1,
   NULL,
   NULL,
   NULL,
   2,
   1,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL},
  {2,
   19,
   NULL,
   NULL,
   2,
   2,
   2,
   2,
   1,
   NULL,
   NULL,
   2,
   2,
   1,
   NULL,
   NULL,
   NULL,
   NULL,
   1,
   NULL},
  {3,
   4,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL},
  {3,
   6,
   3,
   3,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL},
  {3,
   10,
   5,
   5,
   3,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL},
  {3,
   14,
   NULL,
   NULL,
   8,
   3,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL},
  {3,
   16,
   3,
   3,
   5,
   8,
   3,
   NULL,
   NULL,
   NULL,
   NULL,
   3,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL},
  {3,
   20,
   5,
   5,
   3,
   8,
   8,
   3,
   NULL,
   NULL,
   NULL,
   8,
   3,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL}
]
==

# ROWS window frame : ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
[name=analytic_sum_rows_unbounded_and_current_row]
[labels=analytic_sum_over_rows_between_unbounded_and_current_row]
select part, row_id, val,
       sum(val) over (partition by part order by row_id
                                              ROWS BETWEEN UNBOUNDED PRECEDING
                                                       AND CURRENT ROW),
       sum(val) over (partition by part order by row_id desc
                                              ROWS BETWEEN UNBOUNDED PRECEDING
                                                       AND CURRENT ROW)
FROM (SELECT 1 row_id, 3 val, 1 part UNION ALL
      SELECT 2,  1,    2             UNION ALL
      SELECT 3,  2,    1             UNION ALL
      SELECT 4,  NULL, 3             UNION ALL
      SELECT 5,  1,    2             UNION ALL
      SELECT 6,  3,    3             UNION ALL
      SELECT 7,  3,    1             UNION ALL
      SELECT 8,  6,    1             UNION ALL
      SELECT 9,  NULL, 2             UNION ALL
      SELECT 10, 5,    3             UNION ALL
      SELECT 11, 3,    1             UNION ALL
      SELECT 12, 1,    2             UNION ALL
      SELECT 13, 2,    1             UNION ALL
      SELECT 14, NULL, 3             UNION ALL
      SELECT 15, 1,    2             UNION ALL
      SELECT 16, 3,    3             UNION ALL
      SELECT 17, 3,    1             UNION ALL
      SELECT 18, 6,    1             UNION ALL
      SELECT 19, NULL, 2             UNION ALL
      SELECT 20, 5,    3)
order by part, row_id, val
--
ARRAY<STRUCT<part INT64, row_id INT64, val INT64, INT64, INT64>>[
  {1, 1, 3, 3, 28},
  {1, 3, 2, 5, 25},
  {1, 7, 3, 8, 23},
  {1, 8, 6, 14, 20},
  {1, 11, 3, 17, 14},
  {1, 13, 2, 19, 11},
  {1, 17, 3, 22, 9},
  {1, 18, 6, 28, 6},
  {2, 2, 1, 1, 4},
  {2, 5, 1, 2, 3},
  {2, 9, NULL, 2, 2},
  {2, 12, 1, 3, 2},
  {2, 15, 1, 4, 1},
  {2, 19, NULL, 4, NULL},
  {3, 4, NULL, NULL, 16},
  {3, 6, 3, 3, 16},
  {3, 10, 5, 8, 13},
  {3, 14, NULL, 8, 8},
  {3, 16, 3, 11, 8},
  {3, 20, 5, 16, 5}
]
