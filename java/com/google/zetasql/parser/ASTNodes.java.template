/*
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

// ASTNodes.java GENERATED FROM ASTNodes.java.template
package com.google.zetasql.parser;

import com.google.common.collect.ImmutableList;
import com.google.zetasql.ZetaSQLType.TypeKind;
import java.util.List;
import javax.annotation.Generated;

/** ASTNodes is an outer class to contain all generated AST Node classes. */
@Generated("//java/com/google/zetasql/parser:gen_java")
@SuppressWarnings("LineLength")
public class ASTNodes {
# for node in nodes|sort_by_tag_id
{{blank_line}}
  # if node.javadoc
{{node.javadoc}}
  # else
  /** {{node.name}}. */
  # endif

{# Class declaration #}
  # if node.is_abstract
  public abstract static class {{node.name}} extends {{node.parent}} {
  # else
  public static class {{node.name}} extends {{node.parent}} {
  # endif

{# Field definitions #}
  # for field in node.fields
    # if field.private_javadoc
{{field.private_javadoc}}
    # endif
    private final {{field.full_java_type}} {{field.name|lower_camel_case}};
  # endfor

{# Constructor #}
{{blank_line}}
    {{node.name}}({{node.proto_type}} proto) {
      super(proto.getParent());
{# Constuctor inits each node field using deserialize() for field's type,  #}
{# or sets the field directly from the proto if it is a scalar type.       #}
  # for field in node.fields
   # if field.is_node_ptr
      if (proto.has{{field.name|upper_camel_case}}()) {
        {{field.name|lower_camel_case}} =
            {{field.java_type}}.deserialize(proto.get{{field.name|upper_camel_case}}());
      } else {
        {{field.name|lower_camel_case}} = null;
      }
   # elif field.is_vector
    # if field.java_type == 'ASTNode'
      {# Only ASTOnOrUsingClauseList has a field of type ASTNode. #}
      {# TODO: Decide how or if this should be supported. #}
      // ASTNode field not supported for deserialization.
      {{field.name|lower_camel_case}} = ImmutableList.of();
    # else
      ImmutableList.Builder<{{field.java_type}}> {{field.name|lower_camel_case}}Builder =
          ImmutableList.builder();
      for ({{field.proto_type}} element : proto.get{{field.name|upper_camel_case}}List()) {
        {{field.name|lower_camel_case}}Builder
            .add({{field.java_type}}.deserialize(element));
      }
      {{field.name|lower_camel_case}} = {{field.name|lower_camel_case}}Builder.build();
    # endif
   # else
      {{field.name|lower_camel_case}} = proto.get{{field.name|upper_camel_case}}();
   # endif
  # endfor
    }
{{blank_line}}

{# static deserialize method #}
{# For abstract classes, call deserialize() for the subclass, which may be abstract or final. #}
  # if node.is_abstract
    public static {{node.name}} deserialize(
        {{node.proto_field_type}} proto) {
      switch (proto.getNodeCase()) {
   # for tag_id, root_child_node in node.subclasses|dictsort
        case {{root_child_node.node_kind}}_NODE:
          return {{root_child_node.name}}.deserialize(
              proto.get{{root_child_node.node_kind|upper_camel_case}}Node());
   # endfor
        default:
          throw new IllegalArgumentException("Invalid Node kind: " + proto.getNodeCase());
      }
    }
  # else
{# final classes are instantiated directly. #}
    public static {{node.name}} deserialize(
        {{node.proto_type}} proto) {
      return new {{node.name}}(proto);
    }

{{ blank_line }}
    @Override
    public final String nodeKindString() {
      return "{{node.node_kind_name}}";
    }
  # endif

{# Getters #}
  # for field in node.fields
{{ blank_line }}
   # if field.javadoc
{{field.javadoc}}
   # endif
    public final {{field.full_java_type}} get{{field.name|upper_camel_case}}() {
      return {{field.name|lower_camel_case}};
    }
  # endfor
{{blank_line}}
{# collectDebugStringFields #}
    public void collectDebugStringFields(List<DebugStringField> debugStringfields) {
      super.collectDebugStringFields(debugStringfields);
  # for field in node.fields
   # if field.is_node_ptr
      if ({{field.name|lower_camel_case}} != null) {
        debugStringfields.add(
          new DebugStringField("{{field.name}}",
            {{field.name|lower_camel_case}}));
      }
   # elif field.is_vector
      if (!{{field.name|lower_camel_case}}.isEmpty()) {
        debugStringfields.add(
          new DebugStringField("{{field.name}}",
            {{field.name|lower_camel_case}}));
      }
   # else
      debugStringfields.add(
        new DebugStringField("{{field.name}}",
          {{field.name|lower_camel_case}}));
   # endif
  # endfor
    }
  }
# endfor
{{blank_line}}
  private ASTNodes() {}
}
