/*
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

// RewritingVisitor.java GENERATED FROM RewritingVisitor.java.template
package com.google.zetasql.resolvedast;

import com.google.common.collect.ImmutableList;
# for node in nodes|sort_by_name
import com.google.zetasql.resolvedast.ResolvedNodes.{{node.name}};
# endfor
import java.util.function.Function;
import javax.annotation.Nullable;

/**
 * Base class for visitors that modify trees of {@link ResolvedNode}s.
 *
 * <p>This is analogous to ResolvedASTDeepCopyVisitor in C++. However,
 * because the trees are immutable in Java, subtrees without modifications
 * can be re-used.
 */
public abstract class RewritingVisitor {
{{ blank_line }}
# for node in nodes
  # if not node.is_abstract
  protected {{node.name}} visit({{node.name}} node) {
    {% set node_ptrs = ((node.inherited_fields + node.fields) | is_node_ptr) %}
    {% set node_vectors = ((node.inherited_fields + node.fields) | is_node_vector) %}
    # if node_ptrs or node_vectors
      # for field in node_ptrs
        {% set uname = field.name|upper_camel_case %}
    {{field.full_java_type}} new{{uname}} =
        node.get{{uname}}() != null
            ? node.get{{uname}}().accept(this)
            : null;
      # endfor
      # for field in node_vectors
        {% set uname = field.name|upper_camel_case %}
    {{field.full_java_type}} new{{uname}} =
        descend(n -> n.accept(this), node.get{{uname}}());
      # endfor
      # for field in node_ptrs + node_vectors
        {% set uname = field.name|upper_camel_case %}
        {% set cmp = "node.get" ~ uname ~ "() != new" ~ uname %}
        # if loop.first and loop.last
    if ({{cmp}}) {
        # elif loop.first
    if ({{cmp}}
        # elif loop.last
        {# hide the extra opening brace so the braces balance #}
        || {{cmp}}) {{ ("%c" % 123) }}
        # else
        || {{cmp}}
        # endif
      # endfor
      ResolvedNodes.{{node.name}}.Builder builder = node.toBuilder();
      # for field in node_ptrs + node_vectors
      builder.set{{field.name|upper_camel_case}}(new{{field.name|upper_camel_case}});
      # endfor
      return builder.build();
    } else {
      return node;
    }
    # else
    return node;
    # endif
  }
  {{ blank_line }}
  # endif
# endfor
{{ blank_line }}
  /**
   * Visits each element of the given list and returns an updated copy of the
   * list if any element is changed, or the given list instance otherwise.
   */
  private <T extends ResolvedNode> ImmutableList<T> descend(
      Function<T, T> acceptFunc, @Nullable ImmutableList<T> list) {
    if (list != null) {
      int index = 0;
      T rewrittenElement = null;
      for (index = 0; index < list.size(); index++) {
        rewrittenElement = acceptFunc.apply(list.get(index));
        if (rewrittenElement != list.get(index)) {
          // This element of the list needs to change, so we have to copy.
          break;
        }
      }
      if (index == list.size()) {
        // No element of the list changed, so return the original list.
        return list;
      } else {
        ImmutableList.Builder<T> builder = ImmutableList.builderWithExpectedSize(list.size());
        // Copy the unmodified prefix of the list.
        list.subList(0, index).forEach(builder::add);
        // Add the first modified element.
        builder.add(rewrittenElement);
        // Call the visitor with each remaining element.
        while (++index < list.size()) {
          builder.add(acceptFunc.apply(list.get(index)));
        }
        return builder.build();
      }
    } else {
      return null;
    }
  }
}
